<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <id>http://bionicspirit.com/</id>
 <title>Bionic Spirit</title>
 <link href="http://bionicspirit.com/rss" rel="self"/>
 <link href="http://bionicspirit.com/" />
 <updated>2012-01-11T00:21:17+02:00</updated>

 <author>
   <name>Bionic Spirit</name>
   <email>contact@bionicspirit.com</email>
   <uri>http://bionicspirit.com</uri>
 </author>

 
 
 <entry>
   <title>Merging Two Domains - alexn.org and bionicspirit.com</title>
   <link href="http://bionicspirit.com/blog/2012/01/10/domains-merged.html"/>
   <updated>2012-01-10T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2012/01/10/domains-merged</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2012 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="tutorial" label="tutorial" />
   
   <category scheme="http://bionicspirit.com/tag/" term="servers" label="servers" />
   
   <category scheme="http://bionicspirit.com/tag/" term="heroku" label="heroku" />
   
   <category scheme="http://bionicspirit.com/tag/" term="publishing" label="publishing" />
   

   <content type="html">&lt;p&gt;I apologize if your feed reader went rogue and flagged all articles as
being unread. I migrated &lt;em&gt;alexn.org&lt;/em&gt; to a new domain name:
&lt;em&gt;bionicspirit.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;bionicspirit.com&lt;/em&gt; was supposed to be a blog about Android-related
development, however I cannot focus on two blogs, one being a big
enough chore already. I also prefer &lt;em&gt;bionicspirit.com&lt;/em&gt; because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it can be pronounced even over the phone, in English or in my native
language,&lt;/li&gt;
&lt;li&gt;it is easier to remember, even if it is longer,&lt;/li&gt;
&lt;li&gt;it is a dot-com.&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;301 Permanent Redirect&lt;/h2&gt;

&lt;p&gt;I had to do a 301 Permanent Redirect for all requests, from
&lt;em&gt;alexn.org&lt;/em&gt; to &lt;em&gt;bionicspirit.com&lt;/em&gt;, without changing the path. This
keeps all links valid, keeps users happy and also keeps the Google
Juice flowing.&lt;/p&gt;

&lt;p&gt;In case you don't have a smart DNS service, here's how to do it
cheaply, using Heroku (again):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# new directory&lt;/span&gt;
mkdir mydomain
&lt;span class=&quot;c&quot;&gt;# change to it&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;mydomain

&lt;span class=&quot;c&quot;&gt;# initialize a git repository&lt;/span&gt;
git init .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Then create a file called &quot;&lt;em&gt;Gemfile&lt;/em&gt;&quot;, for specifying dependencies:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://rubygems.org&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rack&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# command line tools&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;heroku&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Install these prerequisites (on the command-line again):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# in case you don&amp;#39;t already have Bundler installed:&lt;/span&gt;
gem install bundler

&lt;span class=&quot;c&quot;&gt;# and then ...&lt;/span&gt;
bundle install 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Create a Rack configuration file that handles your logic, called
&quot;&lt;em&gt;config.ru&lt;/em&gt;&quot;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# our Rack middleware&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedirectBetweenDomains&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;# replacement logic here:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;new_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;alexn.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;bionicspirit.com&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&amp;quot;Location&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
      
      &lt;span class=&quot;c1&quot;&gt;# permanent redirects could end up cached&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;Cache-Control&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;no-cache&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      
      &lt;span class=&quot;c1&quot;&gt;# not really needed, but rack complains otherwise&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;    

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RedirectBetweenDomains&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now deploy on Heroku (from the command line):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# committing&lt;/span&gt;
git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;initial commit - rack config&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# creating heroku app&lt;/span&gt;
heroku create

&lt;span class=&quot;c&quot;&gt;# renaming to something nicer&lt;/span&gt;
heroku rename yourappid

&lt;span class=&quot;c&quot;&gt;# deploying on heroku&lt;/span&gt;
git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;When it finishes, you can test the setup on
&lt;em&gt;http://yourappid.heroku.com&lt;/em&gt; (where &lt;em&gt;rabbit&lt;/em&gt; is your application's
name). Also checkout their article on
&lt;a href=&quot;http://devcenter.heroku.com/articles/custom-domains&quot;&gt;adding custom domains&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Blogging Platform for Hackers</title>
   <link href="http://bionicspirit.com/blog/2012/01/05/blogging-for-hackers.html"/>
   <updated>2012-01-05T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2012/01/05/blogging-for-hackers</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2012 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="tutorial" label="tutorial" />
   
   <category scheme="http://bionicspirit.com/tag/" term="servers" label="servers" />
   
   <category scheme="http://bionicspirit.com/tag/" term="heroku" label="heroku" />
   

   <content type="html">&lt;p&gt;&lt;img src=&quot;//assets-2.alexn.org/assets/photos/heroku.png&quot; class=&quot;right&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I'm showing you how to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;host your own static website on Heroku's free plan;&lt;/li&gt;
&lt;li&gt;use Google's App Engine as a CDN, for better responsiveness;&lt;/li&gt;
&lt;li&gt;keep Heroku's free dyno alive, by using a GAE cron job;&lt;/li&gt;
&lt;li&gt;have a very responsive, scalable and secure blog, with ultimate;
control and simplicity, for zero bucks per month;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;You could just skip this article and browse the source code of my
blog:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexandru/bionicspirit.com&quot;&gt;github.com/alexandru/bionicspirit.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Forget about Wordpress or Blogger. Hacking your own stuff is much more
fun. Also, make sure to read
&lt;a href=&quot;http://tom.preston-werner.com/2008/11/17/blogging-like-a-hacker.html&quot;&gt;Blogging Like a Hacker&lt;/a&gt;,
by Tom Preston-Werner, GitHub's cofounder and the author of Jekyll.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE: article was changed three times to better express
rationale and in response to user feedback.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Jekyll and Heroku, Sitting in a Tree&lt;/h2&gt;

&lt;p&gt;I love &lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;, the static
website generator. It is pure awesomeness for me:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;all content is hosted in a Git repository, the best CMS ever
invented&lt;/li&gt;
&lt;li&gt;my articles are written in Markdown, with Emacs, the most potent
text editor ever created - think Textmate-snippets, macros, syntax
highlighting, keyboard-driven navigation and spelling corrections&lt;/li&gt;
&lt;li&gt;static content scales like crazy, without any special gimmicks. A
small VPS can serve thousands of requests per second without a
sweat&lt;/li&gt;
&lt;li&gt;static content is also secure by default, no constant upgrades
required, no SQL injections&lt;/li&gt;
&lt;li&gt;I always make little tweaks to my design, I'm never satisfied, which
is why it makes sense to make my own, but checkout
&lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt; in case you want a reasonable
default&lt;/li&gt;
&lt;li&gt;I've lost an entire blog when my hosting account got blocked in the
past. Never again, as my content is right now saved in 2 Git
repositories and on my local machine&lt;/li&gt;
&lt;li&gt;by working with my own domain, making my own shit, Google will never
make me cry ;-)&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Jekyll's first hosting option you should consider is
&lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;, however you will need &lt;em&gt;some&lt;/em&gt;
dynamic behavior, like having configurable redirects. If you don't
then ignore this post and just read
&lt;a href=&quot;https://github.com/mojombo/jekyll/wiki/usage&quot;&gt;Jekyll's tutorial&lt;/a&gt;, but
you can come back to this post when its limits start bothering you.&lt;/p&gt;

&lt;p&gt;Heroku's free plan is awesome, in spite of what
&lt;a href=&quot;/blog/2011/10/23/why-i-find-heroku-suboptimal.html&quot;&gt;I said previously&lt;/a&gt;.
It's great for prototyping and for quickly seeing your website
online. Instant gratification is awesome. Well, it does have some
problems and to tell you the truth, for hosting my blog I would have
rather used Google's &lt;a href=&quot;http://code.google.com/appengine/&quot;&gt;App Engine&lt;/a&gt;,
if only they allowed me to have naked domains. I like my domains to be
naked.&lt;/p&gt;

&lt;p&gt;One note in regards to the scalability of static content I mentioned
above. In Heroku the Bamboo stack features a Varnish frontend. If you
set proper expiry headers on your content, subsequent requests will
not hit the Ruby server.&lt;/p&gt;

&lt;h2&gt;Hosting Static Content on Heroku&lt;/h2&gt;

&lt;p&gt;So this tutorial is about hosting a Jekyll website, which is why I'm
going to make some assumptions about your directory structure. However
you can modify these instructions for any static website, not just
Jekyll-generated stuff.&lt;/p&gt;

&lt;p&gt;First, the setup:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# install the heroku command-line utility&lt;/span&gt;
gem install heroku

&lt;span class=&quot;c&quot;&gt;# change to your website directory&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;website/

&lt;span class=&quot;c&quot;&gt;# initialize a git repo, if you haven&amp;#39;t done so&lt;/span&gt;
git init
&lt;span class=&quot;c&quot;&gt;# ... and commit everything to it&lt;/span&gt;
git add .
git commit -m &lt;span class=&quot;s1&quot;&gt;&amp;#39;initial commit&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# create the heroku app&lt;/span&gt;
heroku create
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;OK, now we need a Rake-powered application to serve our
content. We'll need a &lt;em&gt;./Gemfile&lt;/em&gt; ...&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://rubygems.org&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rack&amp;#39;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mime-types&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jekyll&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rdiscount&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;hpricot&amp;#39;&lt;/span&gt;  
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Then install these gems with:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;bundle install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;You also need a Rake configuration file, &lt;em&gt;./config.ru&lt;/em&gt;. What follows is the
configuration that I am using. You can go simpler, a lot simpler than
this actually, but I like flexibility and Heroku also does something
funny with files served through Rack::File, so I refrained from using
it ...&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Rack configuration file for serving a Jekyll-generated static&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# website from Heroku, with some nice additions:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# * knows how to do redirects, with settings taken from ./_config.yaml&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# * sets the cache expiry for HTML files differently from other static&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   assets, with settings taken from ./_config.yaml&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;yaml&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mime/types&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# main configuration file, also used by Jekyll&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YAML&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_config.yml&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# points to our generated website directory&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;PUBLIC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; 
                          &lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;destination&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_site&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# For cutting down on the boilerplate&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BaseMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Rack middleware for correcting paths:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 1. redirects from the www. version to the naked domain version&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 2. converts directory/paths/ to directory/paths/index.html (most&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    importantly / to /index.html)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PathCorrections&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BaseMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;PATH_INFO&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;PATH_INFO&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_with?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;www.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;301&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Location&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;//www.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;//&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;    
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Middleware that enables configurable redirects. The configuration is&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# done in the standard Jekyll _config.yml file.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Sample configuration in _config.yml:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#   redirects:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#     - from: /docs/some-document.html&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#       to: /archive/some-document.html&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#       type: 301&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# The sample above will do a permanent redirect from ((*/docs/dialer.html*))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# to ((*/archive/some-document.html*))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Redirects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BaseMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;redirects&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;from&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new_location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;to&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;new_location&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start_with?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;302&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Location&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_location&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# The 404 Not Found message should be a simple one in case the&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# mimetype of a file is not HTML (like the message returned by&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Rack::File). However, in case of HTML files, then we should display&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# a custom 404 message&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fancy404NotFound&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BaseMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;PATH_INFO&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/html?$/&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PUBLIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;404.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;# Mimicking Rack::File&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# I couldn&amp;#39;t work with Rack::File directly, because for some reason&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# Heroku prevents me from overriding the Cache-Control header, setting&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# it to 12 hours. But 12 hours is not suitable for HTML content that&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# may receive fixes and other assets should have an expiry in the far &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# future, with 12 hours not being enough. &lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BaseMiddleware&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Http404&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;guess_mimetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Types&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# a /ping request always hits the Ruby Rake server - useful in&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# case you want to setup a cron to check if the server is still&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# online or bring it back to life in case it sleeps&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/ping&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
          &lt;span class=&quot;s1&quot;&gt;&amp;#39;Cache-Control&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;no-cache&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mimetype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guess_mimetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mimetype&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mimetype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Language&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;en&amp;#39;&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;; charset=utf-8&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# basic validation of the path provided&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Http404&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;..&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;abs_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PUBLIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Http404&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exists?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;abs_path&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;# setting Cache-Control expiry headers&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\.html?$/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;html&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;assets&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Cache-Control&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;public, max-age=&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Cache-Control&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CONFIG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;expires&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_s&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;abs_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Http404&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;404 Not Found: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path_info&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# the actual Rack configuration, using &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# the middleware defined above&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Redirects&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PathCorrections&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Fancy404NotFound&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PUBLIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This Rack configuration uses settings defined in the standard Jekyll
&lt;em&gt;_config.yaml&lt;/em&gt; file. Here are some settings needed for it to work as
intended:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;./_site&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;expires&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;3600&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# one hour&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1314000&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# one year&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;redirects&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/rss/&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;http://feeds.feedburner.com/bionicspirit&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;302&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;OK, so once done, test this configuration:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# generating the website&lt;/span&gt;
jekyll

&lt;span class=&quot;c&quot;&gt;# starting the server&lt;/span&gt;
rackup
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Deployment is as easy as pie:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;git push heroku master
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;One note: Heroku could be configured to automatically generate the
website for you. However you either have to use the Cedar stack, or
generate the pages on the fly. In case of the Cedar stack, you lose
Varnish. Just keep your generated files in Git, it's easier.&lt;/p&gt;

&lt;h2&gt;Commenting with Disqus, Facebook or Roll Your Own&lt;/h2&gt;

&lt;p&gt;For commenting &lt;a href=&quot;http://disqus.com&quot;&gt;Disqus&lt;/a&gt; is a really good
service. In case you have a very popular website amongst normal
people, it may be even better to integrate Facebook's commenting
widget.&lt;/p&gt;

&lt;p&gt;Well, I had some fun a while ago and created my own:
&lt;a href=&quot;https://github.com/alexandru/TheBuzzEngine&quot;&gt;TheBuzzEngine&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately it doesn't have all the features I want, but it does get
the job done and it isn't bloated. These days I'll probably get around
to adding some stuff to it, like threaded comments and email
subscriptions. This is what happens when working for fun on stuff -
once you're over a certain threshold, the return of investment is too
low to bother with extra development.&lt;/p&gt;

&lt;p&gt;I recommend Disqus, although rolling your own is fun and keeps you in
control (which is the reason I'm using Jekyll in the first place).&lt;/p&gt;

&lt;h2&gt;Using Google App Engine as Your CDN or Cron Manager&lt;/h2&gt;

&lt;p&gt;So when using Heroku's free plan, I feel a little uncomfortable
because relying on one dyno can get you in trouble. Having Varnish in
front is great, but Varnish is a cache manager. For instance, if you
happen to push a new version of your latest article to Heroku, then
the Varnish cache gets cleared and the Ruby server can potentially get
exposed to a lot of requests and one dyno on Heroku can only serve one
request at a time.&lt;/p&gt;

&lt;p&gt;So why not push all our static assets, except HTML files, to a CDN?
It's best practice anyway as your website should be more
responsive. If you have an Amazon AWS account, then CloudFront + S3
are great.&lt;/p&gt;

&lt;p&gt;However, I started with the goal of hosting this for zero bucks (it's
fun, so why not?). Therefore I'm going to teach you how to push your
files to Google's &lt;a href=&quot;http://code.google.com/appengine/&quot;&gt;App Engine&lt;/a&gt;. I
don't really know how GAE works as a CDN for static files, but it
seems that it does have the
&lt;a href=&quot;http://blog.sallarp.com/google-app-engine-cdn/&quot;&gt;properties of a CDN&lt;/a&gt;
(i.e. serving content to users from servers closer to their location).&lt;/p&gt;

&lt;p&gt;Another problem with Heroku's free plan is that the free dyno goes to
sleep, to save resources. While I advise you to just pay up for an
extra dyno, you can get around this restriction by just configuring
GAE to send a periodic &lt;em&gt;ping&lt;/em&gt; to your website.&lt;/p&gt;

&lt;p&gt;Here's my GAE configuration file, &lt;em&gt;app.yaml&lt;/em&gt; which should sit in your
root (assuming &lt;em&gt;./assets&lt;/em&gt; is the directory you want to serve from GAE):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;assets-bionicspirit&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;runtime&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;python27&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;api_version&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;threadsafe&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;l-Scalar-Plain&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/assets&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;static_dir&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;assets&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;expiration&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;365d&amp;quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# next item is for our cron job, described below, but you can ignore&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# it if you don&amp;#39;t want a cron job ...&lt;/span&gt;

&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/tasks/ping&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ping.app&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;As you can see, I'm setting the expiry of my static assets to a
whooping 1 year.&lt;/p&gt;

&lt;p&gt;I also have a real handler, at &lt;em&gt;/tasks/ping&lt;/em&gt; configured. This will be
our cron job that sends a ping to our Heroku app, every X
minutes. Here's the code for &lt;em&gt;ping.py&lt;/em&gt; ...&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;webapp2&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;google.appengine.api&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlfetch&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PingService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webapp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
      &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;text/plain&amp;#39;&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;http://bionicspirit.com/ping&amp;quot;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urlfetch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deadline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;HTTP &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%d&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; 
              &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status_code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;except&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;ERROR: no response&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;webapp2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WSGIApplication&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;/tasks/ping&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PingService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;But we are not done. To configure &lt;em&gt;/tasks/ping&lt;/em&gt; to run every X
minutes, you also need a &lt;em&gt;cron.yaml&lt;/em&gt; file ...&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;cron&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;p-Indicator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ping bionicspirit.com to wake it up&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;/tasks/ping&lt;/span&gt;
  &lt;span class=&quot;l-Scalar-Plain&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;every 4 minutes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Assuming you already have the
&lt;a href=&quot;http://code.google.com/appengine/docs/python/gettingstarted/devenvironment.html&quot;&gt;GAE SDK installed&lt;/a&gt;,
then run this command:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;appcfg.py update .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;To see it working on this blog, here are the requests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Heroku URL getting requested: &lt;a href=&quot;http://bionicspirit.com/ping&quot;&gt;http://bionicspirit.com/ping&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GAE Cron Job getting executed: &lt;a href=&quot;http://assets-bionicspirit.appspot.com/tasks/ping&quot;&gt;http://assets-bionicspirit.appspot.com/tasks/ping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Extra Tip - CloudFlare&lt;/h2&gt;

&lt;p&gt;Luigi Montanez kindly pointed out in below's comments the availability
of &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;CloudFlare is a proxy that sits between your website and your
users. It allegedly prevents DDOS attacks on your website, but it also
caches static content, which helps because apparently it also has the
properties of a CDN.&lt;/p&gt;

&lt;p&gt;I activated it to see how it works. The main reason is that GAE has a
1 GB bandwidth-out daily limit - and this article generated ~ 10,000
visits in only one day, which consumed ~ 700 MB of bandwidth on GAE
(for a couple of small images, I don't want to imagine what would
happen for an image-rich post). So that's not good and I placed
CloudFlare in front of GAE and my Heroku instance, which should save
some bandwidth for me.&lt;/p&gt;

&lt;p&gt;I don't have a conclusion on CloudFlare. If it works as advertised,
then it is &lt;em&gt;awesome&lt;/em&gt;. Although be careful about it as I've seen
reports on the Internet that it may in fact add latency to your
website, instead of decreasing it.&lt;/p&gt;

&lt;p&gt;For my website however, everything seems to be fine. I am monitoring
my website with &lt;a href=&quot;http://pingdom.com&quot;&gt;Pingdom.com&lt;/a&gt;, a service which
also reports the average responsiveness of the website, calculated by
doing requests from multiple locations. The homepage, which is not
cached by CloudFlare or served by GAE, has an average load time of
300ms, while cached static resources from GAE and proxied through
CloudFlare are doing much better.&lt;/p&gt;

&lt;p&gt;So we'll see.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The result is a really responsive, scalable and kick-ass blog, for
zero bucks spent on hosting.&lt;/p&gt;

&lt;p&gt;This very blog is hosted using the method described above. Well, I'll
probably return to my trustworthy VPS instance as I'm paying for it
anyway, but this was fun.&lt;/p&gt;

&lt;p&gt;Enjoy ~&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>UX Tip: Don't Make Me Curse The Day I Decided To Sign-Up</title>
   <link href="http://bionicspirit.com/blog/2011/12/16/ux-tip-dont-make-your-interface-us-centric.html"/>
   <updated>2011-12-16T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2011/12/16/ux-tip-dont-make-your-interface-us-centric</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="opinion" label="opinion" />
   
   <category scheme="http://bionicspirit.com/tag/" term="ux" label="ux" />
   

   <content type="html">&lt;p&gt;To illustrate the shit I was talking about in
&lt;a href=&quot;/blog/2011/12/12/ux-tip-outside-us-dont-require-postal-codes.html&quot;&gt;Outside the US, Don't Require Postal Codes&lt;/a&gt;,
here's a concrete example: &lt;strong&gt;DZone.com&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//assets-2.alexn.org/assets/photos/dzone.png&quot; style=&quot;max-width: 95%; display:block; margin: auto; margin-top: 30px; margin-bottom: 30px; box-shadow: 0px 0px 4px #888; border-radius: 10px; padding: 5px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Phone validation is broken&lt;/strong&gt; - apparently DZone doesn't like the
fact that I've got a nice / memorable number with repeating digits
(that's not my number btw, but I just changed the digits for this
article, the format is the same). The phone is required too, . Why the
heck do you need my phone number anyway? Isn't email enough? I always
check my email, I'm always connected. And it should be up to me to
decide what contacting options you receive. I complained to them about
this. 24 hours later, no response.&lt;/p&gt;

&lt;p&gt;This is one of those cases in which people want to show their
cleverness. &lt;em&gt;Oh, look at my form, it's so clever&lt;/em&gt;. Just like the
people that think a maximum &lt;em&gt;password length&lt;/em&gt; of 16 to 30 chars is a
good idea (DZone does this too btw) - in the spirit of always
validating your inputs. After all, those plain-text passwords in their
database eats up space.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Zip/Postal Code is required&lt;/strong&gt;. I don't know it by default, I never
use it anyway, never. For DZone I didn't even bother to look it up. I
never bothered to provide a correct one for Amazon, which is actually
sending me stuff, like purchased items or money. So I provided a fake
one.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Why is Company Name required?&lt;/strong&gt; - Maybe I'm an independent. Maybe
I'm unemployed. Maybe I don't want to freaking tell you about it. Are
you going to harass me through my employer in case I don't behave? I
won't even mention the required-ness of the job title / job
function. Would that prove I'm qualified? That's just sad.&lt;/p&gt;

&lt;p&gt;Maybe you want to simulate Facebook's original exclusiveness. However
make sure people actually want to be members first.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I don't know the size of the company I'm working for&lt;/strong&gt; - maybe this
is a no brainer for the people that actually care to put this on their
business cards or talk about it at &lt;em&gt;stand-ups&lt;/em&gt; within the company,
just before gathering around a fire singing Kumbaya. However, the
company I work for has people distributed in remote locations and I
don't interact with all of them, while big corporations have centers
all over the world - to not lie, you'd basically have to do a google
search, or ask around, just to get past a freaking form (that doesn't
send you money for the effort).&lt;/p&gt;

&lt;p&gt;So there you have it, a good example.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Crawling the Android Marketplace</title>
   <link href="http://bionicspirit.com/blog/2011/12/15/crawling-the-android-marketplace-155200-apps.html"/>
   <updated>2011-12-15T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2011/12/15/crawling-the-android-marketplace-155200-apps</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="entrepreneurship" label="entrepreneurship" />
   
   <category scheme="http://bionicspirit.com/tag/" term="python" label="python" />
   
   <category scheme="http://bionicspirit.com/tag/" term="android" label="android" />
   
   <category scheme="http://bionicspirit.com/tag/" term="tutorial" label="tutorial" />
   

   <content type="html">&lt;p&gt;I had a very specific need for fetching the details for some apps in
the marketplace, in an automated manner. And so I found
&lt;a href=&quot;https://github.com/jberkel/supermarket&quot;&gt;the supermarket gem&lt;/a&gt;, a
wrapper for the
&lt;a href=&quot;http://code.google.com/p/android-market-api/&quot;&gt;Android Market API&lt;/a&gt;
Java implementation. However, it gives unpredictable results (it
wouldn't return the details of our in-house apps or of many other
examples I tried) and Google is placing hard-limits on the number of
requests you can make per minute. This is an internal API, probably
used by the marketplace client and the implementation mentioned above
was created through reverse-engineering.&lt;/p&gt;

&lt;p&gt;This really pissed me off, this is Google, they should grok APIs. But
this info is already available from their website and so I went ahead
and crawled it.&lt;/p&gt;

&lt;p&gt;The script &lt;strike&gt;and the data collected are&lt;/strike&gt; is available. Read below.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;h2&gt;How To Do it By Yourself&lt;/h2&gt;

&lt;p&gt;&lt;img class=&quot;right&quot; src=&quot;//assets-1.alexn.org/assets/photos/wolfspider150.gif&quot;&gt;&lt;/p&gt;

&lt;p&gt;The actual script that I created can be found in the
&lt;a href=&quot;https://github.com/alexandru/AndroidMarketCrawler&quot;&gt;AndroidMarketCrawler&lt;/a&gt;
GitHub Repository, with the relevant files being:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/alexandru/AndroidMarketCrawler/blob/master/crawler.py&quot;&gt;crawler.py&lt;/a&gt; - source code with lots of comments, it's really not complicated, you should go read it&lt;/li&gt;
&lt;li&gt;&lt;strike&gt;marketplace_database.json_lines.bz2 - compressed file
containing the details of the crawled apps, one per each line; this
is not a proper JSON file, you use it by reading it line by line,
where each line represents a JSON object (personal preference, as
otherwise the file is pretty big and you can run out of
memory)&lt;/strike&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;UPDATE: I decided to pull the crawled data out, deleting it. The
Android Marketplace explicitly bans crawling apparently.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AndroidMarketCrawler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concurrency&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# app is at this point a dictionary with the details needed, like&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;#  id, name, developer name, number of installs, etc...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;I used the Python programming language, along with
&lt;a href=&quot;eventlet.net&quot;&gt;Eventlet&lt;/a&gt; for fetching URLs in parallel (async I/O with
epoll/libevent, providing you with coroutines support and green
threads) and &lt;a href=&quot;http://packages.python.org/pyquery/&quot;&gt;PyQuery&lt;/a&gt; for
selecting DOM elements using CSS3 selectors (instead of XPath or
BeautifulSoup). If you fancy Ruby instead, you could use slight
equivalents such as
&lt;a href=&quot;https://github.com/igrigorik/em-http-request&quot;&gt;em-http-request&lt;/a&gt; and
&lt;a href=&quot;http://nokogiri.org/&quot;&gt;Nokogiri&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So you start fetching content from a root and add application links as
you encounter them in a queue. We are then using a (green) threadpool
to start fetching jobs for each of the links in the queue. So it's
recursive. The results are also pushed in another queue, ready to be
consumed by the client.&lt;/p&gt;

&lt;p&gt;Be careful though, don't abuse this, as it will generate a ton of
traffic and your IP may end up being banned by Google. It also takes a
lot of time; with good bandwidth and a VPS located in California, it
still took me 5 hours for the script to finish. Don't abuse the
concurrency settings either, 10 is enough.&lt;/p&gt;

&lt;h2&gt;155,200 Apps Available From the US&lt;/h2&gt;

&lt;p&gt;You have to realize that this number is only approximate. Apps are
going strong in other countries, such as South Korea and Google does
Geo-IP filtering, which means some of the apps were unavailable to me,
depending on restrictions set by their developers.&lt;/p&gt;

&lt;p&gt;The numbers published by
&lt;a href=&quot;http://www.readwriteweb.com/mobile/2011/10/android-market-hits-500000-suc.php&quot;&gt;Research2Guidance in October&lt;/a&gt;
tell the story of 500,000 apps published on the Marketplace. But this
gets weird, as I took the number of downloads from those 155,200 apps
and it &lt;em&gt;matches&lt;/em&gt; the number of downloads
&lt;a href=&quot;http://android-developers.blogspot.com/2011/12/10-billion-android-market-downloads-and.html&quot;&gt;published by Google this month&lt;/a&gt;. See
below.&lt;/p&gt;

&lt;h3&gt;An Average of 13.63 Billion Downloads&lt;/h3&gt;

&lt;p&gt;So there have been between 5,514,202,281 and 21,545,335,515 downloads
for &lt;em&gt;free apps&lt;/em&gt;, making the average 13,529,768,898 downloads.&lt;/p&gt;

&lt;p&gt;More interesting however is that according to my data for paid apps,
the number of downloads is between 42,576,311 and 164,116,615. This
number seems rather low to me, making it clear that Android
distribution is freemium based.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;UPDATE: initially here there were some charts showing the popularity
of free/paid apps per category. I deleted them as I don't like the
flames these kind of charts generate!&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I don't think I have one. Upon analyzing the data, it seems to me like
the development model of Android resembles that of the web - lots of
freemium apps, lots of crap. However, there are gems on the market
available and there are developers making a decent income from
publishing on Android's Marketplace. Competition is tough, but it is
(for now at least) an unregulated free market with tremendous
potential.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>UX Tip: Outside the US, Don't Require Postal Codes</title>
   <link href="http://bionicspirit.com/blog/2011/12/12/ux-tip-outside-us-dont-require-postal-codes.html"/>
   <updated>2011-12-12T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2011/12/12/ux-tip-outside-us-dont-require-postal-codes</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="opinion" label="opinion" />
   
   <category scheme="http://bionicspirit.com/tag/" term="ux" label="ux" />
   

   <content type="html">&lt;img src=&quot;//assets-2.alexn.org/assets/photos/ireland.png&quot; style=&quot;float: right; margin-left: 20px; margin-bottom: 20px; margin-top: 20px;&quot; /&gt;

&lt;p&gt;
  I have this annoyance with US-centric UIs that started to bug me
  even on a product I'm working on and I didn't notice it until I
  tested the user experience for other countries. Many apps developed
  primarily for US customers are making the postal code (zipcode in US
  parlance) mandatory and this is a pain in the ass, let me explain
  why.
&lt;/p&gt;

&lt;p&gt;
  You see, postal codes are useful for sorting the mail to be
  delivered. And in the rest of the world (well, not all, most of it)
  postal codes haven't transcended their primary use-case. In many
  countries this code is not even required for sending a letter. This
  is because either the sorting of letters / packages is still done
  manually, or because the system in place has some other means of
  efficiently sorting the mail which precludes the usage of postal
  codes.
&lt;/p&gt;

&lt;p&gt;
  I live in Eastern Europe. Down here nobody knows their postal
  code. Nobody even cares about it. Nobody uses it anywhere, not even
  when sending letters or postcards, even though the postal office
  would thank you if you did.
&lt;/p&gt;

&lt;p&gt;
  My postal code is not written on my ID card, which is EU-compliant
  and with which I can travel anywhere inside EU, without needing a
  passport. It isn't on any legally binding contract I ever
  signed. This code for me is just an optional formality.
&lt;/p&gt;

&lt;p&gt;
  So when US-centric forms ask me for my postal code, &lt;b&gt;I have to
  either look it up, or I end-up providing a fake one&lt;/b&gt;, as
  the postal office or anybody else doesn't really care about
  correctness or the presence of it. And I never bother to remember it
  as I changed addresses a couple of times. My address on Amazon has a
  fake postal code. The packages are arriving just fine, straight at
  my doorstep.
&lt;/p&gt;

&lt;img src=&quot;//assets-1.alexn.org/assets/photos/taxi.jpg&quot; style=&quot;float: right; margin-left: 20px; margin-bottom: 20px;&quot; /&gt;

&lt;p&gt;
  Besides forms for filling out addresses, one other important
  use-case is as a cheap way of getting a location. In the US
  everybody and their dog knows their zipcode. When getting a taxi,
  the driver asks you for the destination zipcode. He then proceeds to
  enter it on his GPS device. And all is well and everybody is happy.
&lt;/p&gt;

&lt;p&gt;
  This model has been copied in web applications. Many web apps ask
  users for their zipcode, to infer their locations. This works for
  businesses too, as it's a lot cheaper to give customers a
  zipcode. However, this is basically useless in many parts of the
  world.
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;Ireland doesn't even have postal codes&lt;/b&gt;. Few countries have
  postal codes databases with geo location available that you can rely
  on. Asking for the postal code is the exception, rather than the
  norm. GPS systems are configured to work with street name and
  number. It's not optimal, true, but that's how it is. And in a web
  app if you're interested in the user's city to get a search radius,
  then ask for the user's city.
&lt;/p&gt;

&lt;p&gt;
  I would go even further - I would simply NOT show a postal code
  field outside the US, even if optional, unless delivery of packages
  by mail is involved and the country's postal office is known to
  delay packages without one provided. Because many users are simply
  going to feel compelled to answer it and that's just bad user
  experience.
&lt;/p&gt;


</content>
 </entry>
 
 
 
 <entry>
   <title>Android Learning Resources</title>
   <link href="http://bionicspirit.com/blog/2011/12/12/android-learning-resources.html"/>
   <updated>2011-12-12T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2011/12/12/android-learning-resources</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="android" label="android" />
   
   <category scheme="http://bionicspirit.com/tag/" term="beginner" label="beginner" />
   
   <category scheme="http://bionicspirit.com/tag/" term="resources" label="resources" />
   

   <content type="html">&lt;p&gt;Starting out learning Android development may be intimidating at
first, as with any new platform of reasonable complexity you'll have
a lot to learn. However the learning process is fun. So here are
some learning resources that I'm currently following.&lt;/p&gt;

&lt;!-- more --&gt;


&lt;p&gt;DISCLAIMER: the Amazon links in this article contain my affiliate code
and I get a commission should you choose to buy from Amazon in the
next 24 hours. However I'm including these links primarily because of
the awesome reviews included, but you should buy straight from the
publisher (publisher links also included, without an affiliate ID).&lt;/p&gt;

&lt;h2&gt;Books for Learning Android&lt;/h2&gt;

&lt;p&gt;My problem with books is that technical books get obsolete really
fast. Books from 2010, while still useful, are already insufficient
now with the release of Ice Cream Sandwich. The upside is that there
are a lot of books out there.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://commonsware.com&quot;&gt;&lt;img class=&quot;right&quot; src=&quot;//assets-2.alexn.org/assets/photos/books-commonsware.png&quot; title=&quot;&quot; &gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For ~ $40 you can buy a 1-year subscription for
&lt;a href=&quot;http://commonsware.com&quot;&gt;CommonsWare.com&lt;/a&gt;. The author, Mark Murphy, is
a very proficient Android developer, trainer and consultant, with a
huge
&lt;a href=&quot;http://stackoverflow.com/users/115145/commonsware&quot;&gt;StackOverflow reputation&lt;/a&gt;
:) More seriously - for $40 you get 3 books that are continuously
updated, which is great.&lt;/p&gt;

&lt;p&gt;Here are the books (but don't buy them from Amazon, as you won't get
the 1-year subscription, which is the main reason I'm recommending
these):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.amazon.com/gp/product/0981678009/ref=as_li_ss_tl?ie=UTF8&amp;tag=bionicspirit-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0981678009&quot;&gt;The Busy Coder's Guide to Android Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.amazon.com/gp/product/098167805X/ref=as_li_ss_tl?ie=UTF8&amp;tag=bionicspirit-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=098167805X&quot;&gt;The Busy Coder's Guide to Advanced Android Development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.amazon.com/gp/product/0981678041/ref=as_li_ss_tl?ie=UTF8&amp;tag=bionicspirit-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0981678041&quot;&gt;Android Programming Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/gp/product/1934356565/ref=as_li_ss_tl?ie=UTF8&amp;amp;tag=bionicspirit-20&amp;amp;linkCode=as2&amp;amp;camp=1789&amp;amp;creative=390957&amp;amp;creativeASIN=1934356565&quot;&gt;&lt;img class=&quot;right&quot; src=&quot;//assets-2.alexn.org/assets/photos/prag_hello_android.jpg&quot; width=&quot;150&quot; title=&quot;Hello Android (3rd edition)&quot; &gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, don't buy these items from Amazon. Buy them with the 1-year
subscription from the &lt;a href=&quot;http://commonsware.com&quot;&gt;Author's Website&lt;/a&gt; (I
did so myself and btw, I have no affiliation with the author). The
subscription is useful because you'll get upgrades for new versions of
Android and bug-fixes, for a whole year.&lt;/p&gt;

&lt;p&gt;Another book I've been reading is
&lt;a rel=&quot;nofollow&quot; href=&quot;http://www.amazon.com/gp/product/1934356565/ref=as_li_ss_tl?ie=UTF8&amp;tag=bionicspirit-20&amp;linkCode=as2&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1934356565&quot;&gt;Hello Android&lt;/a&gt;
by &lt;a href=&quot;http://www.zdnet.com/blog/burnette&quot;&gt;Ed Burnette&lt;/a&gt;, published by the
&lt;a href=&quot;http://pragprog.com/book/eband3/hello-android&quot;&gt;Pragmatic Programmers&lt;/a&gt;.
It's pretty good, but it is more of an introduction (truly a Hello
World).&lt;/p&gt;

&lt;p&gt;Other books I have not tried, so my list stops here, but updates will
follow.&lt;/p&gt;

&lt;h2&gt;Free Stuff Available Online&lt;/h2&gt;

&lt;p&gt;I'm the kind of developer that prefers to rely on freely available
stuff, because I learn by doing and technical books on APIs are
boring. Plus, I like free stuff, however if you plan on getting
serious about it, then a small investment is worth it and will keep
you focused (nothing will keep you more focused than spending some
money).&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/resources/browser.html?tag=tutorial&quot;&gt;Tutorials, by Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/resources/browser.html?tag=article&quot;&gt;Articles, by Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The official beginner tutorials are not so comprehensive, however
you'll get a lot of value from reading the Articles. Lots of value
in there, which works best if used in conjunction with the samples
provided:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/resources/browser.html?tag=sample&quot;&gt;Samples, by Android Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;Seriously, you won't find a faster learning path than reading and
understanding the source-code of real apps. However to not attempt
doing this without going through some of the tutorials in the link
above.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/videos/index.html#v=twmuBbC_oB8&quot;&gt;Videos from Google I/O&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://developer.android.com/guide/developing/index.html&quot;&gt;The Official Dev Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;The videos from Google I/O are a gold mine, providing insight you
won't find anywhere else. Highly recommended. All in all, the
official documentation is good, although lacking beginner
friendliness and a structured clear path. Plus I noticed it has
holes in it, but you'll be fine.&lt;/p&gt;

&lt;p&gt;For asking questions, or browse around for insightful gems, there's
nothing better than:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://stackoverflow.com/questions/tagged/android&quot;&gt;The Android tag on StackOverflow.com&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;At the time of this writing, I don't have many Android-related
blogs to share with you and the ones I know about are of poor
quality - apparently not many people blog about their Android
experience. Hopefully this will change for the better.&lt;/p&gt;

&lt;p&gt;Please help me out in identifying other resources! Thanks!&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Why IntelliJ IDEA is Better for Android Development</title>
   <link href="http://bionicspirit.com/blog/2011/12/02/why-intellij-idea-is-better-for-android-development.html"/>
   <updated>2011-12-02T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2011/12/02/why-intellij-idea-is-better-for-android-development</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="opinion" label="opinion" />
   
   <category scheme="http://bionicspirit.com/tag/" term="android" label="android" />
   

   <content type="html">&lt;p&gt;
  The default IDE, as enforced by Google's Android SDK, is
  Eclipse. Overall Eclipse is a good IDE, however my experience with
  it and the Android plugin has been less than stellar and I simply
  cannot stand it. Which is why I switched to &lt;a
  target=&quot;_blank&quot; href=&quot;http://www.jetbrains.com/idea/free_java_ide.html&quot;&gt;IntelliJ
  IDEA, the Community Edition&lt;/a&gt;.
&lt;/p&gt;

&lt;img src=&quot;//assets-1.alexn.org/assets/images/intellij.png&quot; width=&quot;750&quot; height=&quot;622&quot; /&gt;

&lt;p&gt;
  Normally I work within Emacs, for everything I do. However with Java
  things get more complicated and especially when you're talking about
  Android development. That's because the API is quite complex and in
  this instance I feel the need for intellisense to help me out (I'm a
  rookie). It's nice to see the available methods over an object, it's
  also nice to have the IDE automatically write the boilerplate of the
  interface methods you have to implement. I also feel the need for
  easy testing on my phone or in the emulator - pressing a play button
  to make everything start is surely nice.
&lt;/p&gt;

&lt;h3&gt;Eclipse Is More Sluggish than IntelliJ IDEA&lt;/h3&gt;

&lt;p&gt;
  I don't know how other people use Eclipse or their experience on the
  matter, however on my Ubuntu-powered laptop Eclipse is basically
  unusable. Auto-completion of anything can take a couple of seconds
  to work, the IDE regularly freezes for seconds for no discernible
  reason.
&lt;/p&gt;

&lt;p&gt;
  I made sure GCJ is not installed on my system, only the official Sun
  JDK (not even OpenJDK). I edited eclipse.ini, increasing the size of
  -Xms and -Xmx as recommended. However nothing seemed to
  work. Eclipse is still unusable for me - and asking other devs about
  it, they have had the same experience too, telling me that I'll
  eventually get used to it. Seriously?
&lt;/p&gt;

&lt;p&gt;
  Maybe I've been spoiled by my experience with using a light-weight
  editor like Emacs.
&lt;/p&gt;

&lt;h3&gt;IntelliJ IDEA is More Command-line Friendly&lt;/h3&gt;

&lt;p&gt;
  I like the command-line, I like it a lot. However the Android
  project created by Eclipse is not prepared for command-line
  building, signing or deployment to the emulator or a device.
&lt;/p&gt;

&lt;p&gt;
  You can fix this by modifying the project to include the required
  Ant build file, simply by doing something like this, which creates
  the required Ant build files (like &lt;i&gt;build.xml&lt;/i&gt;):
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;android update project -p .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  There's also one caveat with this - if you have your own JARs added
  to the project, they have to be in a (flat) directory called
  &lt;i&gt;./libs&lt;/i&gt;. However, Eclipse does not make that mandatory. In
  fact Eclipse does not even create a libs directory for you, since
  Eclipse relies on its own rules for building the project.
&lt;/p&gt;

&lt;p&gt;
  With IntelliJ IDEA the above are non-issues. IDEA creates the
  required build files for you. Not only that, but it relies on those
  build files for building the project. So if you have custom build
  rules, IntelliJ IDEA will use them without you having to go through
  pain to set everything up correctly.
&lt;/p&gt;

&lt;p&gt;
  I realize that Eclipse can be configured here to use your build.xml
  file, but what's the point of an IDE if it stays in your way?
&lt;/p&gt;

&lt;h3&gt;IntelliJ IDEA is Smarter&lt;/h3&gt;

&lt;p&gt;
  This is hard to explain because Eclipse is a reasonably good IDE in
  every sense when it comes to &lt;i&gt;smartness&lt;/i&gt;, like intellisense and
  refactoring.
&lt;/p&gt;

&lt;p&gt;
  However the difference is in the details and IntelliJ IDEA is a lot
  smarter.
&lt;/p&gt;

&lt;p&gt;
  For instance, in both IDE typing &quot;new Date&quot; and hitting ALT-Space
  will auto-import a Date class. However IntelliJ IDEA imports
  &quot;java.util.Date&quot;, while Eclipse imports &quot;java.sql.Date&quot;. A stupid
  detail like this interrupts my flow - if you can't make a reasonable
  guess, then it's better if this feature wasn't available at
  all. Reasonable defaults man, it's all about reasonable defaults ;-)
&lt;/p&gt;

&lt;h3&gt;One caveat: No Interface Builder In IntelliJ IDEA&lt;/h3&gt;

&lt;p&gt;
  This is one big problem with IntelliJ IDEA. However my experience
  with Eclipse's built-in WYSIWYG interface editor has been pretty
  bad. It is not designed for refactoring interfaces - when you're
  doing changes to an already built interface, you'll drop to XML a
  lot. 
&lt;/p&gt;

&lt;p&gt;
  I wish Android had a kickass interface builder, however after
  working all of these years with raw HTML and CSS, I don't feel it's
  that much of an issue. Editing XML manually is OK for simple
  interfaces and IDEA gives you code completion specific to the
  res/android format, doing more than a smart XML editor
  can. Complicated interfaces will have custom widgets that get added
  dynamically, so the interface builder will be useless anyway.
&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Earning Money as an Amazon Affiliate</title>
   <link href="http://bionicspirit.com/blog/2011/11/29/earning-money-as-an-amazon-affiliate.html"/>
   <updated>2011-11-29T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2011/11/29/earning-money-as-an-amazon-affiliate</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="entrepreneurship" label="entrepreneurship" />
   
   <category scheme="http://bionicspirit.com/tag/" term="opinion" label="opinion" />
   

   <content type="html">&lt;p&gt;
  I published an article that I've meant to publish for a long
  time. I'm usually lazy to not bother writing many articles, however
  this time I also thought about doing an experiment - you see I'm (1)
  on a tight budget and (2) a cheap bastard - so what if I could get
  enough money to pay for my monthly hosting on Linode, while
  satisfying my urge to write from time to time? 
&lt;/p&gt;

&lt;p&gt;
  As such I included Amazon Affiliate links in that post to see what
  happens.
&lt;/p&gt;

&lt;h2&gt;UPDATE: Moral Considerations Against Amazon's Associates&lt;/h2&gt;

&lt;p&gt;
  The discussion on &lt;a
  href=&quot;http://news.ycombinator.com/item?id=3291167&quot;
  target=&quot;_blank&quot;&gt;Hacker News&lt;/a&gt; took an interesting turn. A couple
  of comments are a little unbalanced, however there's &lt;a
  href=&quot;http://news.ycombinator.com/item?id=3292508&quot; target=&quot;_blank&quot;&gt;a
  comment&lt;/a&gt; that I like and with which I am in agreement:
&lt;/p&gt;

&lt;p class=&quot;dialog&quot;&gt;
  &lt;i&gt;
    Having affiliate links creates incentives that may not align with
    faithfully serving your readers. It does not automatically bias your
    writing, but it can certainly create the appearance of bias.
  &lt;/i&gt;
  &lt;br /&gt; &lt;br /&gt;
  &lt;i&gt;
    A concrete example would be writing an especially glowing review
    of the new Kindle because you have a vested stake in people buying
    them. Or, perhaps, NOT writing a glowing review because you fear
    it will be perceived as shilling for affiliate cash.
  &lt;/i&gt;
  &lt;br /&gt; &lt;br /&gt;
  &lt;i&gt;
    In fact On The Media recently did a story about the Washington
    Post struggling with whether or not to include Amazon affiliate
    links in its book reviews. I think it presents both sides of the
    argument: &lt;a
    href=&quot;http://www.onthemedia.org/2011/nov/11/web-links-money-makers/transcript/&quot;
    target=&quot;_blank&quot;&gt;www.onthemedia.org/2011/nov/11/web-links...&lt;/a&gt;
  &lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
  This comment is striking, as when I started fantasizing about where
  should I go from here, the one thing that crossed my mind was that I
  could write a review for the Kindle (I own one) - and oops, 
  unfortunately in that instance my actual oppinion would have been
  &lt;i&gt;unfaithful&lt;/i&gt; - &lt;a href=&quot;http://www.elidickinson.com/&quot;
  target='_blank'&gt;@esd&lt;/a&gt; nailed it.
&lt;/p&gt;

&lt;p&gt;
  Also, &lt;a href=&quot;http://news.ycombinator.com/item?id=3292777&quot;&gt;a
  reply&lt;/a&gt; puts the above in balance:
&lt;/p&gt;

&lt;p class=&quot;dialog&quot;&gt;
  &lt;i&gt;
    Newspapers likely disallow such practices in order to maintain
    journalistic integrity, but a blog author who is writing posts on
    purpose to sell things is probably not interested in maintaining
    journalistic integrity. The blog author is just interested in
    selling stuff. Maybe the blog posts are well-written and
    interesting, or maybe they are not. If they are not, then readers
    who care principally about content will likely avoid the blog on the
    lack of merit of the content itself.
  &lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
  (the quality of Hacker News still amazes me)
&lt;/p&gt;

&lt;p&gt;
  In my oppinion, putting affiliate links is not bad or evil per se -
  for instance you could say that customers of Apple or Google have an
  inherent bias because they feel the need to protect their monetary
  and/or emotional investment. And we aren't professional journalists,
  trained to watch out for such things - but a mistake is a
  mistake. So from now on, no more Amazon-related reviews coming from
  me (maybe I'll try clearly delimited boxes or something).
&lt;/p&gt;

&lt;h2&gt;Some Facts and Stats&lt;/h2&gt;

&lt;p&gt;
  The article I'm talking about:
&lt;/p&gt;

&lt;p&gt;
  &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&quot;/blog/2011/11/25/4-books-for-learning-to-design-the-hard-way.html&quot;&gt;4 Books for Learning to Design, the Hard Way&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  I published this article on the 25th, &lt;i&gt;The Black Friday&lt;/i&gt; - so
  it had perfect timing. Then I pushed this link to Hacker News and
  Reddit. I hope you will forgive me, since this was a little
  self-promotion and I don't deny it, however I hope you found the
  content therein to be worth it, as it was published with my best
  intentions.
&lt;/p&gt;

&lt;p&gt;
  The resulting traffic and the fee that Amazon gives for the orders
  generated took me by surprise. Here's how my traffic looks like
  (unique visitors):
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nov 24: 45&lt;/li&gt;
  &lt;li&gt;Nov 25: 10,263&lt;/li&gt;
  &lt;li&gt;Nov 26: 6,939&lt;/li&gt;
  &lt;li&gt;Nov 27: 1,713&lt;/li&gt;
  &lt;li&gt;Nov 28: 1,299&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Wow. I never generated this much traffic with my blog. Also, here's
  the Amazon stats (updated for Nov 28th):
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ordered items: 333&lt;/li&gt;
  &lt;li&gt;Clicks: 6,259&lt;/li&gt;
  &lt;li&gt;Conversion: 5.32%&lt;/li&gt;
  &lt;li&gt;Total items shipped: 294&lt;/li&gt;
  &lt;li&gt;Total earnings: $367.10&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  So considering that not all items have been shipped and this ain't
  over yet (I'm still getting traffic), we're looking at:
&lt;/p&gt;

&lt;p class=&quot;dialog&quot;&gt;
  a half-an-hour effort for a single article, earning &lt;b&gt;$400&lt;/b&gt;, in
  4 days, on a very low-traffic personal blog
&lt;/p&gt;

&lt;p&gt;
  My goal was achieved too - I now have enough money for ~20 months of
  hosting on Linode. Thank you dear readers, I am in your debt.
&lt;/p&gt;

&lt;h2&gt;Amazon Associates versus Google AdSense&lt;/h2&gt;

&lt;p&gt;
  &lt;i&gt;Google AdSense&lt;/i&gt; rewards are &lt;i&gt;per-click&lt;/i&gt; and is the first
  option of many webmasters, because it does generate more
  money. However I feel that the overall user experience suffers a lot
  - the links served may be context-dependent, but the quality is poor.
&lt;/p&gt;

&lt;p&gt;
  &lt;i&gt;Amazon Associates&lt;/i&gt; rewards are instead &lt;i&gt;per-action&lt;/i&gt;. When
  the user buys something, you get a referral fee. This can work very
  well because the items displayed are hand-picked by you and the
  links add value to your content - whenever I search for reviews of
  individuals (which I trust more than those of experts), my first
  stop is on Amazon.
&lt;/p&gt;

&lt;h2&gt;Why A Single Flower Doesn't Bring Spring&lt;/h2&gt;

&lt;p&gt;
  So whenever anybody does this successfully, the appetite only grows
  bigger. After all, this kind of revenue has the potential of being
  passive. However don't get your hopes up:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    in this instance, the timing was perfect and so the circumstances
    can't be reproduced every month
  &lt;/li&gt;
  &lt;li&gt;
    to have constant conversions you need a big and loyal following
    that trusts your recommendations
  &lt;/li&gt;
  &lt;li&gt;
    to have a big and loyal following, you also need lots of traffic
    driven by search engines 
  &lt;/li&gt;
  &lt;li&gt;
    to score well in search engines, you need lots of articles with
    lots of keywords and good ranking
  &lt;/li&gt;
  &lt;li&gt;
    to have loyal readers and a good ranking on Google, those articles
    must be high-quality
  &lt;/li&gt;
  &lt;li&gt;
    it takes lots and lots of work for the above, probably 1 or 2
    years, considering you have the talent of writing content already,
    or the money to hire people to do it
  &lt;/li&gt;
  &lt;li&gt;
    if you can't recommend anything else other than books, then you're
    screwed, as you don't have the time to read so many
  &lt;/li&gt;
  &lt;li&gt;
    if the products getting recommended are not relevant to your
    audience, then they won't convert
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  So there you have it. My experiment with Amazon's Associates, while
  probably a short one, has brought joy in my heart :)
&lt;/p&gt;

&lt;p&gt;
  Thank you,
&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>4 Books For Learning to Design, The Hard Way</title>
   <link href="http://bionicspirit.com/blog/2011/11/25/4-books-for-learning-to-design-the-hard-way.html"/>
   <updated>2011-11-25T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2011/11/25/4-books-for-learning-to-design-the-hard-way</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="opinion" label="opinion" />
   
   <category scheme="http://bionicspirit.com/tag/" term="design" label="design" />
   
   <category scheme="http://bionicspirit.com/tag/" term="ux" label="ux" />
   

   <content type="html">&lt;p&gt;
  This is the path I'm taking to &lt;i&gt;not suck&lt;/i&gt; at design anymore, as
  frankly, I'm getting tired of sucking. I've read the first 3 books
  here and I'm having progress on the last one. I highly recommend all
  4.
&lt;/p&gt;

&lt;p&gt;
  (&lt;b&gt;UPDATE - DISCLAIMER:&lt;/b&gt; this article contains Amazon affiliate links, as part of
  an experiment which I'm &lt;a href=&quot;/blog/2011/11/29/earning-money-as-an-amazon-affiliate.html&quot;&gt;describing
  here&lt;/a&gt;, however the article expresses my genuine view)
&lt;/p&gt;

&lt;h2&gt;The Design of Everyday Things (&lt;a href=&quot;http://www.amazon.com/gp/product/0465067107/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0465067107&quot; target=&quot;_blank&quot; title=&quot;The Design of Everyday Things&quot;&gt;link&lt;/a&gt;)&lt;/h2&gt;

&lt;a href=&quot;http://www.amazon.com/gp/product/0465067107/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0465067107&quot; style=&quot;display: block; float: right; margin-left: 20px; margin-bottom: 10px;&quot; title=&quot;The Design of Everyday Things&quot; target=&quot;_blank&quot;&gt;
  &lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=0465067107&amp;MarketPlace=US&amp;ID=AsinImage&amp;WS=1&amp;tag=alexanedel-20&amp;ServiceVersion=20070822&quot; &gt;
&lt;/a&gt;

&lt;p&gt;
  It explains the design of common household objects that you may use
  daily and it is one of the best books you can read on user
  experience.
&lt;/p&gt;

&lt;p&gt;
  To me this was an eye opener that completely changed the way I think
  about interfaces. It explains how people interact with the objects
  around them and how they learn. It explains the importance of a
  user's mental model of how your product works. It gives you a good
  feeling on what it means and why it matters to &lt;i&gt;design for
  errors&lt;/i&gt;. It helps you to prevent a lot of design errors that a
  lot of products have.
&lt;/p&gt;

&lt;p style=&quot;clear:both;&quot;&gt;
  The book itself was written in 1990, so it does have here and there
  some references to products that are outdated, but the analysis
  itself will never be outdated or obsolete. Quite the contrary - it's
  fascinating how user centric design guidlines &lt;i&gt;stay the same&lt;/i&gt;,
  even though there are a lot of people out there that repeat the same
  mistakes over and over again.
&lt;/p&gt;

&lt;p&gt;
  When it comes to software, a complement article on the subject is &lt;a
  href=&quot;http://www.joelonsoftware.com/uibook/fog0000000249.html&quot;
  target=&quot;_blank&quot;&gt;User Interface Design For Programmers&lt;/a&gt;, by Joel
  Spolsky.
&lt;/p&gt;

&lt;h2&gt;Non-Designer's Design Book (&lt;a href=&quot;http://www.amazon.com/gp/product/0321534042/ref=as_li_ss_il?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0321534042&quot; target=&quot;_blank&quot; title=&quot;Non-Designer's Design Book&quot;&gt;link&lt;/a&gt;)&lt;/h2&gt;

&lt;a href=&quot;http://www.amazon.com/gp/product/0321534042/ref=as_li_ss_il?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0321534042&quot;  style=&quot;display: block; float: right; margin-left: 20px; margin-bottom: 10px;&quot; title=&quot;Non-Designer's Design Book&quot; target=&quot;_blank&quot;&gt;
  &lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=0321534042&amp;MarketPlace=US&amp;ID=AsinImage&amp;WS=1&amp;tag=alexanedel-20&amp;ServiceVersion=20070822&quot; &gt;
&lt;/a&gt;

&lt;p&gt;
  Robin Williams does an excelent job introducing you to the basic
  concepts of designing visuals, with clearly explained principles and
  techniques.
&lt;/p&gt;

&lt;p&gt;
  It's pretty hard for us developers to design anything pleasing to
  the eye. And that's not the only problem you're facing - the visuals
  of a site have to give hints to the user about their next actions,
  so you've got many constraints to worry about. Sometimes you get
  lucky by just copying and combining other designs you
  like. Sometimes you have a good idea about what you want, but one
  day you like the result, then the next it looks like an abomination.
&lt;/p&gt;

&lt;p&gt;
  The book goes into some detail about how designers think. It has
  plenty of visual examples, it gives you many examples of what &lt;i&gt;not
  to do&lt;/i&gt;, it explains how to work around those problems, it is
  concise and doesn't bore you to tears - while not that useful for
  someone with design experience, for a developer that sucks at this
  game, this is a really, really good design manual.
&lt;/p&gt;

&lt;h2&gt;Color: A Course in Mastering the Art of Mixing Colors (&lt;a href=&quot;http://www.amazon.com/gp/product/1585422193/ref=as_li_ss_il?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=1585422193&quot; target=&quot;_blank&quot; title=&quot;Color: A Course in Mastering the Art of Mixing Colors&quot;&gt;link&lt;/a&gt;)&lt;/h2&gt;

&lt;a href=&quot;http://www.amazon.com/gp/product/1585422193/ref=as_li_ss_il?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=1585422193&quot; target=&quot;_blank&quot; title=&quot;Color: A Course in Mastering the Art of Mixing Colors&quot; style=&quot;display: block; float: right; margin-left: 20px; margin-bottom: 10px;&quot;&gt;
  &lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=1585422193&amp;MarketPlace=US&amp;ID=AsinImage&amp;WS=1&amp;tag=alexanedel-20&amp;ServiceVersion=20070822&quot; &gt;
&lt;/a&gt;

&lt;p&gt;
  One of the most surprisingly difficult problems when creating
  designs is picking the colors palette. This is so goddamn difficult
  sometimes. We do know that certain color combinations work better
  than others, but how do you pick them? How can you achieve
  &lt;i&gt;harmony&lt;/i&gt; as to not make your users' eyes bleed?

  And not only that, but you also want to emphasise certain portions
  of your pages in a way to attract attention - did you know that
  according to statistics, &lt;i&gt;more car accidents involve red cars than
  any other color?&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
  There are web services out there, like &lt;a
  href=&quot;http://kuler.adobe.com/&quot; target=&quot;_blank&quot;&gt;Adobe Kuler&lt;/a&gt; or &lt;a
  href=&quot;http://www.colourlovers.com/&quot;
  target=&quot;_blank&quot;&gt;COLOURlovers.com&lt;/a&gt; which allow you to choose color
  palettes created by other people - the PROBLEM being that you'll
  never know what makes a palette work and so you'll make good changes
  to it only by luck or with expensive A/B testing.
&lt;/p&gt;

&lt;p&gt;
  This book by Betty Edwards is not your only choice for learning
  Color Theory. It isn't even related to web design in any way, having
  a whole section on mixing oil paint. 
&lt;/p&gt;

&lt;p&gt;
  However, I believe that color theory can only be learned from people
  that have real experience in mixing colors. For this reason,
  articles or books about color theory that aren't written by painters
  are quite shallow - and the theory in this book transcends the tools
  used.
&lt;/p&gt;

&lt;p&gt;
  It explains notions on color harmony, on the importance of contrast
  and gives you valuable insight and advices on how to mix and match
  colors. It's a fun read too, because of the quotes from faimous
  people contained - however, it's not a light read because you do
  have to execute the exercises within for best results. But I think
  it is worth it.
&lt;/p&gt;

&lt;p&gt;
  (I'm now my wife's advisor on colors, although our bedroom ended up
  looking awful, but there's no substitute for experience earned by
  making mistakes and at least I know where I went wrong ;))
&lt;/p&gt;

&lt;h2&gt;Drawing on the Right Side of the Brain (&lt;a href=&quot;http://www.amazon.com/gp/product/0874774195/ref=as_li_ss_il?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0874774195&quot;  target=&quot;_blank&quot; title=&quot;The New Drawing on the Right Side of the Brain&quot;&gt;link&lt;/a&gt;)&lt;/h2&gt;

&lt;a href=&quot;http://www.amazon.com/gp/product/0874774195/ref=as_li_ss_il?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0874774195&quot;  target=&quot;_blank&quot; title=&quot;The New Drawing on the Right Side of the Brain&quot; style=&quot;display: block; float: right; margin-left: 20px; margin-bottom: 10px;&quot;&gt;
  &lt;img border=&quot;0&quot; src=&quot;http://ws.assoc-amazon.com/widgets/q?_encoding=UTF8&amp;Format=_SL160_&amp;ASIN=0874774195&amp;MarketPlace=US&amp;ID=AsinImage&amp;WS=1&amp;tag=alexanedel-20&amp;ServiceVersion=20070822&quot; &gt;
&lt;/a&gt;

&lt;p&gt;
  I've picked up drawing as my hobby. I'm only a beginner, but it's
  a fun hobby to have - it's impressive, silent and inexpensive. It also
  boosts your creativity like nothing else, as the only real limit you
  have is your imagination (much like software development ;))
&lt;/p&gt;

&lt;p&gt;
  Ever tried drawing anything lately? You should. The results will be
  awful. But do you know why? It's not your hand, it's not from a lack
  of talent, it's your eyes that are deceiving you - &lt;i&gt;in order to
  learn how to draw, you have to relearn how to see&lt;/i&gt;. That's
  because everything you see is right now filtered and transformed by
  your brain - as a cheap/fast exercise, look in a mirror at an arm's
  length and take a guess if your mirrored head is of the same size as
  your actual head (then use your hands to measure). The picture
  you're getting through your mind's eye is deceiving and for drawing
  skill and creativity to emerge you have to silence your brain.
&lt;/p&gt;

&lt;p&gt;
  This book of Betty Edwards has an awesome technique that works for
  everybody. Or so she says, but as far as I'm concerned I'm
  progressing in leaps and bounds and can already do drawings that I
  couldn't hope of doing before starting to read this book ... I also
  promise to publish some drawings, but only after I'll get decent
  (only started to do this 2 months ago, a frog doesn't transform into
  a prince overnight you know).
&lt;/p&gt;

&lt;p&gt;
  How does drawing help you in web design? Well, do you really have to
  ask?
&lt;/p&gt;

&lt;h2&gt;Update: Suggestions Received from Readers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/0201362988/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0201362988&quot;&gt;The Design of Design&lt;/a&gt;, by Frederick P. Brooks&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/1592537413/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399373&amp;creativeASIN=1592537413&quot;&gt;Visual Language for Designers&lt;/a&gt;, by Connie Malamed&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/0300115954/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0300115954&quot;&gt;Interaction of Color&lt;/a&gt;, by Josef Albers (&lt;a href=&quot;http://www.handprint.com/HP/WCL/book3.html#albers&quot; target=&quot;_blank&quot;&gt;review&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/0891343377/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0891343377&quot;&gt;Keys to Drawing&lt;/a&gt;, by Bert Dodson&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/1119998956/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399373&amp;creativeASIN=1119998956&quot;&gt;Design for Hackers&lt;/a&gt;, by David Kadavy&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/0442240392/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0442240392&quot;&gt;Design and Form&lt;/a&gt;, by Johannes Itten&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/041238390X/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399373&amp;creativeASIN=041238390X&quot;&gt;Elements of Color&lt;/a&gt;, by Johannes Itten&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/0471285528/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0471285528&quot;&gt;Principles of Form and Design&lt;/a&gt;, by Wucius Wong&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/0898150523/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0898150523&quot;&gt;Thinking with a Pencil&lt;/a&gt;, by Henning Nelms&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/0262691914/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0262691914&quot;&gt;The Sciences of the Artificial&lt;/a&gt;, by Herbert A. Simon&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/3764384840/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=3764384840&quot;&gt;Designerly Ways of Knowing&lt;/a&gt;, by Nigel Cross&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/0133033899/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0133033899&quot;&gt;Designing Visual Interfaces&lt;/a&gt;, by Kevin Mullet and Darrell Sano&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/1568984650/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=1568984650&quot;&gt;Grid Systems: Principles of Organizing Type&lt;/a&gt;, by Kimberly Elam (&lt;a href=&quot;http://filtercake.tumblr.com/post/7999571798/design-is-not-decoration&quot; target=&quot;_blank&quot;&gt;presentation&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://www.amazon.com/gp/product/0262062666/ref=as_li_ss_tl?ie=UTF8&amp;tag=alexanedel-20&amp;linkCode=as2&amp;camp=217145&amp;creative=399369&amp;creativeASIN=0262062666&quot;&gt;101 Things I Learned in Architecture School&lt;/a&gt;, by Matthew Frederick&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Thanks people, wow, I know have my hands full :) ... keep `em coming!
&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>How I Use Flickr: For Backup</title>
   <link href="http://bionicspirit.com/blog/2011/10/29/how-i-use-flickr.html"/>
   <updated>2011-10-29T00:00:00+03:00</updated>
   <id>http://bionicspirit.com/blog/2011/10/29/how-i-use-flickr</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="opinion" label="opinion" />
   
   <category scheme="http://bionicspirit.com/tag/" term="api" label="api" />
   

   <content type="html">&lt;p&gt;
  I've got a growing number of personal pictures and the collection is
  growing since 2003, when I got my first digital camera, a shitty
  Sanyo that still works and that I still use whenever I forget about
  my Nikon.
&lt;/p&gt;

&lt;p&gt;
  But here's the thing with digital pictures - &lt;i&gt;&lt;b&gt;they are cheap to
  make, but also easy to lose&lt;/b&gt;&lt;/i&gt;. Digital storage is not as
  reliable as glossy paper. Pictures printed on paper can easily last
  for a 100 years. That's not the case with any digital storage medium
  and we will suffer for it.
&lt;/p&gt;

&lt;h2&gt;Storing My Pictures In The Cloud&lt;/h2&gt;

&lt;p&gt;
  Pro accounts on Flickr have unlimited storage and can upload and
  access full-resolution pictures. This is great, although be careful
  about believing in &quot;unlimited plans&quot;, as nothing is really unlimited
  and by abusing Flickr you may find yourself locked out of your
  account.
&lt;/p&gt;

&lt;p&gt;
  Unfortunately the tools for uploading really suck and I haven't
  encountered yet a graphical interface that did what I needed. So for
  synchronizing, I've built my own script in Ruby using the excelent
  &lt;a href=&quot;http://hanklords.github.com/flickraw/&quot;&gt;Flickraw gem&lt;/a&gt; and
  &lt;a href=&quot;http://exifr.rubyforge.org/&quot;&gt;exifr&lt;/a&gt;, another Ruby gem
  that reads Exif headers from Jpeg files.
&lt;/p&gt;

&lt;p&gt;
  One common problem is that you ALWAYS have duplicates. And you don't
  want to upload duplicates. What you really want is an &quot;&lt;i&gt;rsync&lt;/i&gt;&quot;
  command for Flickr. But how do you know if a picture was already
  uploaded?
&lt;/p&gt;

&lt;p&gt;
  The approach I'm using is to add a &lt;a
  href=&quot;http://www.flickr.com/groups/api/discuss/72157594497877875/&quot;
  target=&quot;_blank&quot;&gt;machine tag&lt;/a&gt; to my pictures, which is set like a
  tag, but has the format &quot;namespace:key=value&quot;. This machine tag
  represents the MD5 hash of the picture and if you want to see if a
  certain photo was already uploaded to flickr, you can always &lt;a
  href=&quot;http://www.flickr.com/services/api/flickr.photos.search.html&quot;
  target=&quot;_blank&quot;&gt;search for it&lt;/a&gt;. Here's how it looks on one of my
  pictures:
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;checksum:md5&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5b2fa91c38a7f878088e1420b924e6d9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  Besides this, I have this problem with some of the older photos
  taken by my Sanyo, where the taken-date is totally fucked and for
  personal photos the taken date is maybe more important than the
  actual photo quality. I use the excelent &lt;a
  href=&quot;http://www.sno.phy.queensu.ca/~phil/exiftool/&quot;&gt;ExifTool&lt;/a&gt; to
  correct those photos. It's nice building on the hard work of other
  people ;)
&lt;/p&gt;

&lt;p&gt;
  So, currently I have 3545 pictures uploaded on Flickr in full
  resolution and the number will more than triple as soon as I make an
  inventory of my pictures stored on old hardware I've got lying
  around.
&lt;/p&gt;

&lt;p&gt;
  It is fun being a developer. I can make shit happen.
&lt;/p&gt;

&lt;h2&gt;Flickr is Not A Reliable Backup&lt;/h2&gt;

&lt;p&gt;
  Flickr is an online service that isn't meant for being a backup. I
  share only a fraction of what I upload, everything else is &lt;i&gt;family
  only&lt;/i&gt;. They may terminate your account at any time for whatever
  reason. They may also go out of business. Yahoo may sell it, etc,
  etc... I do think Flickr is awesome btw and one reason that I store
  my photos on Flickr is to be able to always have the whole archive
  with me. But for backup alone, that's not enough.
&lt;/p&gt;

&lt;p&gt;
  What you really need to do is:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    your main repository should be stored locally and properly
    maintained - I do that on my main computer currently, but multi-TB
    external hard-drives are cheap
  &lt;/li&gt;
  &lt;li&gt;
    in case of cloud backup, you always need a secondary service for
    redundancy
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  Google's Picasa is a good option because you can explicitly buy
  storage. This means that if you pay for 80 GB of storage nobody is
  going to get upset that you uploaded 80 GB of private photos
  ... also, if your photo collection matters to you, I wouldn't put my
  trust in their Google+ offering (photos of up to 2048x2048 pixels do
  not count towards your free quota). That's because that offer is not
  meant for you. Just pay up.
&lt;/p&gt;

&lt;p&gt;
  So on Google's Picasa, I'm currently working on integrating with
  their API too. The desktop app is nice, but too limited for me.
&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Testing Different Browsers: It`s a Pain in the Ass</title>
   <link href="http://bionicspirit.com/blog/2011/10/25/testing-different-browsers.html"/>
   <updated>2011-10-25T00:00:00+03:00</updated>
   <id>http://bionicspirit.com/blog/2011/10/25/testing-different-browsers</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="opinion" label="opinion" />
   
   <category scheme="http://bionicspirit.com/tag/" term="javascript" label="javascript" />
   
   <category scheme="http://bionicspirit.com/tag/" term="browser" label="browser" />
   

   <content type="html">&lt;p&gt;
  I got a notice that my &lt;a
  href=&quot;https://github.com/alexandru/crossdomain-requests-js&quot;
  target=&quot;blank_&quot;&gt;crossdomain-requests-js script&lt;/a&gt; (described in
  length &lt;a
  href=&quot;/blog/2011/03/24/cross-domain-requests.html&quot;&gt;here&lt;/a&gt;)
  does not work on IExplorer 9.
&lt;/p&gt;

&lt;p&gt;
  God, how much I hate dealing with browsers. Initially when I wrote
  that script I tested on IExplorer 6 and IExplorer 8. I already had
  to deal with issues regarding the IExplorer 8 compatibility mode. I
  already had taken the decision to completely ignore IExplorer 7, as
  that was a fucked up release. Either way, it is possible that I
  completely wrecked IExplorer support with later changes that I
  failed to retest.
&lt;/p&gt;

&lt;p&gt;
  And all of this for a 233 lines script (including comments and
  whitespace). How fucked up is that?
&lt;/p&gt;

&lt;p&gt;
  This is also why I love JQuery so much. Unfortunately if you want to
  publish a &lt;i&gt;reusable&lt;/i&gt; library it's extremely annoying to bring a
  dependency such as JQuery with it. Even though JQuery is popular,
  the latest release is a whooping 90K in size. Do you know how
  painful that is on mobile browsers? NO, infrastructure code has to
  be done for the lowest common denominator: that's why people still
  do complex shit in C. C is portable and you can link to C from any
  other library.
&lt;/p&gt;

&lt;p&gt;
  Either way, I might do a rewrite in CoffeeScript: at least that's
  going to save me the pain of dealing with syntax differences, as
  I've been having those kinds of problems too ;-)
&lt;/p&gt;

&lt;h2&gt;So what to do?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    prefer CoffeeScript for development, not because it is cool but
    because it is sane
  &lt;/li&gt;
  &lt;li&gt;
    Microsoft was kind enough to release virtual-machine images for
    testing your websites in various IExplorer versions - I'm
    installing them in VirtualBox right now using this script here: &lt;a
    target=&quot;_blank&quot;
    href=&quot;https://github.com/xdissent/ievms&quot;&gt;https://github.com/xdissent/ievms&lt;/a&gt;
    (many thanks to the author, I'll let you know how it goes)
  &lt;/li&gt;
  &lt;li&gt;
    Always test with the 6 biggies: Firefox, Chrome, Opera, IExplorer
    6, IExplorer 8 (watch out for the compatibility mode) and
    IExplorer 9
  &lt;/li&gt;
  &lt;li&gt;
    There are few differences between Chrome and Safari, both being
    based on WebKit and V8 is pretty compatible with Safari's JS
    Engine, so I don't bother with it. But it doesn't hurt if you have
    it around.
  &lt;/li&gt;
  &lt;li&gt;
    Mobile Safari and Android's browser are &lt;i&gt;different&lt;/i&gt; from
    desktop Safari and Chrome. Do not assume that your shit will
    automatically work on mobiles.
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Do me a small favor ...&lt;/h2&gt;

&lt;p&gt;
  Open this page: &lt;a href=&quot;/projects/crossdomain-requests-js/&quot;
  target=&quot;_blank&quot;&gt;http://bionicspirit.com/projects/crossdomain-requests-js/&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
  Then tell me if it works or not in your browser, including the
  browser name and version you are using. You can use the comments
  section below, or in &lt;a href=&quot;http://bit.ly/sA07lI&quot;
  target=&quot;_blank&quot;&gt;this opened issue on GitHub&lt;/a&gt;.  
&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Why I Find Heroku Suboptimal</title>
   <link href="http://bionicspirit.com/blog/2011/10/23/why-i-find-heroku-suboptimal.html"/>
   <updated>2011-10-23T00:00:00+03:00</updated>
   <id>http://bionicspirit.com/blog/2011/10/23/why-i-find-heroku-suboptimal</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="opinion" label="opinion" />
   
   <category scheme="http://bionicspirit.com/tag/" term="servers" label="servers" />
   
   <category scheme="http://bionicspirit.com/tag/" term="heroku" label="heroku" />
   

   <content type="html">&lt;p&gt;
  I love freebies. I often find myself compelled to search for the
  best price / convenience ratio, and from this perspective you cannot
  really argue against something offered for free. And yet, here I am
  bitching and moaning about Heroku.
&lt;/p&gt;

&lt;p&gt;
  Heroku provides a free-quota that's a LOT more reasonable than all
  the shitty PHP hosting offerings out there. And when time comes to
  scale, it lets you scale nicely for a price.
&lt;/p&gt;

&lt;p&gt;
  Normally you develop your app on your localhost (which is like this
  warm and cozy place for all developers, &lt;i&gt;no place like
  127.0.0.1&lt;/i&gt; and all that), but then you want to deploy. You have
  to get out of your comfort zone and face the jungle and it's a true
  jungle out there, filled with shitty / underpowered and expensive
  hosting offerings. If going for a normal VPS, you'll have to
  configure your application server, your database server, your
  webserver that sits on top, maybe a reverse proxy cache, a memcached
  instance or two, a load balancer, a firewall, an email server and it
  goes on and on. And if going for a classic shared-hosting
  environment, then God help you.
&lt;/p&gt;

&lt;p&gt;
  There's a reason children with happy childhoods don't want to grow
  up - the world is an ugly and scary place.
&lt;/p&gt;

&lt;h2&gt;git push heroku master&lt;/h2&gt;

&lt;p&gt;
  Heroku is great. It basically allows you to avoid growing-up. The
  deployment itself couldn't be simpler, and when browsing their web
  interface for available add-ons, I feel like a child in a
  candy-store.
&lt;/p&gt;

&lt;p&gt;
  Basically you start with a free worker, to which you can add other
  &quot;free&quot; services, like a 5MB PostgreSql database and a 5MB Memcached
  instance, allowing you to prototype stuff. They even have plugins
  from third-parties that give you freebies, like a 250MB CouchDB, or
  a 240MB MongoDB. Then as you grow, you start adding more and more
  resources as needed. This has been labeled as &lt;i&gt;platform as a
  service&lt;/i&gt; and it's what the cool kids are talking about these
  days.

  Heck, there are people that are living within that free-quota
  without problems. One such example that I know of is &lt;a
  href=&quot;http://tzigla.com&quot; target=&quot;_blank&quot;&gt;http://tzigla.com&lt;/a&gt;
  ... or it was last time I talked to the authors, both acquaintances
  of mine, and Cristi described how he ended-up doing lots of
  workarounds to get around limitations and he was really excited
  about how everything fell into place.
&lt;/p&gt;

&lt;p&gt;
  But as I was sitting there admiring their determination and skill, I
  started wondering why the hell haven't they rented a normal VPS?
&lt;/p&gt;

&lt;p&gt;
  I mean really, if you end up pulling all kinds of crap to get around
  limitations, wouldn't it be better to just pay up? And if you're
  short on cash or you're the kind of entrepreneur that likes to spend
  frugally, then wouldn't you be better just renting a normal VPS? I
  asked him just that of course, and his reply was basically:
&lt;/p&gt;

&lt;p class=&quot;dialog&quot;&gt;
  &lt;i&gt;I hate to do sys-admin stuff, installing and upgrading packages and all that&lt;/i&gt;
&lt;/p&gt;

&lt;p&gt;
  But it doesn't have to be that way. It's really not that hard. The
  reason for these feelings is the Ubuntu I have had installed on my
  primary laptop for 5 years already. Once you work with Ubuntu or
  your favorite Linux distribution, every day, configuring a
  web-server for starters is something like a half-an-hour chore. Or
  let's say 1 hour, and then it's done. And you don't have to worry
  about it again.
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;And there are disadvantages to Heroku&lt;/b&gt;, lots of them: that's
  because you lose control and end up on top of a platform that's
  designed as a common denominator to appeal to all needs in an
  equally substandard manner.
&lt;/p&gt;

&lt;h2&gt;Example 1: Nginx&lt;/h2&gt;

&lt;p&gt;
  Nginx is a freakishly fast web server that consumes really few
  resources. Its main appeal is in serving static files and you do
  have static files to serve. When you grow you may want to move those
  static files to a CDN, like CloudFront, which serves content from
  locations closer to the actual users, but for serving css/javascript
  and small images - a properly configured Nginx is all you need. And
  you can't really move any files served from your main domain to a
  CDN (like HTML content).
&lt;/p&gt;

&lt;p&gt;
  You can also be smart about semi-static pages in Rails - you can
  cache the output inside the &lt;i&gt;public/&lt;/i&gt; directory to be served by
  Nginx. And if you still want to hit your controller on every
  request, like when doing A/B Testing on a page, you can send an
  &lt;i&gt;X-Accel-Redirect&lt;/i&gt; header in your response to Nginx and let
  Nginx to the actual content streaming for you. You can also instruct
  Nginx to serve files from different locations, based on certain
  variables like the domain name, thus avoiding hitting the Rails
  application server on every request.
&lt;/p&gt;

&lt;p&gt;
  There's a lot you can do with Nginx if you're on a budget, and yet
  this is not possible within Heroku ... which even though it may use
  Nginx as an http reverse proxy, it certainly doesn't use it for
  serving static files. All files are thus served by hitting the Rails
  server, unless Varnish is involved.  
&lt;/p&gt;

&lt;h2&gt;Example 2: Varnish&lt;/h2&gt;

&lt;p&gt;
  &lt;a href=&quot;https://www.varnish-cache.org/&quot;&gt;Varnish&lt;/a&gt; is described as
  being a &lt;i&gt;web application accelerator&lt;/i&gt; and the things it can do
  are truly mind-blowing.
&lt;/p&gt;

&lt;p&gt;
  Varnish sits in front of your application servers. It can do
  &lt;i&gt;load-balancing&lt;/i&gt; for you with extreme efficiency, although
  that's not its main purpose. Its main purpose is to cache content.
&lt;/p&gt;

&lt;p&gt;
  When caching content you have an extreme freedom to specify the Key
  for fetching cached items. You can use anything when instructing
  Varnish on what and how to cache, like cookies or the user's IP or
  any HTTP header. Do you want to also cache content for logged-in
  users, even though that content is slightly different from user to
  user? Not a problem.  The configuration language is also extremely
  flexible, allowing you to tap in the request pipeline with any
  custom behavior you want.  The performance of Varnish coupled with
  this extreme flexibility is what makes it great. It also has this
  uncanny ability to reload its configuration without restarting or
  dropping active connections.
&lt;/p&gt;

&lt;p&gt;
  Heroku has Varnish in its stable stack, called Bamboo. But you
  cannot configure it. The configuration is the same for everybody
  ... you basically set expiry headers on your response, Varnish
  caches it for you and the cache gets invalidated on every new
  deployment.
&lt;/p&gt;

&lt;p&gt;
  This is actually good and has given rise to the famous Heroku
  use-case: hosting mostly static websites on it. But Varnish can be
  much more than that, otherwise it kind of gets in your way, and
  surprise - Heroku is pulling Varnish out of the configuration,
  starting with the new Celadon Cedar stack. This is because Varnish
  gets in the way of their ambitious plans: to make heroku
  platform-agnostic, thus adding support for Node.js and long-pooling.
&lt;/p&gt;

&lt;p&gt;
  The now recommended alternative for serving cached static content is
  to use Rack::Cache in combination with their Memcached add-on. But
  this sucks because (1) it hits the Rails server on every request and
  in the free plan you only have a single process to serve those
  requests + (2) the free plan for Memcached is only 5MB.
&lt;/p&gt;

&lt;h2&gt;Example 3: asynchronous jobs&lt;/h2&gt;

&lt;p&gt;
  One common-sense approach to not having a sluggish web interface is
  to get slow code out of your HTTP process. Lots of libraries and
  plugins are available for all web frameworks, like
  &lt;i&gt;delayed_job&lt;/i&gt; for Rails or &lt;i&gt;Celery&lt;/i&gt; for Django. And you
  can just write your own half-baked jobs queue and shove it in your
  cron.
&lt;/p&gt;

&lt;p&gt;
  You cannot have asynchronous jobs using Heroku's free plan. You must
  get an extra dyno for that.
&lt;/p&gt;

&lt;h2&gt;Price comparison with Linode&lt;/h2&gt;

&lt;p&gt;
  The cheapest &lt;a
  href=&quot;http://www.linode.com/?r=c7376c22b7853329bfb629a54dc9a843be935c36&quot;&gt;Linode
  instance&lt;/a&gt; is &lt;b&gt;$20&lt;/b&gt; per month, and for starters you can have ...
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;1 Nginx server&lt;/li&gt;
  &lt;li&gt;2 Passenger/Rails processes&lt;/li&gt;
  &lt;li&gt;
    1 worker for processing asynchronous jobs, it can even be a plain
    cron-job ; you do have complete flexibility in configuring
    cron-jobs
  &lt;/li&gt;
  &lt;li&gt;
    1 PostgreSQL database, configured for 256MB RAM usage, with 18 GB
    of storage. It's not much, but it isn't &lt;i&gt;shared&lt;/i&gt; either and
    does just fine, trust me ... btw, the &lt;a
    href=&quot;http://pgmag.org/&quot;&gt;PostgreSQL magazine&lt;/a&gt; (first issue) has
    an article about configuring/optimizing PostgreSQL's memory usage
  &lt;/li&gt;
  &lt;li&gt;
    1 Postfix email server, for bug reports + sending all the spam
    you want (Linode lets you configure reverse DNS lookup, so you can
    have a cheap email server that doesn't trigger spam alerts)
  &lt;/li&gt;
  &lt;li&gt;
    ability to serve for any domain you want, including wildcard subdomains
  &lt;/li&gt;
  &lt;li&gt;
    your own SSL certificate, for free depending on provider
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  The equivalent Heroku configuration would cost a minimum of &lt;b&gt;$114
  per month&lt;/b&gt;.
&lt;/p&gt;

&lt;p&gt;
  So lets say that you're growing and you want to add Ronin, Heroku's
  plan for a database of 1.7 GB &lt;i&gt;hot data set&lt;/i&gt; (whatever the fuck
  that means). That will cost you a whooping &lt;b&gt;$200 per month&lt;/b&gt;
  extra, versus &lt;b&gt;$80&lt;/b&gt; for a 2GB of RAM instance on Linode, or
  even better, $160 for a 4GB of RAM instance.
&lt;/p&gt;

&lt;h2&gt;Linode sucks too, but that's besides the point&lt;/h2&gt;

&lt;p&gt;
  You lose the ability to increase your dynos in response to traffic
  surges. On the other hand you'll be amazed at how much you can
  squeeze out of your rented hardware and if a properly configured
  setup fails to serve, then the problems you have probably can't be
  solved by just adding extra web servers.
&lt;/p&gt;

&lt;p&gt;
  Really, do some reading on why Reddit is down so often. Do some
  reading on why Amazon's EBS is completely unreliable for databases
  (btw, Heroku does use EBS and they've also had their share of
  downtime due to AWS experiencing problems).
&lt;/p&gt;

&lt;p&gt;
  Stop fearing the penguin and start configuring your own damn
  servers. As with everything that's actually worth it in life (like
  having children of your own), it's hard at first but the return of
  investment will be tenfold.
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;PS:&lt;/b&gt; I'm obviously advertising &lt;a
  href=&quot;http://www.linode.com/?r=c7376c22b7853329bfb629a54dc9a843be935c36&quot;&gt;Linode&lt;/a&gt;
  here. Links to it contain my affiliate tracking code, and if you
  become a customer you'll give me $20 worth of credit, which helps me
  pay for this blog's hosting (what can I say, I'm a cheap
  bastard). On the other hand this does express my genuine view of
  these services.
&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Cross-Domain, Cross-Browser AJAX Requests</title>
   <link href="http://bionicspirit.com/blog/2011/03/24/cross-domain-requests.html"/>
   <updated>2011-03-24T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2011/03/24/cross-domain-requests</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2011 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="tutorial" label="tutorial" />
   
   <category scheme="http://bionicspirit.com/tag/" term="javascript" label="javascript" />
   
   <category scheme="http://bionicspirit.com/tag/" term="browser" label="browser" />
   

   <content type="html">&lt;p&gt;
  This article describes how to make cross-browser requests, in all
  browsers (including &lt;u&gt;IExplorer 6&lt;/u&gt;), without using a proxy or JSONP
  (which is limited and awkward) -- as long as you control the
  destination server, or if the destination server allows.
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I'm explaining this file: &lt;a
  href=&quot;https://github.com/alexandru/crossdomain-requests-js/blob/gh-pages/public/crossdomain-ajax.js&quot;&gt;crossdomain-ajax.js&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Simple usage example: &lt;a
  href=&quot;/projects/crossdomain-requests-js/&quot;&gt;http://bionicspirit.com/projects/crossdomain-requests-js/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
  For a more serious example that works, checkout the Comments section
  getting loaded at the bottom of this page.
&lt;/p&gt;

&lt;h3&gt;UPDATED Oct 27, 2011&lt;/h3&gt;

&lt;p&gt;
  Added restrictions of usage and removed functionality that doesn't
  work on IExplorer. So in case this doesn't work for you, please see
  this page: &lt;a
  href=&quot;https://github.com/alexandru/crossdomain-requests-js/wiki/Troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt;
&lt;/p&gt;

&lt;h2&gt;In Modern Browsers - Meet Cross-Origin Resource Sharing&lt;/h2&gt;

&lt;p&gt;
  Or &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;CORS&lt;/a&gt; for short, or &lt;a
  href=&quot;https://developer.mozilla.org/en/http_access_control&quot;
  target=&quot;_blank&quot;&gt;HTTP Access Control&lt;/a&gt;, available in recent
  browsers, allows you to make cross-domain HTTP requests; the only
  requirement being that you have must have control over the
  server-side implementation of the domain targeted in your
  XMLHttpRequest calls.
&lt;/p&gt;

&lt;p&gt;
  This little piece of technology is available since Firefox 3.5 /
  IExplorer 8 and yet when searching for answers on websites like
  StackOverflow, it rarely comes up.
&lt;/p&gt;

&lt;p&gt;
  For the purposes of this tutorial, we'll assume we want to make a
  request from website &lt;u&gt;&lt;i&gt;http://source.com&lt;/i&gt;&lt;/u&gt; to
  &lt;u&gt;&lt;i&gt;http://destination.org&lt;/i&gt;&lt;/u&gt;, and that you control the
  implementation to both.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NOPE, it doesn&amp;#39;t work, yet&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://destination.org&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Response of &lt;i&gt;destination.org&lt;/i&gt;&lt;/h2&gt;

&lt;p&gt;
  It's pretty simple really, all you need to do is to return these
  headers in your response:
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;&lt;span class=&quot;l-Scalar-Plain&quot;&gt;Access-Control-Allow-Methods&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;GET, POST, OPTIONS&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;Access-Control-Allow-Credentials&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;http://source.com&lt;/span&gt;
&lt;span class=&quot;l-Scalar-Plain&quot;&gt;Access-Control-Allow-Headers&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Content-Type, *&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  You can find a description of them on &lt;a
  href=&quot;https://developer.mozilla.org/en/http_access_control#The_HTTP_request_headers&quot;&gt;Mozilla
  Doc Center&lt;/a&gt;, but the most important one is
  &lt;i&gt;Access-Control-Allow-Origin&lt;/i&gt;, which indicates the Origin(s)
  allowed to make such a request.
&lt;/p&gt;

&lt;p style=&quot;text-decoration: line-through&quot;&gt;
  &lt;b&gt;Note:&lt;/b&gt; these options allow for wildcards (like you can say
  that you allow for any Origin by putting a &quot;*&quot; in that header), but
  it is better to be explicit about what's allowed, otherwise your
  request won't work very well cross-browser.
&lt;/p&gt;

&lt;p&gt;
  &lt;b&gt;(New) Note:&lt;/b&gt; In regards to Access-Control-Allow-Origin,
  IExplorer DOES NOT support wildcards. See &lt;a
  href=&quot;https://github.com/alexandru/crossdomain-requests-js/wiki/Troubleshooting&quot;&gt;Troubleshooting&lt;/a&gt; for details.
&lt;/p&gt;

&lt;h2&gt;Client-side Implementation of Ajax Request for CORS&lt;/h2&gt;

&lt;p&gt;
  On browsers where &lt;u&gt;XMLHttpRequest&lt;/u&gt; is valid, support for CORS
  can be validated by checking for the availability of the
  &lt;u&gt;withCredentials&lt;/u&gt; property.
&lt;/p&gt;

&lt;p&gt;
  So we've got a tiny issue: &lt;u&gt;IExplorer's&lt;/u&gt; implementation is
  different than that of Firefox's or the rest of the browsers
  (naturally). Instead of using the same &lt;u&gt;XMLHttpRequest&lt;/u&gt; object,
  IExplorer 8 adds an &lt;a
  href=&quot;http://msdn.microsoft.com/en-us/library/cc288060(v=vs.85).aspx&quot;&gt;XDomainRequest&lt;/a&gt;
  object.
&lt;/p&gt;

&lt;p&gt;
  So to initialize an async request, that will work on IExplorer
  8, Firefox, Chrome and the other browsers supporting it:
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;	

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;withCredentials&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XDomainRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XDomainRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  But we aren't done yet, the callbacks used by these request objects
  have different behavior on IExplorer. So let's say we've got 2
  callbacks that we want to register, one for success, one for errors,
  having the following signatures (same as jQuery):
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  To have correct behavior cross-browser:
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// combines the success/error handlers into one &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// higher-order function (getting a little fancy for code-reuse)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handle_load&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// stupid IExplorer won&amp;#39;t receive any param on callbacks!!!&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// thus the object used is the initial `xhr` object&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// (bound to this function because it&amp;#39;s a closure)&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is_iexplorer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// IExplorer also skips on readyState&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Also, it&amp;#39;s success/error based on the `event_type` used at the call-site&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// &lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;load&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is_iexplorer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readyState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// IExplorer throws an exception on this one&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Setting this to `true` is specifying to make the request with Cookies attached.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// BUT -- it&amp;#39;s pretty useless, as IExplorer doesn&amp;#39;t support sending Cookies.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Also, trying to set cookies from the response is not really possible directly &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// (workarounds are available though -- you can return anything in the response&amp;#39;s &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  body and use local javascript for persistence/propagation on next request)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;withCredentials&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// `onload` + `onerror` are actually new additions to these browsers.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// IExplorer doesn&amp;#39;t actually push params on calling these callbacks.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// For every other browser, the XHRobj we want is in `e.target`, &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// where `e` is an event object.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handle_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;load&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is_iexplorer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onerror&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handle_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is_iexplorer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  Also of notice, here's how to check if the browser is IExplorer:
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is_iexplorer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userAgent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;MSIE&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  Well, that's it, unless you want to support the rest of desktop
  browsers in use.
&lt;/p&gt;

&lt;h2&gt;Fallback for Older Browsers&lt;/h2&gt;

&lt;p&gt;
  &lt;u&gt;Opera 10&lt;/u&gt; doesn't have this feature, neither do IExplorer &lt; 8,
  Firefox &lt; 3.5 -- and I don't really know when Chrome/Safari added
  it.

  Fortunately there's a workaround -- Flash can do whatever you want
  and runs the same on ~90% of desktop browsers out there, AND it can
  interact with Javascript.
&lt;/p&gt;

&lt;p&gt;
  Not to reinvent the wheel, here's a cool plugin: &lt;a
  href=&quot;http://flxhr.flensed.com/&quot;&gt;flensed.flXHR&lt;/a&gt;.
&lt;/p&gt;

&lt;h3&gt;Why bother with CORS?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Flash is not available on the iPhone&lt;/li&gt;
  &lt;li&gt;Flash loads slower than Javascript&lt;/li&gt;
  &lt;li&gt;Flash SWF files come with a lot of junk that your browser has to download&lt;/li&gt;
  &lt;li&gt;The whole experience using flXHR will be visibly slower than with CORS&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;flXHR Usage&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Does a request using flXHR (the JS-Flash alternative &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// implementation for XMLHttpRequest)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_ajax_with_flxhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// handles callbacks, just as above&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handle_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readyState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;status&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;responseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;XHRobj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flproxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;flensed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;flXHR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;autoUpdatePlayer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;instanceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;myproxy1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;xmlResponseText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;onreadystatechange&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;handle_load&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;flproxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;flproxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  We are NOT done. The destination server also needs a file called
  &lt;u&gt;crossdomain.xml&lt;/u&gt;, which represents a &lt;a target=&quot;_blank&quot; style=&quot;white-space: nowrap&quot;
  href=&quot;http://www.adobe.com/devnet/articles/crossdomain_policy_file_spec.html&quot;&gt;Crossdomain
  Policy File Spec&lt;/a&gt;. As a requirement, this file has to be placed
  in the domain's root,
  i.e. &lt;u&gt;http://destination.org/crossdomain.xml&lt;/u&gt; ...
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE cross-domain-policy SYSTEM &amp;quot;http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;cross-domain-policy&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- wildcard means &amp;#39;allow all&amp;#39; --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;allow-access-from&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;domain=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;allow-http-request-headers-from&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;domain=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;headers=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/cross-domain-policy&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



&lt;h2&gt;Not Loading the Junk when Not Needed&lt;/h2&gt;

&lt;p&gt;
  Javascript is &lt;u&gt;asynchronous&lt;/u&gt; and we should take advantage of
  that by not loading &lt;u&gt;flensed.flXHR&lt;/u&gt;, unless needed and at the
  last moment too (no need to load it until we want to make a
  request).
&lt;/p&gt;

&lt;p&gt;
  We need a method for asynchronously loading a Javascript file and
  executing a callback onload. And since we may be executing this
  function multiple times at once, we need to take care of
  race-conditions. First things first:
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// keeps count of files already included&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FILES_INCLUDED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// keeps count of files in the processes of getting loaded&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// for avoiding race conditions &lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FILES_LOADING&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;// stacks of registered callbacks, that will get executed once&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// a file loads -- this to deal with multiple file inclusions at once,&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// and not ignoring anything&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REGISTERED_CALLBACKS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;register_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REGISTERED_CALLBACKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;REGISTERED_CALLBACKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;REGISTERED_CALLBACKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;execute_callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;REGISTERED_CALLBACKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;REGISTERED_CALLBACKS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  To asynchronously load a Javascript file, with onload callback, behold:
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Loads a Javascript file asynchronously, executing a `callback`&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// if/when file gets loaded.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Returns `true` if callback got executed immediately, `false` otherwise.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;async_load_javascript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// stores callback in the stack&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;register_callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// dealing with race conditions&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FILES_INCLUDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;execute_callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;FILES_LOADING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;FILES_LOADING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// dynamically adds a &amp;lt;script&amp;gt; tag to the document&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;html_doc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;head&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;script&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/javascript&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;src&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;html_doc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// onload, then go through the stack of callbacks, &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and execute all of them&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readyState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;complete&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;readyState&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;loaded&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FILES_INCLUDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;FILES_INCLUDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;execute_callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// same as above, same shit for dealing with incompatibilities&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FILES_INCLUDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;FILES_INCLUDED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;execute_callbacks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Almost there&lt;/h2&gt;

&lt;p&gt;
  To bind it all together we need to plug this into our main logic. So
  if browser does not support CORS, it fallbacks to this implementation.
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// to recapitulate&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;withCredentials&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XDomainRequest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;undefined&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XDomainRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// NOT SUPPORTED, then fallback&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;async_load_javascript&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CROSSDOMAINJS_PATH&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;flXHR/flXHR.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;_ajax_with_flxhr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  To see the final code, go here: &lt;a
  href=&quot;https://github.com/alexandru/crossdomain-requests-js/blob/gh-pages/public/crossdomain-ajax.js&quot;&gt;crossdomain-ajax.js&lt;/a&gt;. Or
  to see it working, go here: &lt;a
  href=&quot;http://bionicspirit.com/projects/crossdomain-requests-js/&quot;&gt;bionicspirit.com/projects/crossdomain-requests-js/&lt;/a&gt;.
  &lt;br /&gt;
  (or just leave me a comment below ;))
&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>I hate NULL and all its variants!</title>
   <link href="http://bionicspirit.com/blog/2010/05/25/i-hate-null.html"/>
   <updated>2010-05-25T00:00:00+03:00</updated>
   <id>http://bionicspirit.com/blog/2010/05/25/i-hate-null</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2010 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="tutorial" label="tutorial" />
   
   <category scheme="http://bionicspirit.com/tag/" term="python" label="python" />
   

   <content type="html">&lt;p&gt;
  How many times have you had a chain of methods like this (example
  showing &lt;a target=&quot;_blank&quot; href=&quot;http://www.crummy.com/software/BeautifulSoup/&quot;&gt;BeautifulSoup&lt;/a&gt;
  in action) ...
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;search-params&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\    
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;elem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\    
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\    
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  BeautifulSoup is not JQuery, and when it doesn't find an element on
  find actions, it just returns None or an empty list. Then you get a
  beautiful index error or a method not available on NoneType kind of
  error, with the result being that the error itself doesn't say
  anything useful about what happened (except the source-code line
  number) ... whereas in the case above I would probably prefer a
  WebUIError or something.
&lt;/p&gt;

&lt;p&gt;
  And really, most of the time I just want the result of such an
  expression to be None, in case one method invocation fails, and I do
  not think that having a try/except block for every line of code that
  does something interesting is ideal.
&lt;/p&gt;

&lt;p&gt;
  Fortunately Python is dynamic, and you can come up with something
  resembling the &lt;a target=&quot;_blank&quot; href=&quot;http://en.wikipedia.org/wiki/Monad_(functional_programming)#Maybe_monad&quot;&gt;Maybe
  monad&lt;/a&gt;. Here's one way to do it ...
&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;instead of sending invocations to your initial object /
  collection (in my case a BeautifulSoup object used for querying),
  you're sending them to a proxy&lt;/li&gt;
 
  &lt;li&gt;for each invocation type you want, the proxy stores the
  invocation types into a list&lt;/li&gt;

  &lt;li&gt;when you want to execute the resulting expression, you iterate
  through that list actually invoking those actions, keeping an
  intermediate result&lt;/li&gt;

  &lt;li&gt;if at any point that intermediate result becomes None (or
  something that evaluates to False) or an exception is thrown, then
  you can either invoke some handler (specializing the exception
  thrown) or you can return None&lt;/li&gt;

&lt;/ol&gt;

&lt;p&gt;There are 3 types of invocations I needed to work with BeautifulSoup ...&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;attribute access (overridden with __getattr__)&lt;/li&gt;
  &lt;li&gt;method invocation (overridden with __call__)&lt;/li&gt;
  &lt;li&gt;indexer (overridden with __getitem__ and __setitem__)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My proxy implementation starts something like this ...&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_error_callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_memo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_wrapped_inst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instance&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_chain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_chain&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_on_error_callback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on_error_callback&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_memo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_memo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__getattr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_new_proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProxyAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;            

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__call__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;        
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_new_proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProxyInvoke&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  As you can see, there's an &lt;i&gt;instance&lt;/i&gt; of an object getting
  wrapped (&lt;i&gt;_wrapped_instance&lt;/i&gt;), there's a &lt;i&gt;_chain&lt;/i&gt; of
  expressions memorized, there's an &lt;i&gt;_on_error_callback&lt;/i&gt; that gets
  executed in case of error, and there's a &lt;i&gt;_memo&lt;/i&gt; that keeps the
  result of the last execution (libraries like BeautifulSoup are slow).
&lt;/p&gt;

&lt;p&gt;
  Of course, I'm getting fancy, because I want &lt;a target=&quot;_blank&quot; href=&quot;http://en.wikipedia.org/wiki/Memoization&quot;&gt;memoization&lt;/a&gt; and
  because in order to prevent the proxy getting into an inconsistent
  state, when adding a new invocation type to the &lt;i&gt;_chain&lt;/i&gt; I'm
  taking a page from functional programming by creating a new proxy
  object (making the proxy somewhat immutable).
&lt;/p&gt;

&lt;p&gt;
  So I override &lt;i&gt;__getattr__&lt;/i&gt; and &lt;i&gt;__call__&lt;/i&gt; and
  &lt;i&gt;__getitem__&lt;/i&gt; and &lt;i&gt;__setitem__. &lt;/i&gt;For example on
  &lt;i&gt;__getattr__&lt;/i&gt; I add to &lt;i&gt;_chain&lt;/i&gt; an instance of a
  &lt;i&gt;ProxyAttribute&lt;/i&gt;, which looks something like this ...
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProxyAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;getattr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  And when I want the result of such invocation, if the intermediate
  result is stored in &lt;i&gt;obj&lt;/i&gt;, then it would look like ...
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy_attribute_instance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now, for how it would look in practice ...&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handler_soup_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kwargs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;    
     &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WebUIError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Web interface specification changed&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BeautifulSoup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler_soup_error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;search-params&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\    
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;elem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\    
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\    
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\    
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  So at the actual call site, the only difference is that &lt;i&gt;do()&lt;/i&gt;
  call. If the error handler wouldn't be specified, the result returned
  would be None. Simple as that.
&lt;/p&gt;

&lt;p&gt;
  I also needed an utility, because I want to capture a partial
  evaluation to not rerun it for multiple special cases (like in the
  above case capturing all &quot;td&quot; elements) ...
&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;&lt;span class=&quot;n&quot;&gt;all_td_elems&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;soup&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;table&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;search-params&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\    
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;findParent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\    
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;td&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;elem&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;\    
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do_cache&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# not an inspiring name unfortunately&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;# and then resume with the same behavior ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;all_td_elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;input&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
  Yeah, it's just a small hack, but it's so damn useful sometimes.
  The source code is posted here: 
  &lt;a target=&quot;_blank&quot; href=&quot;http://code.google.com/p/useful-snippets/source/browse/trunk/proxy.py&quot;&gt;http://code.google.com/p/useful-snippets/source/browse/trunk/proxy.py&lt;/a&gt;
&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Catalyst, HTML::FormHandler and DBIx::Class tutorial</title>
   <link href="http://bionicspirit.com/blog/2009/12/03/catalyst-form-handler-tutorial.html"/>
   <updated>2009-12-03T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2009/12/03/catalyst-form-handler-tutorial</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2009 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="tutorial" label="tutorial" />
   
   <category scheme="http://bionicspirit.com/tag/" term="perl" label="perl" />
   

   <content type="html">&lt;h2 id=&quot;Introduction&quot;&gt;Introduction&lt;/h2&gt; 
&lt;div id=&quot;Introduction_CONTENT&quot;&gt; 
&lt;p&gt;&lt;a href=&quot;http://search.cpan.org/perldoc?HTML::FormHandler&quot;&gt;HTML::FormHandler&lt;/a&gt; is a module for handling forms and HTTP requests
that includes not only validation rules but, in case of DBIC models, the
logic to save the model in your database.&lt;/p&gt; 
&lt;p&gt;I like HTML::FormHandler because of its simplicity, extendability,
and Moose integration that it provides.&lt;/p&gt; 
&lt;p&gt;I prefer it over FormFu partly for subjective reasons, but most
importantly ...&lt;/p&gt; 
&lt;ul&gt; 
		&lt;li&gt;In HTML::FormHandler, the validation logic is done with validators
written in Perl, and you can use previously-defined Moose constraints.
&lt;br /&gt;&lt;br /&gt; 
 
 
	&lt;/li&gt; 
		&lt;li&gt;HTML::FormHandler gives me the confidence that it's flexible enough
for any challenge.&lt;/li&gt; 
&lt;/ul&gt; 
 
&lt;p&gt;This tutorial includes a fairly simple example that provides an
interface for viewing and editing articles in a blog, using
HTML::FormHandler for the editing functionality.&lt;/p&gt; 
 
&lt;/div&gt; 
&lt;h2 id=&quot;Setting_up_the_project&quot;&gt;Setting up the project&lt;/h2&gt; 
&lt;div id=&quot;Setting_up_the_project_CONTENT&quot;&gt; 
&lt;p&gt;To start a new project ...&lt;/p&gt; 
&lt;pre&gt; # catalyst.pl Blog
 
&lt;/pre&gt; 
&lt;p&gt;Let's generate the model:&lt;/p&gt; 
&lt;pre&gt; perl script/blog_create.pl model DB DBIC::Schema Blog::Schema \
 create=static components=TimeStamp \
 'dbi:Pg:dbname=blog' 'blog' 'blog' '{ AutoCommit =&amp;gt; 1 }'
 
&lt;/pre&gt; 
&lt;p&gt;Our articles will be tagged (to make the form processing more
interesting), so add a model representing tags
in &lt;code&gt;lib/Blog/Schema/Result/Tag.pm&lt;/code&gt;&lt;/p&gt; 
&lt;pre&gt;  package Blog::Schema::Result::Tag;
 
  use strict;
  use warnings;
  use base qw/DBIx::Class/;
 
  __PACKAGE__-&amp;gt;load_components(qw/Core/);
  __PACKAGE__-&amp;gt;table('tags');
 
  __PACKAGE__-&amp;gt;add_columns(
      tag_id =&amp;gt; {
          data_type =&amp;gt; 'integer' ,
          is_nullable   =&amp;gt; 0 ,
          is_auto_increment =&amp;gt; 1
      },
      name =&amp;gt; {
          data_type   =&amp;gt; 'varchar',
          size        =&amp;gt; 100,
          is_nullable =&amp;gt; 0,
      },
  );
  __PACKAGE__-&amp;gt;set_primary_key('tag_id');
  1;
  &amp;lt;/pre&amp;gt;
 
&lt;/pre&gt; 
&lt;p&gt;Let's also add an Article model
in &lt;code&gt;lib/Blog/Schema/Result/Article.pm&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;  package Blog::Schema::Result::Article;
 
  use strict;
  use warnings;
  use base qw/DBIx::Class/;
 
  __PACKAGE__-&amp;gt;load_components(qw/TimeStamp InflateColumn::DateTime Core/);
  __PACKAGE__-&amp;gt;table('articles');
 
  __PACKAGE__-&amp;gt;add_columns(
      article_id =&amp;gt; {
          data_type =&amp;gt; 'integer' ,
          is_nullable   =&amp;gt; 0 ,
          is_auto_increment =&amp;gt; 1
      },
      ts =&amp;gt; {
          data_type     =&amp;gt; 'datetime' ,
          is_nullable   =&amp;gt; 1,
          set_on_create =&amp;gt; 1,   
      },
      title =&amp;gt; {
          data_type   =&amp;gt; 'varchar',
          size        =&amp;gt; 250,
          is_nullable =&amp;gt; 0,
      },
      content =&amp;gt; {
          data_type   =&amp;gt; 'text',
          is_nullable =&amp;gt; 1,
      },
      summary =&amp;gt; {
          data_type   =&amp;gt; 'text',
          is_nullable =&amp;gt; 1,
      },
      rank =&amp;gt; {
          data_type =&amp;gt; 'decimal',
          size        =&amp;gt; [3, 2],
          is_nullable =&amp;gt; 1, 
      },
 
  );
  __PACKAGE__-&amp;gt;set_primary_key('article_id');
  __PACKAGE__-&amp;gt;has_many(article_tags =&amp;gt; 'Blog::Schema::Result::ArticleTag', 'article_fk');
  __PACKAGE__-&amp;gt;many_to_many(tags =&amp;gt; 'article_tags', 'tag');
 
 
 
 
&lt;/pre&gt; 
&lt;p&gt;... with a corresponding link table ...&lt;/p&gt; 
&lt;pre&gt;  package Blog::Schema::Result::ArticleTag;
 
  use strict;
  use warnings;
  use base qw/DBIx::Class/;
 
  __PACKAGE__-&amp;gt;load_components(qw/Core/);
  __PACKAGE__-&amp;gt;table('article_tag');
 
  __PACKAGE__-&amp;gt;add_columns(
      article_fk =&amp;gt; {
          data_type   =&amp;gt; 'integer',
          is_nullable =&amp;gt; 0,
      },
      tag_fk =&amp;gt; {
          data_type   =&amp;gt; 'integer',
          is_nullable =&amp;gt; 0,
      },
  );
  __PACKAGE__-&amp;gt;set_primary_key(qw/article_fk tag_fk/);
  __PACKAGE__-&amp;gt;belongs_to(tag =&amp;gt; 'Blog::Schema::Result::Tag', 'tag_fk');
  __PACKAGE__-&amp;gt;belongs_to(article =&amp;gt; 'Blog::Schema::Result::Article', 'article_fk');
 
&lt;/pre&gt; 
&lt;p&gt;We're almost done setting up our project. Now just deploy your
schema with a command like this ...&lt;/p&gt; 
&lt;pre&gt;    # perl -I./lib -MBlog::Model::DB \
         -e &amp;quot; Blog::Model::DB-&amp;gt;new-&amp;gt;schema-&amp;gt;deploy &amp;quot;
 
&lt;/pre&gt; 
&lt;p&gt;Also add this utility to lib/Blog.pm ...&lt;/p&gt; 
&lt;pre&gt;  sub redirect_to_action {
      my ($c, $controller, $action, @params) =@_;
      $c-&amp;gt;response-&amp;gt;redirect($c-&amp;gt;uri_for($c-&amp;gt;controller($controller)-&amp;gt;action_for($action), @params));
      $c-&amp;gt;detach;
  }
 
&lt;/pre&gt; 
 
&lt;/div&gt; 
&lt;h2 id=&quot;Creating_the_CRUD_controller&quot;&gt;Creating the CRUD controller&lt;/h2&gt; 
&lt;div id=&quot;Creating_the_CRUD_controller_CONTENT&quot;&gt; 
&lt;p&gt;Edit a new file in &lt;code&gt;lib/Blog/Controller/Article.pm&lt;/code&gt;:&lt;/p&gt; 
&lt;pre&gt;  package Blog::Controller::Article;
 
  use strict;
  use warnings;
  use parent 'Catalyst::Controller';
 
  # this class is a HTML::FormHandler class that we'll define below
  use Blog::Form::Article;
 
  sub articles : Chained('/') PathPart('article') CaptureArgs(0) {
      my ($self, $c) = @_;
      $c-&amp;gt;stash-&amp;gt;{articles} = $c-&amp;gt;model('DB::Article');
  }
 
  sub list : Chained('articles') Args(0) {
      my ($self, $c) = @_;
      $c-&amp;gt;stash-&amp;gt;{template} = 'article/list.tt';      
  }
 
  sub item : Chained('articles') PathPart('') CaptureArgs(1) {
      my ($self, $c, $id) = @_;
 
      $c-&amp;gt;error(&amp;quot;ID isn't valid!&amp;quot;) unless $id =~ /^\d+$/;
      $c-&amp;gt;stash-&amp;gt;{item} = $c-&amp;gt;stash-&amp;gt;{articles}-&amp;gt;find($id)
          || $c-&amp;gt;detach('not_found');
  }
 
  sub edit : Chained('item') {
      my ($self, $c) = @_;
      $c-&amp;gt;forward('save');
  }
 
  sub add : Chained('articles') {
      my ($self, $c) = @_;
      $c-&amp;gt;forward('save');
  }
 
  # both adding and editing happens here
  # no need to duplicate functionality
  sub save : Private {
      my ($self, $c) = @_;
 
      # if the item doesn't exist, we'll just create a new result
      my $item = $c-&amp;gt;stash-&amp;gt;{item} || $c-&amp;gt;model('DB::Article')-&amp;gt;new_result({});
      my $form = Blog::Form::Article-&amp;gt;new( item =&amp;gt; $item );
 
      $c-&amp;gt;stash( form =&amp;gt; $form, template =&amp;gt; 'article/save.tt' );
 
      # the &amp;quot;process&amp;quot; call has all the saving logic,
      #   if it returns False, then a validation error happened
      return unless $form-&amp;gt;process( params =&amp;gt; $c-&amp;gt;req-&amp;gt;params  );
 
      # $c-&amp;gt;flash-&amp;gt;{info_msg} = &amp;quot;Article saved!&amp;quot;;
      $c-&amp;gt;redirect_to_action('Article', 'edit', [$item-&amp;gt;article_id]);
  }
 
  sub not_found : Local {
      my ($self, $c) = @_;
      $c-&amp;gt;response-&amp;gt;status(404);
      $c-&amp;gt;stash-&amp;gt;{error_msg} = &amp;quot;Article not found!&amp;quot;;
      $c-&amp;gt;detach('list');
  }
 
&lt;/pre&gt; 
&lt;p&gt;This CRUD is pretty standard, and it would be possible to abstract
it away in a role (see  &lt;a href=&quot;http://search.cpan.org/perldoc?&amp;amp;quot;Controller_Roles&amp;amp;quot;&quot;&gt;&amp;amp;quot;Controller_Roles&amp;amp;quot; in Catalyst::Manual::CatalystAndMoose&lt;/a&gt;)&lt;/p&gt; 
 
&lt;/div&gt; 
&lt;h2 id=&quot;The_Editing_Form&quot;&gt;The Editing Form&lt;/h2&gt; 
&lt;div id=&quot;The_Editing_Form_CONTENT&quot;&gt; 
&lt;p&gt;Let's start with the HTML::FormHandler-derived class
in &lt;code&gt;lib/Blog/Form/Article.pm&lt;/code&gt; looking like this ...&lt;/p&gt; 
&lt;pre&gt;  package Blog::Form::Article;
 
  use strict;
  use warnings;
  use HTML::FormHandler::Moose;
 
  extends 'HTML::FormHandler::Model::DBIC';
  with 'HTML::FormHandler::Render::Simple';
 
  has_field 'title'    =&amp;gt; ( type =&amp;gt; 'Text',     required =&amp;gt; 1 );
  has_field 'ts'       =&amp;gt; ( type =&amp;gt; 'Date', label =&amp;gt; 'Published Date' );
  has_field 'content'  =&amp;gt; ( type =&amp;gt; 'TextArea', required =&amp;gt; 0 );
 
  has_field 'tags_str' =&amp;gt; ( type =&amp;gt; 'TextArea', required =&amp;gt; 0 );
  has_field 'rank'     =&amp;gt; ( type =&amp;gt; 'Text',     default =&amp;gt; '0.00' );
 
  1;
 
&lt;/pre&gt; 
&lt;p&gt;... and to make this work, also add the view ...&lt;/p&gt; 
&lt;pre&gt;  # perl script/blog_create.pl view TT TT
 
&lt;/pre&gt; 
&lt;p&gt;... configure the templates path, and add the following file in
&lt;code&gt;root/article/save.tt&lt;/code&gt; ...&lt;/p&gt; 
&lt;pre&gt;  &amp;lt;h1&amp;gt;
    [% IF item.article_id %]Editing &amp;quot;[% item.title %]&amp;quot;
    [% ELSE %]Adding a new article[% END %]
  &amp;lt;/h1&amp;gt;
 
  [% form.render %]
 
&lt;/pre&gt; 
&lt;p&gt;OK, so we now have a form with automatic validation.&lt;/p&gt; 
&lt;ul&gt; 
		&lt;li&gt;The &amp;quot;title&amp;quot; field is required	&lt;/li&gt; 
		&lt;li&gt;The &amp;quot;published date&amp;quot; field expects the format YYYY-MM-DD. You'd be
wise to enhance this input with a Javascript widget.&lt;/li&gt; 
&lt;/ul&gt; 
 
&lt;p&gt;The first problem ... the &amp;quot;tags_str&amp;quot; field is a
textarea. HTML::FormHandler can work directly with many-to-many
relationships, but in this case we want the editing to be as
&amp;quot;free-form&amp;quot; as possible. So we want to specify those tags in a simple
textarea, separated by commas.&lt;/p&gt; 
&lt;p&gt;To save the tags, we want Blog::Form::Article to automatically get the
value, split it in words by &amp;quot;,&amp;quot;, create the missing tags, and create
the necessary links between the article and those tags. We'll just
append the following to Blog::Form::Article:&lt;/p&gt; 
&lt;pre&gt;  around 'update_model' =&amp;gt; sub {
      my $orig = shift;
      my $self = shift;
      my $item = $self-&amp;gt;item;
 
      $self-&amp;gt;schema-&amp;gt;txn_do(sub {	
          $orig-&amp;gt;($self, @_);
 
          my @tags = split /\s*,\s*/, $self-&amp;gt;field('tags_str')-&amp;gt;value;
 
          $item-&amp;gt;article_tags-&amp;gt;delete;
          $item-&amp;gt;article_tags-&amp;gt;create({ tag =&amp;gt; { name =&amp;gt; $_ } })
              foreach (@tags);
      });
  };
 
&lt;/pre&gt; 
&lt;p&gt;We have this flexibility, since HTML::FormHandler is based on
Moose. But we also want it to load the current tags in the textarea
when the form renders. So we'll just append this:&lt;/p&gt; 
&lt;pre&gt;  after 'setup_form' =&amp;gt; sub {
      my $self = shift;
      my $item = $self-&amp;gt;item;
 
      $self-&amp;gt;field('tags_str')-&amp;gt;value(
          join ', ', 
          $item-&amp;gt;tags-&amp;gt;search({}, { order_by =&amp;gt; 'name' })-&amp;gt;get_column('name')-&amp;gt;all
      );
  };
 
&lt;/pre&gt; 
 
&lt;/div&gt; 
&lt;h2 id=&quot;A_custom_type&quot;&gt;A custom type&lt;/h2&gt; 
&lt;div id=&quot;A_custom_type_CONTENT&quot;&gt; 
&lt;p&gt;Another problem is with the &amp;quot;rank&amp;quot;. We want this to be a decimal
number between 0 and 5. An easy way to do this is with the field
'range_start' and 'range_end' settings, but we'll demonstrate this 
with a custom type and additional transformations:&lt;/p&gt; 
&lt;pre&gt;  package Blog::Form::Field::Rank;
 
  use HTML::FormHandler::Moose;
  extends 'HTML::FormHandler::Field::Text';
 
  apply( [
       { # remove suffix chars
         transform =&amp;gt; sub {
           my $value = shift;
           $value =~ s/\w+$//;
           return $value;
       }},
       {
         transform =&amp;gt; sub { $_[0] =~ /^[\d+.]+$/ ? sprintf '%.2f', $_[0] : $_[0] },
         message   =&amp;gt; 'Value cannot be converted to a decimal',
       },
       {
         check =&amp;gt; sub { $_[0] =~ /^-?\d+\.?\d*$/ &amp;amp;&amp;amp; $_[0] &amp;gt;= 0 &amp;amp;&amp;amp; $_[0] &amp;lt;= 5 },
         message =&amp;gt; 'Rank must be a decimal number between 0 and 5'
       }
      ]);
  1;
 
&lt;/pre&gt; 
&lt;p&gt;And then the field declaration in the form class becomes ...&lt;/p&gt; 
&lt;pre&gt;  has_field 'rank' =&amp;gt; ( type =&amp;gt; '+Blog::Form::Field::Rank', default =&amp;gt; '0.00' );
 
&lt;/pre&gt; 
 
&lt;/div&gt; 
&lt;h2 id=&quot;Auto_generating_values&quot;&gt;Auto-generating values&lt;/h2&gt; 
&lt;div id=&quot;Auto_generating_values_CONTENT&quot;&gt; 
&lt;p&gt;In our example, the Article model has a &amp;quot;summary&amp;quot; field. We want this
to be autogenerated. I'm sure you can find on CPAN modules for
doing this, and one stupid way of doing it would be to just delete the
HTML tags and slice it to 200 chars or something.&lt;/p&gt; 
&lt;p&gt;So to autogenerate the summary tag, we'll change the 'around &amp;quot;update_model&amp;quot;' in
&lt;code&gt;Blog::Form::Article&lt;/code&gt; as ...&lt;/p&gt; 
&lt;pre&gt;  around 'update_model' =&amp;gt; sub {
 
      # .... &amp;lt;init here&amp;gt; ...
 
      $self-&amp;gt;schema-&amp;gt;txn_do(sub {    
          $orig-&amp;gt;($self, @_);
 
          # .... &amp;lt; tags saving here &amp;gt; ....  
 
          # generates the summary and updates the $item
          my $summary = generate_symmary($item-&amp;gt;content);
          $item-&amp;gt;update({ summary =&amp;gt; $summary }) if $summary;
      });
  };
 
&lt;/pre&gt; 
&lt;p&gt;You may have noticed schema-&amp;gt;txn_do. That's a transaction. If any of
the method calls in our $changes code-block throws an error, a
&amp;quot;ROLLBACK&amp;quot; is issued.&lt;/p&gt; 
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; It would've been better for the summary generation to be
defined in &lt;code&gt;Blog::Schema::Result::Article&lt;/code&gt;, by overriding
&amp;quot;update&amp;quot;. So what I did here is not necessarily a good practice.&lt;/p&gt; 
 
&lt;/div&gt; 
&lt;h2 id=&quot;Testing&quot;&gt;Testing&lt;/h2&gt; 
&lt;div id=&quot;Testing_CONTENT&quot;&gt; 
&lt;p&gt;And we are done. Start your development server with:&lt;/p&gt; 
&lt;pre&gt;    perl script/blog_server.pl -r -d
 
&lt;/pre&gt; 
&lt;p&gt;and go to the following URL ...&lt;/p&gt; 
&lt;pre&gt;    http://localhost:3000/article/add
 
&lt;/pre&gt; 
 
&lt;/div&gt; 
&lt;h2 id=&quot;Download_the_project&quot;&gt;Download the project&lt;/h2&gt; 
&lt;div id=&quot;Download_the_project_CONTENT&quot;&gt; 
&lt;p&gt;You can download this sample project with ...&lt;/p&gt; 
&lt;pre&gt;  svn co http://dev.catalystframework.org/repos/Catalyst/trunk/examples/Advent09FormHandlerBlog
 
&lt;/pre&gt; 
 
&lt;/div&gt; 
&lt;h2 id=&quot;Further_Reading&quot;&gt;Further Reading&lt;/h2&gt; 
&lt;div id=&quot;Further_Reading_CONTENT&quot;&gt; 
&lt;p&gt;See &lt;a href=&quot;http://search.cpan.org/perldoc?HTML::FormHandler::Manual::Intro&quot;&gt;HTML::FormHandler::Manual::Intro&lt;/a&gt; for a more complex example
with custom validators and notes about template rendering.&lt;/p&gt; 
&lt;p&gt;Also, check out &lt;a href=&quot;http://search.cpan.org/perldoc?HTML::FormHandler::Manual::Cookbook&quot;&gt;HTML::FormHandler::Manual::Cookbook&lt;/a&gt;,
&lt;a href=&quot;http://search.cpan.org/perldoc?HTML::FormHandler::Manual::Tutorial&quot;&gt;HTML::FormHandler::Manual::Tutorial&lt;/a&gt; and the other documents in
&lt;a href=&quot;http://search.cpan.org/perldoc?HTML::FormHandler::Manual&quot;&gt;HTML::FormHandler::Manual&lt;/a&gt;.&lt;/p&gt; 
 
&lt;/div&gt; 
</content>
 </entry>
 
 
 
 <entry>
   <title>FreeSWITCH - Tips for Creating a Dialer</title>
   <link href="http://bionicspirit.com/blog/2009/02/20/tips-for-creating-voip-dialer.html"/>
   <updated>2009-02-20T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2009/02/20/tips-for-creating-voip-dialer</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2009 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="tutorial" label="tutorial" />
   

   <content type="html">&lt;h2&gt;Note (Feb 17, 2011)&lt;/h2&gt; 

&lt;p&gt;
  This article was written when working for my former employer, &lt;a
  href=&quot;http://sinapticode.ro&quot; target=&quot;_blank&quot;&gt;Sinapticode&lt;/a&gt;.  They
  are great consultants. You wouldn't go wrong for contacting them on
  FreeSWITCH-related consulting.
&lt;/p&gt;

&lt;p&gt;
  This article also refers to FreeSWITCH Revision 10694.  Things could
  have changed since then, there might be better ways for doing what's
  described in this article; ask on their mailing list.
&lt;/p&gt;
 
&lt;h2&gt;Introduction&lt;/h2&gt; 
 
&lt;p&gt;We are trying to migrate one of our existing Asterisk setups to
FreeSWITCH. These are some tips to walk you thorough the hard part of
learning the inners of FreeSWITCH for creating a simple dialer.&lt;/p&gt; 
 
&lt;p&gt;As you will learn, FreeSWITCH is a little overwhelming, while being
flexible and easy to use.&lt;/p&gt; 
 
&lt;p&gt;Being a software developer, I prefer the flexibility of a
programming language, rather than working with XML configuration
files. Fortunately the standard FreeSWITCH distribution comes with
both a SpiderMonkey engine (javascript) and Lua embeded. And it works
great for our needs.&lt;/p&gt; 
 
&lt;h2&gt;Prerequisites&lt;/h2&gt; 
 
&lt;p&gt; 
  Our setup is based on Debian Linux. You should have no problem
  following it for other Linux-distros or operating systems though.
&lt;/p&gt; 
 
&lt;p&gt; 
  For external scripts, we prefer Perl, and I'll give a code sample
  using it, but I don't think it would be a problem porting it to the
  language of your choice.
&lt;/p&gt; 
 
&lt;p&gt; 
  You'll also need
  a &lt;a target=&quot;_blank&quot; href=&quot;http://en.wikipedia.org/wiki/Session_Initiation_Protocol&quot;&gt;SIP&lt;/a&gt; 
  provider for initiating external VoIP calls.
&lt;/p&gt; 
 
&lt;h2&gt;Step 1: Instalation&lt;/h2&gt; 
 
&lt;p&gt;You can find detailed installation instructions here: 
&lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Installation_Guide&quot;&gt;http://wiki.freeswitch.org/wiki/Installation_Guide&lt;/a&gt;.&lt;/p&gt; 
 
&lt;p&gt;Our setups are based on Debian, and there are also instructions
for &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Installation_Guide#Debian_Linux&quot;&gt;building
Debian packages&lt;/a&gt;.&lt;/p&gt; 
 
&lt;p&gt;If you build Debian packages, the default instalation path is
/opt/freeswitch (revision 10694). You can change that by modifying
debian/rules in the sources directory (search for /opt/freeswitch,
you'll find a &quot;./configure&quot; section), once you download it. But this
tutorial is based on the default settings.&lt;/p&gt; 
 
&lt;h2&gt;Step 2: Configuration&lt;/h2&gt; 
 
&lt;p&gt; 
  I won't dwell on details since the configuration can be a painful
  process, and you would be better served contacting
  the &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Main_Page#Community_and_Support&quot;&gt;FreeSWITCH
    community&lt;/a&gt;.
&lt;/p&gt; 
 
&lt;p&gt; 
  But you'll probably need to configure authentication settings for your
  SIP provider. To do that, look at the lead on the
  wiki: &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Getting_Started_Guide#External&quot;&gt;external
    SIP profiles&lt;/a&gt;.
 
  For us it was easy since our provider doesn't require user/password
  authentication, and no extra configuration was necessary.
&lt;/p&gt; 
 
&lt;h2&gt;Step 3: Initiating External Calls&lt;/h2&gt; 
 
&lt;p&gt; 
  In case the FreeSWITCH daemon has started, you need to stop it for now ...
 
  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;/etc/init.d/freeswitch stop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
  If you also have Asterisk up and runnings, you should stop it also, to
  avoid any conflicts.
&lt;/p&gt; 
 
&lt;p&gt;
  Then open the FreeSWITCH console:
  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;/opt/freeswitch/bin/freeswitch -c 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;/p&gt; 
 
&lt;p&gt; 
  Calls can be initiated by using
  the &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Mod_commands#originate&quot;&gt;originate
    command&lt;/a&gt;. You'll need a &quot;call url&quot; with the syntax described on the
  wiki: &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Sofia#Syntax&quot;&gt;Sofia#Syntax&lt;/a&gt;.
&lt;/p&gt; 
 
&lt;p&gt; 
  To make a simple call, let's setup a simple dialplan. Also, let's also
  play a simple audio file,
  according &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Playing_recording_external_media#Play_wav&quot;&gt;to
    the wiki example&lt;/a&gt;.To do that, create a dialplan extension by
  creating a file
  named &lt;i&gt;/opt/freeswitch/conf/dialplan/default/2009_play.xml&lt;/i&gt; with
  the following text:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;include&amp;gt;&lt;/span&gt; 
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;extension&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;wavs&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;condition&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;field=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;destination_number&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;expression=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;^2009$&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;application=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;sleep&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;2000&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;action&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;application=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;playback&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/path/to/your.wav&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/condition&amp;gt;&lt;/span&gt; 
 
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/extension&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/include&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
    The file is self-descriptive. When the phone is answered, it waits 2
    seconds before playing your audio file of choice.
&lt;/p&gt; 
 
&lt;p&gt; 
  Now, in the Free console execute the following command (while
  providing a real number and your own SIP provider, of course):

  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;originate sofia/external/&lt;span class=&quot;nv&quot;&gt;$number&lt;/span&gt;@&lt;span class=&quot;nv&quot;&gt;$myprovider&lt;/span&gt;.com 2009 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


  If everything goes well (the phone rings, and you can hear the audion
  file), then &lt;b&gt;congratulations&lt;/b&gt;, you're well on your way :)
&lt;/p&gt; 
 
&lt;h2&gt;Step 4: Scripting&lt;/h2&gt; 
 
&lt;p&gt; 
  Freeswitch comes with Spidermonkey, and Lua embedded, and also
  offers integration with other languages, like Python and Perl. I'm
  going to exemplify Javascript, because it's a decent mainstream
  language that I like, but if you're worried about performance or you
  just want to have some fun, you should give Lua a try.
&lt;/p&gt; 
 
&lt;p&gt; 
  I also really, really hate XML configuration files. So I wanted to
  do everything from a script file, with these reasons on top of my
  head:
  &lt;ol&gt;  
    &lt;li&gt;general-purpose scripting languages make me happy&lt;/li&gt; 
    &lt;li&gt; 
      you gain flexibility ... and stuff like retrying the call
      based on certain conditions, or a finite state automata depending
      on the client/campaign ... easy as pie
    &lt;/li&gt; 
    &lt;li&gt;have I mentioned that I hate XML?&lt;/li&gt; 
  &lt;/ol&gt; 
&lt;/p&gt; 
 
&lt;p&gt; 
  In your favorite text editor, create a file &quot;voice.js&quot;, with the
  following code:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sofia/external/$number@provider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The following line is a deprecated method &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// session.originate(undefined, &amp;#39;sofia/external/$number@provider&amp;#39;); &lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitForAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;streamFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/your.wav&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
  See:
  &lt;ul&gt; 
    &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Session_waitForAnswer&quot;&gt;waitForAnswer&lt;/a&gt;&lt;/li&gt; 
    &lt;li&gt;&lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Session_streamFile&quot;&gt;streamFile&lt;/a&gt;&lt;/li&gt; 
  &lt;/ul&gt; 
 
  For our purposes, this snippet is almost equivalent to our initial
  dialplan extension.  To execute it, in the FreeSWITCH console run
  the following command:

  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;jsrun /path/to/voice.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;/p&gt; 
 
&lt;h2&gt;Step 5: More Scripting&lt;/h2&gt; 
 
&lt;p&gt; 
  Now that we've got working code, lets expand it a little to make it
  more useful.
&lt;/p&gt; 
 
&lt;h2&gt;How to send a caller-id when initiating calls?&lt;/h2&gt; 
 
&lt;p&gt; 
  We want the call to have an associated caller-ID.  The caller-ID is
  passed by setting the channel variables
  &lt;i&gt;origination_caller_id_number&lt;/i&gt; and
  &lt;i&gt;origination_caller_id_name&lt;/i&gt;. Try it in a FreeSWITCH console
  right now by executing this command:
&lt;/p&gt; 

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;originate &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;origination_caller_id_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;123456, &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
           &lt;span class=&quot;nv&quot;&gt;ignore_early_media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;sofia/external/&lt;span class=&quot;nv&quot;&gt;$number&lt;/span&gt;@provider &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
Or in your script:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;{origination_caller_id_number=1234567}&amp;quot;&lt;/span&gt;
                          &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sofia/external/$number@provider&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
&lt;p&gt; 
  For the B-leg of a bridged connection, you either set
  &lt;i&gt;origination_caller_id_(name/number)&lt;/i&gt; on the new connection,
  or, as a shortcut, on the A-leg you can specify the channel
  variables &lt;i&gt;effective_caller_id_number&lt;/i&gt; and
  &lt;i&gt;effective_caller_id_name&lt;/i&gt; which are passed to any B-leg call
  initiated. Try it in a console:
&lt;/p&gt;
 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;originate &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;origination_caller_id_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1111111111, &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
           &lt;span class=&quot;nv&quot;&gt;effective_caller_id_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;222222222, &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
           &lt;span class=&quot;nv&quot;&gt;ignore_early_media&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;sofia/external/&lt;span class=&quot;nv&quot;&gt;$number&lt;/span&gt;@provider &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
           &amp;amp;bridge&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;sofia/external/&lt;span class=&quot;nv&quot;&gt;$second_number&lt;/span&gt;@provider&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;How to retry if phone is busy?&lt;/h2&gt; 
 
&lt;/p&gt;&lt;p&gt; 
  We want to retry the call immediately after, maybe the client
  pressed the wrong button and rejected the call.  As in this 
  &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Busy_Call_Retry&quot;&gt;wiki
  page&lt;/a&gt;, but with a twist: we wouldn't want to retry more than
  once, because annoyed customers are not happy customers.

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nr_or_tries&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sofia/external/$number@provider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The following line is a deprecated method &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//session.originate(undefined, &amp;#39;sofia/external/$number@provider&amp;#39;); &lt;/span&gt;
 
    &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitForAnswer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;USER_BUSY&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;c1&quot;&gt;// not sure if this is necessary &lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// session.hangup(); &lt;/span&gt;
 
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nr_or_tries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
	    &lt;span class=&quot;nx&quot;&gt;console_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Action: Trying again!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
 
	&lt;span class=&quot;nx&quot;&gt;console_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Action: Cannot try again, skipping!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
 
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;streamFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/path/to/your.wav&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hangup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
 
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nr_or_tries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nr_or_tries&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;makeCall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nr_or_tries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
  See: &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Session_hangup&quot;&gt;hangup&lt;/a&gt;.
&lt;/p&gt; 
 
&lt;p&gt; 
  Of course, this script retries the call immediately.  This may not
  be what you want (you may want to wait 10 minutes for a retry), so
  our favorite way for retries is through an external script that
  handles the calls queue.
 
&lt;/p&gt; 
 
&lt;h2&gt;How to detect phone keys pressed?&lt;/h2&gt; 
 
&lt;p&gt;Now we're getting somewhere :)&lt;/p&gt; 
 
&lt;p&gt; 
  The first thing you have to do, after the originate command, is
  activating &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Misc._Dialplan_Tools_start_dtmf&quot;&gt;DTFM
  detection&lt;/a&gt;. This can be done in an extension configuration file,
  but I prefer doing it from our script, for reasons stated above. So
  after you execute the &lt;i&gt;originate&lt;/i&gt; command, you have to execute
  the following:
 
  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;start_dtmf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;/p&gt; 
 
&lt;p&gt; 
  Now, when you play an audio file, the &lt;i&gt;streamFile&lt;/i&gt; function
  accepts as parameter an event handler, which can be used to detect
  keys pressed. So, lets say than when you press &quot;1&quot;, you want to
  repeat your message, and when you press &quot;2&quot;, you want to play
  another audio file:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/*... params ... */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The following line is a deprecated method &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//session.originate(/*... params ... */); &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;start_dtmf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on_event&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;arg&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
 
    &lt;span class=&quot;c1&quot;&gt;// we are only concerned with &amp;quot;dtmf&amp;quot; event types &lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;dtmf&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;seek:0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;digit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
 
        &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;streamFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/path/to/another.wav&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
 
	&lt;span class=&quot;cm&quot;&gt;/* current audio file is stopped&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	* on returning false&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	*/&lt;/span&gt; 
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 
    &lt;span class=&quot;cm&quot;&gt;/* for any other key pressed&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    * returning true keeps the current audio playing&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;    */&lt;/span&gt; 
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
 
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;streamFile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/path/to/your.wav&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on_event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
  &lt;b&gt;Note:&lt;/b&gt; minutes cost money, so you should add a counter to
  limit the maximum times a message can be replayed. There are many
  weirdos out there ;)
&lt;/p&gt; 
 
&lt;h2&gt;How to create a connection between your session and another phone?&lt;/h2&gt; 
 
&lt;p&gt; 
  Maybe you want your client to be connected to a real operator (when
  he's pressing &quot;0&quot; on his phone keyboard maybe?). It's easy, here's
  how:

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// the original session &lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sofia/external/$number@provider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// The following line is a deprecated method &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// session.originate(undefined, &amp;#39;sofia/external/$number@provider&amp;#39;); &lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sofia/external/$another_number&amp;gt;@provider&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The following line is a deprecated method &lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//new_session.originate(session, &amp;#39;sofia/external/$another_number@provider&amp;#39;); &lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;new_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;answer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;new_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ready&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;nx&quot;&gt;bridge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
  See: &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Mod_commands#bridge&quot;&gt;bridge&lt;/a&gt;.  
  If you want to add the actual key-press event, see the example above.
&lt;/p&gt; 
 
&lt;h2&gt;How to execute external commands from your script?&lt;/h2&gt; 
 
&lt;p&gt; 
  If you want to execute an external script (like for sending a
  notification when a certain event happens), you can use
  the &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Javascript_Misc_system&quot;&gt;system&lt;/a&gt; 
  command.
&lt;/p&gt; 
 
&lt;p&gt; 
  If you want to execute an external command, and process its output,
  you can open a pipe using
  the &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/File&quot;&gt;File&lt;/a&gt; object.
 
  In FreeSWITCH you do have the possibility of accessing a database
  using ODBC, but I haven't tried it, and in case it doesn't work, you
  can always write an external script that does the processing you
  need, and then returns a JSON, or an XML file.
&lt;/p&gt; 
 
 
&lt;h2&gt;Step 6: Communicating with FreeSWITCH using mod_event_socket&lt;/h2&gt; 
 
&lt;p&gt; 
  Playing in the FreeSWITCH console is fun, but what you need is a
  server who receives notifications from an external script.
&lt;/p&gt; 
 
&lt;p&gt; 
  First, shut down the FreeSWITCH console, and start FS in daemon mode.
 
  &lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;/etc/init.d/freeswitch start 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
  Next, copy your work thus far (which I assume it's located
  in &lt;i&gt;dialer.js&lt;/i&gt;) to &lt;u&gt;/opt/freeswitch/scripts&lt;/u&gt;. That's where
  scripts are usually deployed in FreeSWITCH.
&lt;/p&gt; 
 
&lt;p&gt;  
  FreeSWITCH can communicate
  through &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Mod_event_socket&quot;&gt;mod_event_socket&lt;/a&gt;.
  You can communicate using a simple telnet connection, but I'm lazy,
  and &lt;a target=&quot;_blank&quot; href=&quot;http://search.cpan.org/~jrogers/Net-Telnet-3.03/lib/Net/Telnet.pm&quot;&gt;Net::Telnet&lt;/a&gt; 
  is complaining about a missing login prompt.
 
  Luckily, in the FreeSWITCH sources directory, you'll find a
  sample &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Mod_event_socket#perl_command_client&quot;&gt;perl
  command client&lt;/a&gt;. The source code is located
  in &lt;u&gt;&lt;i&gt;freeswitch_src&lt;/i&gt;/scripts/socket&lt;/u&gt; and in there
  you'll find the perl package &lt;i&gt;FreeSWITCH::Client&lt;/i&gt;. Copy it to your
  project's location, and create a script called &lt;u&gt;dialer.pl&lt;/u&gt; with
  the following code:
 
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;perl&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/perl &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;warnings&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# make sure it&amp;#39;s located in your @USE paths &lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FreeSWITCH::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;FreeSWITCH::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;password&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;ClueCon&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;die&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Error: $@&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# shows number of active channels ... &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# useful when you want to control the maximum number of &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# calls made simultaneously &lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$reply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;show channels&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Channels\n------------\n$reply\n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# calls our script, that initiates a call &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# the command is non-blocking, so you can make multiple &lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# calls in parallel &lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jsrun dialer.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$fs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

 
  Btw, if you're not feeling comfortable about communicating through
  plain-old sockets with FreeSWITCH,
  try &lt;a target=&quot;_blank&quot; href=&quot;http://wiki.freeswitch.org/wiki/Mod_http&quot;&gt;mod_http&lt;/a&gt;.
&lt;/p&gt; 
 
&lt;h2&gt;Wrapping up&lt;/h2&gt; 
 
&lt;p&gt; 
  Congratulations, you've made it to the end. You just need to add
  you're specific business logic, and you already have a kick-ass
  dialer.
 
&lt;/p&gt; 
 
&lt;p&gt; 
  There are lots of scenarios not addressed by this tutorial. One need
  you might have would be to get the logs of your calls, and see what
  customers haven't answered, what customers pressed what key, the
  average duration of a call, and other such niceties.
 
  Since this is a big topic to talk about, and since I still have some
  research to do, this deserves a whole new article.
&lt;/p&gt; 
 

</content>
 </entry>
 
 
 
 <entry>
   <title>Using the Best Tools in Programming: Not Really Doable</title>
   <link href="http://bionicspirit.com/blog/2009/02/01/using-best-tools-programming-not-doable.html"/>
   <updated>2009-02-01T00:00:00+02:00</updated>
   <id>http://bionicspirit.com/blog/2009/02/01/using-best-tools-programming-not-doable</id>

   <author>
     <name>Bionic Spirit</name>
     <email>contact@bionicspirit.com</email>
     <uri>http://bionicspirit.com</uri>
   </author>

   <rights type="text">
     Copyright 2009 Alexandru Nedelcu.
     Some rights reserved (CC BY-NC 3.0)
     License: http://creativecommons.org/licenses/by-nc/3.0/
   </rights>

   
   <category scheme="http://bionicspirit.com/tag/" term="opinion" label="opinion" />
   

   <content type="html">&lt;p&gt;
  There's something that bothers me when it comes to starting a new
  project. You can't really use the best tool for a certain job, if that
  tool is not integrated with the rest of your platform. Let me explain.
&lt;/p&gt;

&lt;p&gt;
  At our startup we pride ourselves with our pragmatism. We are true
  polyglots :) capable of diving in any project, no matter the language
  it was written in. This also gives us the power to make educated
  choices about the technologies we're going to use for our own gigs.
&lt;/p&gt;

&lt;p&gt;
  Our programming language of choice is Perl, because of its flexibility
  and because usually there's no need to reinvent the wheel since you
  can find a CPAN module for almost anything.
&lt;/p&gt;


&lt;p&gt;
  But recently I began experimenting with data-mining techniques, flirting with various NLP libraries. You can find almost anything in CPAN's &lt;a target=&quot;_blank&quot; href=&quot;http://search.cpan.org/search?query=AI%3A%3A&amp;amp;mode=module&quot;&gt;AI:: namespace&lt;/a&gt;. But I also knew about &lt;a target=&quot;_blank&quot; href=&quot;http://www.nltk.org/&quot;&gt;NLTK&lt;/a&gt;, a Python collection of libraries with excellent documentation, and I also found &lt;a target=&quot;_blank&quot; href=&quot;http://opennlp.sourceforge.net/&quot;&gt;OpenNLP&lt;/a&gt;, &lt;a target=&quot;_blank&quot; href=&quot;http://web.media.mit.edu/~hugo/montylingua/&quot;&gt;MontyLingua&lt;/a&gt;, &lt;a target=&quot;_blank&quot; href=&quot;http://web.media.mit.edu/~hugo/conceptnet/&quot;&gt;ConceptNet&lt;/a&gt;, &lt;a target=&quot;_blank&quot; href=&quot;http://www.abisource.com/projects/link-grammar/&quot;&gt;link-grammar&lt;/a&gt; and various &lt;a target=&quot;_blank&quot; href=&quot;http://www2.nict.go.jp/x/x161/members/mutiyama/software.html&quot;&gt;Ruby modules&lt;/a&gt;.
&lt;/p&gt;


&lt;p&gt;
  And all of a sudden I got cold feet. Java packages in OpenNLP may have
  the advantage of speed (just a guess and it doesn't matter for the
  purpose of this discussion). NLTK has pedigree and great
  documentation, not to mention that many books related to NLP, AI and
  data mining have Python samples (for example I own &lt;a target=&quot;_blank&quot;
  href=&quot;http://oreilly.com/catalog/9780596529321/&quot;&gt;Programming
  Collective Intelligence&lt;/a&gt; and &lt;a target=&quot;_blank&quot;
  href=&quot;http://aima.cs.berkeley.edu/&quot;&gt;AIMA&lt;/a&gt;). Usually the solution is
  straightforward: you test all the options, and choose the best one.
&lt;/p&gt;

&lt;p&gt;
  But what if you want to combine them?
&lt;/p&gt;

&lt;p&gt;
  Well, then you're shit out of luck. Surely you can do that with
  inter-process communication, but for that you'll have to write
  glue-code and pay the price for extra latency, bandwidth and memory
  ... parsing millions of documents, moving results between processes,
  it's not really practical. Perl does have &lt;a target=&quot;_blank&quot;
  href=&quot;http://search.cpan.org/dist/Inline-Java/Java.pod&quot;&gt;Inline::Java&lt;/a&gt;,
  but I would only use it in extreme situations.
&lt;/p&gt;

&lt;p&gt;
  That's why there's so much wheel reinvention around. Unless a module
  is written in C, for which any language has a FFI, almost nobody wants
  to use a Java module from Ruby, or a Python module from Perl. That's
  why there's &lt;a href=&quot;http://lucene.apache.org/&quot; target=&quot;_blank&quot;&gt;Lucene&lt;/a&gt;, and then
  there's &lt;a target=&quot;_blank&quot;
  href=&quot;http://incubator.apache.org/lucene.net/&quot;&gt;Lucene.NET&lt;/a&gt;, &lt;a target=&quot;_blank&quot;
  href=&quot;http://sourceforge.net/projects/clucene&quot;&gt;CLucene&lt;/a&gt;, &lt;a target=&quot;_blank&quot;
  href=&quot;http://www.oreillynet.com/onlamp/blog/2005/10/lucene_in_ruby_name_ferret_thi.html&quot;&gt;Ferret&lt;/a&gt;,
  &lt;a target=&quot;_blank&quot;
      href=&quot;http://framework.zend.com/manual/en/zend.search.lucene.html#zend.search.lucene.introduction&quot;&gt;Zend_Search_Lucene&lt;/a&gt;,
  &lt;a target=&quot;_blank&quot;
      href=&quot;http://search.cpan.org/~tmtm/Plucene-1.25/lib/Plucene.pm&quot;&gt;Plucene&lt;/a&gt;
  and &lt;a target=&quot;_blank&quot; href=&quot;http://incubator.apache.org/lucene4c/&quot;&gt;Lucene4c&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
  What is really needed is a universal virtual machine with a flexible
  &lt;a target=&quot;_blank&quot;
  href=&quot;http://en.wikipedia.org/wiki/Metaobject_Protocol&quot;&gt;MOP&lt;/a&gt;,
  allowing seamless communication between languages. I'm happy there
  are a couple of efforts in this space, including &lt;a target=&quot;_blank&quot;
  href=&quot;http://www.parrot.org/&quot;&gt;Parrot&lt;/a&gt;, and the &lt;a target=&quot;_blank&quot;
  href=&quot;http://en.wikipedia.org/wiki/Dynamic_Language_Runtime&quot;&gt;DLR&lt;/a&gt;. Also,
  the biggest obstacles of alternative implementations are the modules
  written in C. Fortunately, JRuby/Rubinius have a brand new
  implementation-independent &lt;a target=&quot;_blank&quot;
  href=&quot;http://blog.headius.com/2008/10/ffi-for-ruby-now-available.html&quot;&gt;FFI&lt;/a&gt;,
  and &lt;a target=&quot;_blank&quot;
  href=&quot;http://code.google.com/p/ironclad/&quot;&gt;Ironclad&lt;/a&gt; will allow
  IronPython users to use CPython extensions (number one on their list
  being numpy).
&lt;/p&gt;

&lt;p&gt;
  These developments make me happy :)
&lt;/p&gt;

</content>
 </entry>
 
 
</feed>
