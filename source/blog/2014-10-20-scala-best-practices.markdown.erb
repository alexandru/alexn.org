---
title: "Scala Best Practices"
tags:
  - Languages
  - Functional
  - Scala
  - Best Practices
---

## 0. Preface

<%= image_tag "2014/scala-logo.png", :class => "right" %>

What follows is a list of best practices I compiled for my colleagues,
advice sprung from the painful experience coming naturally from
dealing with other people's code :-)

Defining a list of best practices is always hard. I like to think that
we are defining a protocol of communication, because we are. Therefore
this document uses keywords defined in
[RFC 2119](https://www.ietf.org/rfc/rfc2119.txt), to differentiate
between rules that should never be broken and those that can be broken
if you know what you're doing.

This list is also far from complete.

### 0.1. MUST NOT follow advice blindly

This should be the first rule of any document that describes best
practices.

Always try to understand the reasons behind a rule, don't
cargo-cult. Following advice blindly leads to the worst hairballs
imaginable.

## 1. General Advice

### 1.1. MUST NOT use "return"

The `return` statement from Java signals a side-effect - unwind the
stack and give this value to the caller. In a language in which the
emphasis is on side-effect-full programming, this makes sense. However
Scala is an expression oriented language in which the emphasis is on
controlling/limiting side-effects and `return` is not idiomatic.

To make matters worse, `return` probably doesn't behave as you think
it does. For example in a Play controller, try doing this:

```scala
def action = Action { request =>
  if (someInvalidationOf(request))
    return BadRequest("bad")

 Ok("all ok")
}
```

In Scala, a `return` statement inside a nested anonymous function is
implemented by throwing and catching a `NonLocalReturnException`. It
says so in the
[Scala Language Specification, section 6.20](http://www.scala-lang.org/docu/files/ScalaReference.pdf).

Besides, `return` is anti structural programming, as functions can be
described with multiple exit points and if you need `return`, like in
those gigantic methods with lots of if/else branches, the presence of
a `return` is a clear signal that the code stinks, a magnet for future
bugs and is thus in urgent need of refactoring.

### 1.2. SHOULD use immutable data-structures

Immutable data-structures are facts that can be compared and reasoned
about. Mutable things are error-prone buckets. You should never use a
mutable data-structure unless you're able to defend it and there are
really, really few places in which a mutable data-structure is
defendable.

Lets exemplify:

```scala
trait Producer[T] {
 def fetchList: List[T]
}

// consumer side
someProducer.fetchList
```

Question - if the `List` returned above is mutable, what does that say
about the `Producer` interface?

Here are some problems:

1. if this List is produced on another thread than the consumer, one
   can have both visibility and atomicity problems - you can't know
   whether that will happen, unless you take a look at the Producer's
   implementation.

2. even if this List is effectively immutable (i.e. still mutable, but
   no longer modified after being signaled to the Consumer), you don't
   know if it will be signaled to other Consumers that may modify it
   by themselves, so you can't reason about what you can do with it.

3. even if it is described that access to this List must be
   synchronized, problem is - on which lock are you going to
   synchronize?  Are you sure you'll get the locking order right?
   Locks are not composable.

So there you have it - a public API exposing a mutable data-structure
is an abomination of nature, leading to problems that can be worse
than what happens when doing manual memory management.

### 1.3. SHOULD NOT update a `var` using loops or conditions

It's a mistake that most Java developpers do when they come to Scala. Example:

```scala
var sum = 0
for (elem <- elements) {
  sum += elem.value
}
```

This kind of mutable counter should be avoided. Instead, this kind of code must be prefered :

```scala
val sum = elements.foldLeft(0)((acc, e) => acc + e.value)
```

Or even better, know thy standard library and always prefer to
use the built-in functions:

```scala
val sum = elements.map(_.value).sum
```

In the same spirit, you should never update a partial result with a condition.
Example:


```scala
def compute(x) = {
  var result = resultFrom(x)

  if(needToAddTwo) {
    result += 2
  }
  else {
  	result += 1
  }

  result
}
```

Remember, prefer expressions and immutability. The code will be more readable
and less error-prone, since it makes the branches more explicit and that's
a good thing:

```scala
def computeResult(x) = {
  val r = resultFrom(x)
  if (needToAddTwo)
    r + 2
  else
  	r + 1
}
```

### 1.4. SHOULD NOT define useless traits

There was this Java Best Practice that said "*program to an interface,
not to an implementation*", a best practice that has been cargo-culted
to the point that people started defining completely useless
interfaces in their code. Generally speaking, that rule is healthy,
but it refers to the general engineering need of hiding implementation
details especially details of modifying state (encapsulation) and not
to slap interface declarations that often leak implementation details
anyway.

Defining traits is also a burden for readers of that code, because it
signals a need for polymorphism. Example:

```scala
trait PersonLike
 def name: String
 def age: Int
}

case class Person(name: String, age: Int)
  extends PersonLike
```

Readers of this code might come to the conclusion that there are
instances in which overriding `PersonLike` is desirable. That couldn't
be further from the truth - `Person` is perfectly described by its
case class as a data-structure without behavior. In other words it
describes the shape of your data and if you need to override this
shape for some unknown reason, then this trait is badly defined
because it imposes the shape of your data and that's about the only
thing you can override. You can always come up with traits later, if
you're in need of polymorphism, after your needs evolve.

And if you're thinking that you may need to override the source of
this (as in to fetch the person's `name` from the DB on first access),
OMG don't do that!

Note that I'm not talking about algebraic data structures (i.e. sealed
traits that are signaling a closed set of choices - like `Option`).

Even in those cases in which you think the issue is clear-cut, it may
not be. Lets take this example:

```scala
trait DBService {
  def getAssets: Future[Seq[(AssetConfig, AssetPersistedState)]]

  def persistFlexValue(flex: FlexValue): Future[Unit]
}
```

This snippet is taken from real-wold code - we've got a `DBService`
that handles either queries or persistence in a database. Those two
methods are actually unrelated, so if you only need to fetch the
assets, why depend on things you don't need in components that require
DB interaction?

Lately my code looks a lot like this:

```scala
final class AssetsObservable
    (f: => Future[Seq[(AssetConfig, AssetPersistedState)]])
  extends Observable[AssetConfigEvent] {

  // ...
}

object AssetsObservable {
  // constructor
  def apply(db: DBService) = new AssetsObservable(db.fetchAssets)
}
```

See, I do not need to mock an entire `DBService` in order to test the
above.

### 1.5. MUST NOT use "var" inside a case class

Case classes are syntactic sugar for defining classes in which - all
constructor arguments are public and immutable and thus part of the
value's identity, have structural equality, a corresponding hashCode
implementation and apply/unapply auto-generated functions provided by
the compiler.

By doing this:

```scala
case class Sample(str: String, var number: Int)
```

You just broke its equality and hashCode operation. Now try using it
as a key in a map.

As a general rule of thumb, structural equality only works for
immutable things, because the equality operation must be stable (and
not change according to the object's history). Case classes are for
strictly immutable things. If you need to mutate stuff, don't use case
classes.

### 1.6. SHOULD NOT declare abstract "val" or "var" or "lazy val" members

It's a bad practice to declare abstract vals or vars or lazy vals in
abstract classes or traits. Do not do this:

```scala
trait Foo {
 val value: String
}
```

Instead, prefer to always declare abstract things as `def`:

```scala
trait Foo {
 def value: String
}

// can then be overridden as anything, including val
class Bar(val value: String) extends Foo
```

The reason has to do with the imposed restriction - a `val` can only
be overridden with a `val`, a `var` can only be overridden with a
`var`, etc. The only way to allow freedom to choose on inheritance is
to use `def` for abstract members. And this freedom is important,
because a `val` for example restricts the way this value can get
initialized - only at construction time. Take this example:

```scala
trait Foo { val value: String }

trait Bar extends Foo { val uppercase = value.toUpperCase }

trait MyValue extends Foo { val value = "hello" }

// this triggers a NullPointerException
new Bar with MyValue

// this works
new MyValue with Bar
```

In the sample above, a gotcha is exemplified related to the order in
which the JVM + Scala executes things at construction time. It's a
catch 22 between Scala's ideals and the JVM's limits. Reversing the
order on inheritance works, but this is a fragile / error-prone
solution. And because we have the `value` defined as a `val`, we
cannot fix the above example by overriding `value` as a `lazy val`, an
otherwise decent way of fixing such a sample.

There's no good reason to impose on inheritors the way a value should
get initialized. `def` is generic so use `def` instead.

### 1.7. MUST NOT Throw Exceptions for Validations of User Input or Flow Control

Two reasons:

1. it goes against the principles of structured programming as a
   routine ends up having multiple exit points and are thus harder to
   reason about - with the stack unwinding happening being an awful and
   often unpredictable side-effect
2. exceptions aren't documented in the function's signature - Java
   tried fixing this with the checked exceptions concept, which in
   practice was awful as people simply ignored them

Exceptions are useful for only one thing - signaling unexpected errors
(bugs) up the stack, such that a supervisor can catch those errors and
decide to do things, like log the errors, send notifications,
restarting the guilty component, etc...

As an appeal to authority, it's reasonable to reference
[Functional Programming with Scala](http://www.manning.com/bjarnason/),
chapter 4.

### 1.8. MUST NOT catch Throwable when catching Exceptions

Never, never, never do this:

```scala
try {
 something()
} catch {
 case ex: Throwable =>
   blaBla()
}
```

Never catch `Throwable` because we could be talking about extremely
fatal exceptions that should never be caught and that should crash the
process. For example if the JVM throws an out of memory error, even if
you re-throw that exception in that catch clause, it may be too late -
given that the process is out of memory, the garbage collector
probably took over and froze everything, with the process ending in a
zombie unrecoverable state. Which means that an external supervisor
(like Upstart) will not get an opportunity to restart it.

Instead do this:

```scala
import scala.control.NonFatal

try {
 something()
} catch {
 case NonFatal(ex) =>
   blaBla()
}
```

### 1.9. MUST NOT use "null"

You must avoid using `null`. Prefer Scala's `Option[T]` instead. Null
values are error prone, because the compiler cannot protect
you. Nullable values that happen in function definitions are not
documented in those definitions. So avoid doing this:

```scala
def hello(name: String) =
  if (name != null)
    println(s"Hello, $name")
  else
    println("Hello, anonymous")
```

As a first step, you could be doing this:

```scala
def hello(name: Option[String]) = {
  val n = name.getOrElse("anonymous")
  println(s"Hello, $n")
}
```

The point of using `Option[T]` is that the compiler forces you to deal
with it, one way or another:

1. you either have to deal with it right away (e.g. by providing a
   default, throwing an exception, etc..)
2. or you can propagate the resulting `Option` up the call stack

Also remember that `Option` is just like a collection of 0 or 1
elements, so you can use foreach, which is totally idiomatic:

```scala
val name: Option[String] = ???

for (n <- name) {
  // executes only when the name is defined
  println(n)
}
```

Combining multiple options is also easy:

```scala
val name: Option[String] = ???
val age: Option[Int] = ???

for (n <- name; a <- age)
  println(s"Name: $n, age: $a")
```

And since `Option` is seen as an `Iterable` too, you can use `flatMap`
on collections to get rid of `None` values:

```scala
val list = Seq(1,2,3,4,5,6)

list.flatMap(x => Some(x).filter(_ % 2 == 0))
// => 2,4,6
```

Also, never, ever use `option.get`. That's just sloppy engineering and
defeats the purpose of using Option.

### 1.11. SHOULD NOT use Any or AnyRef or isInstanceOf / asInstanceOf

Avoid using Any or AnyRef or explicit casting, unless you've got a
really good reason for it. Scala is a language that derives value from
its expressive type system, usage of Any or of typecasting represents
a hole in this expressive type system and the compiler doesn't know
how to help you there. In general, something like this is bad:

```scala
val json: Any = ???

if (json.isInstanceOf[String])
  doSomethingWithString(json.asInstanceOf[String])
else if (json.isInstanceOf[Map])
  doSomethingWithMap(json.asInstanceOf[Map])
else
  ???
```

Often we are using Any when doing deserialization. Instead of working
with Any, think about the generic type you want and the set of
subtypes you need, and come up with an Algebraic Data-Type:

```scala
sealed trait JsValue

case class JsNumber(v: Double) extends JsValue
case class JsBool(v: Boolean) extends JsValue
case class JsString(v: String) extends JsValue
case class JsObject(map: Map[String, JsValue]) extends JsValue
case class JsArray(list: Seq[JsValue]) extends JsValue
case object JsNull extends JsValue
```

Now, instead of operating on Any, we can do pattern matching on
JsValue and the compiler can help us here on missing branches, since
the choice is finite. This will trigger a warning on missing branches:

```scala
val json: JsValue = ???
json match {
  case JsString(v) => doSomethingWithString(v)
  case JsNumber(v) => doSomethingWithNumber(v)
  // ...
}
```

### 1.10. MUST NOT use Java's Date or Calendar, instead use Joda-Time

Java's Date and Time classes from the standard library are awful
because:

1. resulting objects are mutable, which doesn't make sense for expressing a date
2. months numbering is zero based
3. Date in particular does not keep timezone info, so Date values are completely useless
4. it doesn't make a difference between GMT and UTC
5. years are expressed as 2 digits instead of 4

Always use Joda-Time.

### 1.12. MUST serialize dates as either Unix timestamp, or as ISO 8601

Unix timestamps, provided that we are talking about the number of
seconds or milliseconds since 1970-01-01 00:00:00 UTC (with emphasis
on UTC) are a decent cross-platform serialization format. It does have
the disadvantage that it has limits in what it can express. ISO-8601
is a decent serialization format supported by most libraries.

Avoid anything else and also when storing dates without a timezone
attached (like in MySQL), always express that info in UTC.

### 1.13. MUST NOT use magic values

Although not uncommon in other languages to use "magic" (special)
values like `-1` to signal particular outcomes, in Scala there are a
range of types to make intent clear. `Option`, `Either`, `Try` are
examples. Also, in case you want to express more than a boolean
success or failure, you can always come up with an algebraic data
type.

Don't do this:

```scala
val index = list.find(someTest).getOrElse(-1)
```

### 1.14. SHOULD NOT use "var" as shared state

Avoid using "var" at least when speaking about shared mutable
state. Because if you do have shared state expressed as vars, you'd
better synchronize it and it gets ugly fast. Much better is to avoid
it. In case you really need mutable shared state, use an atomic
reference and store immutable things in it. Also checkout
[Scala-STM](https://nbronson.github.io/scala-stm/).

So instead of something like this:

```scala
class Something {
  private var cache = Map.empty[String, String]
}
```

If you can't really avoid that variable, prefer doing this:

```scala
import java.util.concurrent.atomic._

class Something {
  private val cache =
    new AtomicReference(Map.empty[String, String])
}
```

Yes, it introduces overhead due to the synchronization required, which
in the case of an atomic reference means spin loops. But it will save
you from lots and lots of headaches later. And it's best to avoid
mutation entirely.

## 2. Application Architecture

### 2.1. SHOULD NOT use the Cake Pattern

The Cake Pattern is a very
[good idea in theory](https://www.youtube.com/watch?v=yLbdw06tKPQ) -
using traits as modules that can be composed, giving you the ability
to override `import`, with compile-time dependency injection as a
side-effect.

In practice all the Cake implementations I've seen have been awful,
new projects should steer away and existing projects should be
migrated off Cake.

People are not implementing Cake correctly, being a poorly understood
design pattern. I haven't seen Cake implementations in which the
traits are designed to be abstract modules, or that pay proper
attention to lifecycle issues. What happens in practice is sloppiness,
with the result being a big hairball. It's awesome that Scala allows
you to do things like the Cake pattern, highlighting the real power of
OOP, but just because you can doesn't mean you should, because if the
purpose is doing dependency injection and decoupling between various
components, you'll fail hard and impose that maintainance burden on
your colleagues.

In fact, one should strive to not do dependency injection at all, or
to do it only at the edges (like Play's controllers). Because if a
component depends on too many things, that's *code smell*. If a
component depends on hard to initialize arguments, that's also *code
smell*. Don't hide painful things under the rug, fix it instead.

### 2.2. MUST NOT put things in Play's Global

I'm seeing this over and over again.

Folks,
[Play's Global](https://www.playframework.com/documentation/2.3.x/ScalaGlobal)
object is not a bucket in which you can shove your orphaned pieces of
code. Its purpose is to hook into Play's configuration and lifecycle,
nothing more.

Come up with your own freaking namespace for your utilities.

## 3. Concurrency, Parallelism and Performance

### 3.1. SHOULD avoid concurrency like the plague it is

Avoid having to deal with concurrency as much as possible. People good
at concurrency avoid it like the plague it is.

**WARNING:** concurrency issues happen not only when speaking about
shared memory and threads, but also between processes when contention
on any kind of resource (like a database) is involved.

Example - when a job is scheduled to execute every minute by using
cron.d in Linux and that job fetches and updates items from a queue
persisted in MySQL, that job can take longer than 1 minute to execute
and thus you can end up with 2 or 3 processes executing at the same
time and contending on the same MySQL table.

### 3.2. SHOULD use appropriate abstractions only where suitable - Future, Actors, Rx

Learn about the abstractions available and choose between them
depending on the task at hand. There is no silver bullet that can be
generally applied. The more high-level the abstraction, the less scope
it has in solving issues. For example many developers in the Scala
community are overusing Akka Actors - which are great, but not when
misapplied. Like don't use an Akka Actor when a `Future` would do.

Scala's Futures and Promises are good because:

- they are inherently parallelizable by eliminating concurrency
  concerns
- fairly efficient, because when submitting a task to the implicit
  `ExecutionContext`, this execution context efficiently multiplexes
  between few threads by default (the number of threads in the
  thread-pool is often directly proportional to the number of CPU cores
  you have)
- the model is inherently simple and easy to use

Futures and Promises are bad because they signal only one value from
the producer to the consumer and that's it - if you need a stream or
bi-directional communications, a Future might not be the best
abstraction.

Akka Actors are good because:

- they make bidirectional communications over asynchronous boundaries
  easy - for example WebSocket is a prime candidate for actors
- with Akka's Actors you can easily model state machines (see
  `context.become`)
- the processing of messages has a strong guarantee of
  non-concurrency - messages are processed one by one, so there's no
  need to worry about concurrency issues while in the context of an
  actor
- instead of implementing a half-assed in-memory queue for processing
  of things, you could just use an actor, since queuing of messages and
  acting on those messages is what they do

Akka's Actors are bad because:

- they are fairly low-level for many tasks
- it's extremely easy to model actors that keep a lot of state, ending
  up with a system that can't be horizontally scaled
- because of the bidirectional communications capability, it's
  extremely easy to end up with data flows that are so complex as to be
  unmanageable
- the model in general is actor A sending a message to actor B - but
  if you need to model a stream of events, this tight coupling between A
  and B is not acceptable

Rx and Iteratees - see Play's
[Iteratees](https://www.playframework.com/documentation/2.3.x/Iteratees)
/ [RxJava](https://github.com/ReactiveX/RxJava) /
[Reactive Streams](http://www.reactive-streams.org/) /
[Monifu](https://github.com/alexandru/monifu) are good because:

- they model unidirectional communications between a producer and
  consumers - with an `Observable`/`Enumerator` being a channel that doesn't
  care what listeners it has (think about a stream of data like a river
  of information - the river doesn't care about who drinks from it)
- depending on implementation, they address back-pressure concerns by
  default, with consumers signaling demand to the producer and the
  producer insuring that it doesn't send more data than the consumer can
  chew on
- just as in the case of Future, because of the limitations, the model
  is simple to use - and the exposed operators / combinators are awesome

Rx / Iteratees are bad because:

- they are only about unidirectional communications, it gets
  complicated if you want bidirectional communications, so choose
  actors instead

- because of the strong contract they come with (i.e. no concurrent
  notifications for example), implementing new operators and data-source
  can be problematic, but usage on the consumer side is kept simple
  because of this

So there you have it. Learn and pick wisely - don't apply abstractions
like some sort of special sauce without thinking about it

### 3.3. MUST NOT wrap purely CPU-bound operations in Futures

This is in general an anti-pattern:

```scala
def add(x: Int, y: Int) = Future { x + y }
```

If you don't see any kind of I/O in there, then that's a red
flag. Shoving stuff in Futures without thinking is not going to solve
your performance problems. Especially in the case of a web server, in
which the requests are already paralellized and the above would get
executed in response to requests, shoving purely CPU-bound in that
Future constructor will make your logic slower to execute, not faster.

### 3.4. MUST use Scala's BlockContext on blocking I/O

This includes all blocking I/O, including SQL queries. Real sample:

```scala
Future {
  DB.withConnection { implicit connection =>
    val query = SQL("select * from bar")
    query()
  }
}
```

Blocking calls are error-prone because one has to be aware of exactly
what thread-pool gets affected and given the default configuration of
the backend app, this can lead to non-deterministic dead-locks. It's a
bug waiting to happen in production.

Here's a simplified example demonstrating the issue for didactical purposes:

```scala
implicit val ec = ExecutionContext
  .fromExecutor(Executors.newFixedThreadPool(1))

def addOne(x: Int) = Future(x + 1)

def multiply(x: Int, y: Int) = Future {
  val a = addOne(x)
  val b = addOne(y)
  val result = for (r1 <- a; r2 <- b) yield r1 * r2

  // this will dead-lock
  Await.result(result, Duration.Inf)
}
```

This sample is simplified to make the effect deterministic, but all
thread-pools configured with upper bounds will sooner or later be
affected by this.

Blocking calls have to be marked with a `blocking` call that signals
to the `BlockContext` a blocking operation. It's a very neat mechanism
in Scala that lets the `ExecutionContext` know that a blocking operation
happens, such that the `ExecutionContext` can decide what to do about
it, such as adding more threads to the thread-pool (which is what
Scala's ForkJoin thread-pool does).

All the code has to be reviewed and whenever a blocking call happens, this is the fix:

```scala
import scala.concurrent.blocking
// ...
blocking {
  someBlockingCallHere()
}
```

### 3.5. SHOULD NOT block

Sometimes you have to block the thread underneath - unfortunately JDBC
doesn't have a non-blocking API. However, when you have a choice,
never, ever block. For example, don't do this:

```scala
def fetchSomething: Future[String] = ???

// later ...
val result = Await.result(fetchSomething, 3.seconds)
result.toUpperCase
```

Prefer keeping the context of that Future all the way:

```scala
def fetchSomething: Future[String] = ???

fetchSomething.map(_.toUpperCase)
```

Also checkout [Scala-Async](https://github.com/scala/async) to make
this easier.

### 3.6. All public APIs SHOULD BE thread-safe

As a general rule of software engineering on top of the JVM,
absolutely all public APIs from inside your process will end up being
used in a context in which multiple threads are using these APIs at
the same time. It's best practice for all public APIs (all components
in your Cake for example) to be designed as thread-safe from the get
go, because you do not want to chase concurrency bugs.

And if a public API is not thread-safe for some reason (like the usual
compromises made in software development), then state this fact in
BOLD CAPITAL LETTERS.

The reason is simple - if an API is not thread-safe, then there's no
way a user of that API can know about the way to synchronize on
it. Example:

```scala
val list = mutable.List.empty[String]
```

Lets say this mutable list is exposed. On what lock is a user supposed
to synchronize? On the list itself? That's not enough, being a pretty
useless lock to have in a larger context. Remember, locks are not
composable and are very error-prone. Never leave the responsibility of
synchronizing for contention on your users.

### 3.7. SHOULD avoid contention on shared reads

Meet
[Amdahl's Law](https://en.wikipedia.org/wiki/Amdahl's_law). Synchronizing
with locks drastically limits the parallelization possible and thus
vertical scalability. Reads are embarrassingly paralellizable, so
avoid at all times doing this:

```scala
def fetch = synchronized { someValue }
```

Come up with better synchronization schemes that does not involve
synchronizing reads, like atomic references or STM. If you aren't able
to do that, then avoid this altogether by using proper abstractions.

### 3.8. MUST evolve the state of actors only in response to messages received from the outside

When using Akka actors, their mutable state should always evolve in
response to messages received from the outside. An anti-pattern that
comes up a lot is this:

```scala
class SomeActor extends Actor {
  private var counter = 0
  private val scheduler = context.system.scheduler
    .schedule(3.seconds, 3.seconds, self, Tick)

  def receive = {
    case Tick =>
      counter += 1
  }
}
```

In the example above the actor schedules a Tick every 3 seconds that
evolves its state. This is an extremely costly mistake. The actor's
behavior becomes totally non-deterministic and impossible to test
right.

If you really need to periodically do something inside an actor, then
that scheduler must not be initialized inside the actor. Take it out.

### 3.9. MUST provide a clearly defined and documented protocol for each component or actor that communicates over async boundaries

A function signature is not enough for documenting the protocol of
problematic components. Especially when talking about communications
over asynchronous boundaries (between threads, between processes on
the network, etc...), the protocol needs a lot of detail on what you
can and cannot rely on.

As a guideline, don't shy away from writing comments and document:

- concurrency and latency concerns
- the proper ordering of calls
- everything that can go wrong

### 3.10. SHOULD avoid having mutable state in persistent actors

If you keep mutable state inside your actors, it makes it harder to
parallelize the workload - actors with a lot of mutable state in them
tend to have problems with horizontal scalability. Always take
horizontal scalability into account and ask yourself - is this
scalable? Could multiple actors of this type run in parallel?

### 3.11. SHOULD always prefer single-producer scenarios

Shared writes are not parallelizable, whereas shared reads are
embarrassingly parallelizable. As a metaphor, 100,000 people can watch
the same soccer game on the same stadium at the same time (reads), but
100,000 people cannot all use the same bathroom (writes). In a
multi-threading scenario, prefer single producer / multi consumer
scenarios. This has the effect of avoiding contention and performance
problems. An app does not scale vertically with multiple producers
pounding on the same resource, because Amdahl's Law.

Checkout [LMAX Disruptor](https://lmax-exchange.github.io/disruptor/).

### 3.12. MUST be mindful of the garbage collector and how unnecessary allocations can kill performance

Don't over allocate resources, unless you need to. We want to avoid
micro optimizations, but always be mindful about the effects
allocations can have on your system.

In the
[words of Martin Thomson](http://www.infoq.com/presentations/top-10-performance-myths),
if you stress the garbage collector, you'll increase the latency on
stop-the-world freezes and the number of such occurrences, with the
garbage collector acting like a GIL and thus limiting performance and
vertical scalability.

Example:

```scala
query.filter(_.someField.inSet(Set(name)))
```

This is a sample that occurred in our project due to a problem with
Slick's API. So instead of a `===` test, the developer chose to do an
`inSet` operation with a sequence of 1 element. This allocation of a
collection of 1 element happens on every method call. Now that's not
good, what can be avoided should be avoided.

Another example:

```scala
someCollection
 .filter(x => Set(a,b,c).contains(x.id))
 .map(_.name)
```

First of all, this creates a Set every single time, on each element of
our collection. Second of all, filter and map can be compressed in one
operation, otherwise we end up with more garbage and more time spent
building the final collection:

```scala
val validIDs = Set(a,b,c)

someCollection.collect {
 case x if validIDs.contains(x.id) =>
   x.name
}
```

A generic example that often pops up, exemplifying useless traversals
and operators that could be compressed:

```scala
collection.filter(bySomething).map(toSomethingElse).filter(again).headOption
```

Also, take notice of your requirements and use the data-structure
suitable for your use-case. You want to build a stack? That's a
`List`. You want to index a list? That's a `Vector`. You want to
append to the end of a list? That's again a `Vector`. You want to push
to the front and pull from the back? That's a `Queue`. You have a set
of things and want to check for membership? That's a `Set`. You have a
list of things that you want to keep ordered? That's a
`SortedSet`. This isn't rocket science, just computer science 101.

We are not talking about extreme micro optimizations here, we aren't
even talking about something that's Scala, or FP, or JVM specific
here, but be mindful of what you're doing and try to not do
unnecessary allocations, as it's much harder fixing it later.

### 3.13. MUST NOT hardcode the thread-pool / execution context

This is a general design issue related to the project as a whole, but don't do this:

```scala
import scala.concurrent.ExecutionContext.Implicits.global

def doSomething: Future[String] = ???
```

Tight coupling between the execution context and your logic is not
good and that import is tight-coupling, especially since in the
context of a Play2 application you need to use a
[different thread-pool](https://www.playframework.com/documentation/2.3.x/ThreadPools).

Just pass the ExecutionContext around as an implicit parameter. It's
idiomatic and acceptable this way:

```scala
def doSomething(implicit ec: ExecutionContext): Future[String] = ???
```
