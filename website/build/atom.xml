<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bionic Spirit</title>
  <subtitle>Building Stuff, Having Fun, Craving Profit</subtitle>
  <id>http://bionicspirit.com</id>
  <link href="https://www.bionicspirit.com"/>
  <link href="https://www.bionicspirit.com/atom.xml" rel="self"/>
  <updated>2012-11-07T00:00:00Z</updated>
  <author>
    <name>Alexandru Nedelcu</name>
  </author>
  <entry>
    <title>Notes On Javascript Client-side Development</title>
    <link rel="alternate" href="/blog/2012/11/07/notes-javascript-development.html"/>
    <id>http://bionicspirit.com/blog/2012/11/07/notes-javascript-development.html</id>
    <published>2012-11-07T00:00:00Z</published>
    <updated>2012-11-07T00:00:00Z</updated>
    <author>
      <name>Alexandru NEdelcu</name>
    </author>
    <summary type="html">&lt;img class="right" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="230" height="194" src="../../assets/img/javascript_logo-19c4522c.jpg" /&gt;
Client-side Javascript development can be quite overwhelming, even for
senior developers. I'm describing here what I did in a recent piece of
client-side functionality to keep my sanity. This interface I'm
</summary>
    <content type="html">&lt;p&gt;&lt;img class="right" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="230" height="194" src="../../assets/img/javascript_logo-19c4522c.jpg" /&gt;
Client-side Javascript development can be quite overwhelming, even for
senior developers. I&amp;#39;m describing here what I did in a recent piece of
client-side functionality to keep my sanity. This interface I&amp;#39;m
talking about is served on mobile-phones, so it must be pretty
bloat-free, adding salt over injury.&lt;/p&gt;

&lt;h2&gt;Dealing with modules, packaging and minifying&lt;/h2&gt;

&lt;p&gt;This is probably my biggest gripe with Javascript, that you can&amp;#39;t
simply &lt;code&gt;require(&amp;quot;some.namespace&amp;quot;)&lt;/code&gt; without extra glue and tricks. This
is a limitation of the browser, as such operations would have to be
executed asynchronously, requiring tedious callbacks and because of
bandwidth constraints you may want to serve everything in a single
optimized and gzipped JS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://brunch.io/"&gt;Brunch.io&lt;/a&gt;&lt;/strong&gt; is an awesome tool that helps you
do that. You split your project in multiple files, then Brunch can do
the assembling for you. To have modules in your project (splitting it
in several files), Brunch works with the
&lt;a href="http://wiki.commonjs.org/wiki/Modules/1.1"&gt;CommonJS modules&lt;/a&gt;
interface. All that means is that your Javascript files will end-up
looking like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// for importing another module&lt;/span&gt;
&lt;span class="nx"&gt;utils&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;require&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;path/to/utils&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;generateRandomString&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;userAgent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;navigator&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt; 
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;rnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Math&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;random&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100000000&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;utils&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;md5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;userAgent&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nx"&gt;rnd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// exporting function for consumption from other modules&lt;/span&gt;
&lt;span class="nx"&gt;modules&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;export&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;generateRandomString&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;generateRandomString&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Building changes and seeing them in your browser works really fast, as
Brunch can watch for changes in real-time and also exposes a built-in
server. So Brunch can take care of packaging for all your modules in a
single JS file, also minimizing for production if you want. The
workflow is pretty sweat, the configuration simple.&lt;/p&gt;

&lt;h2&gt;Dealing with Javascript&amp;#39;s Syntax Quirks&lt;/h2&gt;

&lt;p&gt;Javascript is a capable language exposed by an awful syntax and
plagued by incompatibilities - did you know that placing extra commas
or other punctuation will cause syntax errors in older browsers? So
it&amp;#39;s not just about API incompatibilities, the syntax itself can lead
to surprises.&lt;/p&gt;

&lt;p&gt;Brunch can be configured to check your code with
&lt;a href="http://www.jshint.com/"&gt;JSHint&lt;/a&gt;, which is a Linter that can check for
syntax errors and you can use it to force upon yourself and your team
certain best practices. It has a lot of
&lt;a href="http://www.jshint.com/docs/"&gt;configuration options&lt;/a&gt; and for instance
it can trigger errors on uninitialized variables and other
tremendously useful stuff.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve used &lt;a href="http://coffeescript.org/"&gt;CoffeeScript&lt;/a&gt; as Brunch can work
with any language, with the proper plugin. I preferred CoffeeScript
because I develop in a more functional style and CoffeeScript has a
lighter syntax for anonymous functions, plus some other fixes to
Javascript, like &amp;ldquo;class&amp;rdquo; or the fat-arrow that binds the defined
function to the current &lt;code&gt;this&lt;/code&gt; (tremendously useful). I coupled
CoffeeScript with &lt;a href="http://www.coffeelint.org/"&gt;CoffeeLint&lt;/a&gt; and for
instance I disabled the implicit braces when declaring object
literals, as I hate that syntax and don&amp;#39;t want to get sucked into
it. What I really wanted however was
&lt;a href="http://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;, which is like
Javascript, but with nice add-ons. Unfortunately it&amp;#39;s too immature and
so
&lt;a href="https://twitter.com/brunch/status/253571565923467264"&gt;it isn&amp;#39;t included by Brunch&amp;#39;s authors yet&lt;/a&gt;,
but it probably will be at some point. &lt;/p&gt;

&lt;h2&gt;Dealing with Async Events&lt;/h2&gt;

&lt;p&gt;Many people use &lt;a href="http://backbonejs.org/"&gt;Backbone.js&lt;/a&gt; or things based
on it. What Backbone gives you, besides a structure for your app with
controllers and models, it also gives you a foundation for using the
&lt;a href="http://en.wikipedia.org/wiki/Observer_pattern"&gt;Observer pattern&lt;/a&gt;. So
your app initiates events that produce data and in response to user
actions or new data, you have to update stuff.&lt;/p&gt;

&lt;p&gt;However my use-case was simple (the interface can be described by a
state-machine, without many things going on as far as the UI is
concerned). And &lt;em&gt;I absolutely hate&lt;/em&gt; this consumer/producer model with
listeners, because I can&amp;#39;t really wrap my head around it even for the
simplest of examples, as this model was really designed for usage
inside an IDE, where you can right-click on components and see all the
registered listeners for certain events.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/kriskowal/q"&gt;The Q library&lt;/a&gt;&lt;/strong&gt; - is one library
I&amp;#39;m using for dealing with &lt;em&gt;future&lt;/em&gt; responses (a promise for a
response that may be available at a later time) and for avoiding the
&lt;a href="http://calculist.org/blog/2011/12/14/why-coroutines-wont-work-on-the-web/"&gt;Pyramid of Doom&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You see, many people choose something like Backbone because it makes
asynchronicity easier to deal with. I chose against it by building
small functions that compose, binding them together with Q. Works
great for small projects, even if the asynchronous calls are difficult
to compose, because working with promises makes that easy - note that
&lt;a href="https://gist.github.com/3889970"&gt;jQuery&amp;#39;s implementation is broken&lt;/a&gt;,
so don&amp;#39;t use it, just wrap jQuery&amp;#39;s ajax calls in a Q promise.&lt;/p&gt;

&lt;p&gt;Also, the great thing about preferring small functions with
referential transparency that compose is that testing becomes so much
easier. Brunch can also run your tests and you can use something like
&lt;a href="http://chaijs.com/"&gt;Chai&lt;/a&gt; or other helpers for testing nirvana.&lt;/p&gt;

&lt;p&gt;This doesn&amp;#39;t mean that Backbone and data flows with something like Q
can&amp;#39;t be used together. I can certainly see myself working with
Backbone for larger projects.&lt;/p&gt;

&lt;h2&gt;Going Mobile&lt;/h2&gt;

&lt;p&gt;Other libraries I&amp;#39;m using are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://underscorejs.org/"&gt;Underscore.js&lt;/a&gt;, which provides much
needed API additions, some of which are available in latest versions
of JS, but not on older browsers. You definitely need this if you
like to program in a more functional style&lt;br&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://zeptojs.com/"&gt;Zepto&lt;/a&gt; instead of jQuery, because this
interface is served on mobile phones and jQuery is pretty
bloated. I&amp;#39;ll also probably switch to
&lt;a href="http://www.jqmobi.com/"&gt;jqMobi&lt;/a&gt; because it&amp;#39;s even lighter.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In regards to jQuery alternatives, well jQuery adds like 33KB of
gzipped Javascript to my download. This may not be an issue in a
browser that has jQuery already cached, but in a fresh
&lt;a href="http://developer.android.com/reference/android/webkit/WebView.html"&gt;WebView&lt;/a&gt;
it&amp;#39;s really big for normal 3G connections. My final JS file that gets
downloaded only has 20KB of gzipped JS, in total, including the
libraries I mentioned and it won&amp;#39;t grow over 30KB. In combination with
a CDN like &lt;a href="http://aws.amazon.com/cloudfront/"&gt;CloudFront&lt;/a&gt; that&amp;#39;s
still reasonable.&lt;/p&gt;

&lt;p&gt;The ideal would be to use something like the
&lt;a href="https://developers.google.com/closure/"&gt;Google Closure&lt;/a&gt; compiler,
which can do tree-shaking, getting rid of pieces of code you don&amp;#39;t
need. However, the code has to follow the Closure conventions,
otherwise it will behave no better than a normal minifier and
libraries like jQuery don&amp;#39;t follow them. That&amp;#39;s why I have high hopes
for &lt;a href="http://www.typescriptlang.org/"&gt;TypeScript&lt;/a&gt;, because it has a
built-in dependency system and you can annotate with types even
outside libraries, so a tree-shaker could work for popular libraries
if there&amp;#39;s enough interest, even if the library in question does not
follow any conventions. I also thought about using
&lt;a href="https://github.com/clojure/clojurescript"&gt;ClojureScript&lt;/a&gt;, which emits
Closure-compatible Javascript, but I&amp;#39;m not familiar enough with the
language, so maybe some other day :-)&lt;/p&gt;

&lt;h2&gt;As a conclusion&lt;/h2&gt;

&lt;p&gt;Keep things simple and work with tools provided by the Node.js
community, because that&amp;#39;s where the real action is.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>On Scala, Functional Programming and Type-Classes</title>
    <link rel="alternate" href="/blog/2012/11/02/scala-functional-programming-type-classes.html"/>
    <id>http://bionicspirit.com/blog/2012/11/02/scala-functional-programming-type-classes.html</id>
    <published>2012-11-02T00:00:00Z</published>
    <updated>2012-11-02T00:00:00Z</updated>
    <author>
      <name>Alexandru NEdelcu</name>
    </author>
    <summary type="html">I've been following the excellent Coursera course on
[Functional Programming Principles in Scala](https://www.coursera.org/course/progfun)
led by Martin Odersky. This was not my first encounter with Scala as
I've been using it including for my day job. In parallel, because I
</summary>
    <content type="html">&lt;p&gt;I&amp;#39;ve been following the excellent Coursera course on
&lt;a href="https://www.coursera.org/course/progfun"&gt;Functional Programming Principles in Scala&lt;/a&gt;
led by Martin Odersky. This was not my first encounter with Scala as
I&amp;#39;ve been using it including for my day job. In parallel, because I
felt the need for a Javascript replacement, I&amp;#39;ve been learning Clojure
too, because of the excellent ClojureScript.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve fallen in love with both and I can&amp;#39;t really pick a favorite. For
what is worth this document represents my (rookie) experience with
Scala, being complete yack shaving on my part, or you could call it
the intellectual masturbation of a fool.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; as if the article wasn&amp;#39;t long enough, I&amp;#39;ve added to it some
more stuff (like a couple of times :-)&lt;/p&gt;

&lt;h2&gt;1. Functional Programming for the Win&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s not a silver bullet, but on the whole it&amp;#39;s awesome. You really
have to experience it, while leaving aside the preconceptions and
biases you&amp;#39;ve been building up by honing those imperative skills for
years. Students learn functional programing more easily, fresh as they
are, otherwise the learning experience can be painful.&lt;/p&gt;

&lt;p&gt;But we haven&amp;#39;t evolved much in the last 200,000 years and so our brain
finds pleasure mostly in the things that appeal to our inner-animal,
being interested in the means to get laid, eat food, sleep and escape
wild beasts. Learning can be a pleasure, but not when you&amp;#39;re venturing
to unfamiliar grounds, so if you start, hang in there.&lt;/p&gt;

&lt;p&gt;We need some definitions though. Functional programming &amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;deals with computation by evaluating functions with
&lt;a href="http://en.wikipedia.org/wiki/Referential_transparency_(computer_science"&gt;referential transparency&lt;/a&gt;
as a property (i.e. functions behave like mathematical functions,
for the same input you must always get the same output)&lt;/li&gt;
&lt;li&gt;the final output of a computation is composed out of multiple
transformations of your input data, instead of building that
solution by mutating state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A functional programming language is one that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;treats functions as first-class objects, meaning that dealing with
higher-order functions is not only possible, but comfortable&lt;br&gt;&lt;/li&gt;
&lt;li&gt;gives you the tools needed for &lt;em&gt;composing&lt;/em&gt; functions and types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By that definition languages like Ruby and Javascript can be
considered decent functional languages and they are. However I would
also add:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;has a rich collection of immutable/persistent data-structures (in
general if you want to assess the viability of any programming
language, disregarding the platform it runs on, it&amp;#39;s perfectly
characterized by its basic primitives and data-structures;
e.g. think of C++, Java, or Javascript)&lt;br&gt;&lt;/li&gt;
&lt;li&gt;exposes a type-system that deals efficiently with the
&lt;a href="http://en.wikipedia.org/wiki/Expression_problem"&gt;expression problem&lt;/a&gt;; 
Rich Hickey calls this &amp;ldquo;&lt;em&gt;polymorphism a la carte&lt;/em&gt;&amp;rdquo;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can also go to the extreme of specifying that all side-effects
must be modeled with monadic types, but that&amp;#39;s a little too much IMHO,
as only one mostly-mainstream language fits that bill (Haskell).&lt;/p&gt;

&lt;h2&gt;2. Is Scala a Functional Programming Language?&lt;/h2&gt;

&lt;p&gt;Yes it is. You only need to follow the excellent (I mentioned above)
&lt;a href="https://www.coursera.org/course/progfun"&gt;Coursera course&lt;/a&gt; and solve
the assignments to realize that Scala is indeed a very FP
language. The course was a little short, but a follow-up is
planned. Now move along &amp;hellip;&lt;/p&gt;

&lt;h2&gt;3. Polymorphism À la Carte&lt;/h2&gt;

&lt;p&gt;This is a term that I&amp;#39;ve been hearing from Rich Hickey, when he talks
about open type-systems, referring primarily to Clojure&amp;#39;s Protocols
and Haskell&amp;#39;s Type-Classes.&lt;/p&gt;

&lt;p&gt;These mechanisms for polymorphisms are good solutions for dealing with
the expression problem being in stark contrast with Object-Oriented
Programming as we&amp;#39;ve come to know it from Java and C++.&lt;/p&gt;

&lt;p&gt;OOP is often a closed type-system, especially as used in static
languages. Adding new classes into an existing hierarchy, adding new
functions that operate on the whole hierarchy, adding new abstract
members to interfaces, making built-in types to behave in a certain
way - all of these cases are cumbersome.&lt;/p&gt;

&lt;p&gt;Haskell deals with it through
&lt;a href="http://en.wikipedia.org/wiki/Type_class"&gt;Type Classes&lt;/a&gt;. Clojure deals
with this through
&lt;a href="http://en.wikipedia.org/wiki/Multiple_dispatch"&gt;Multi-Methods&lt;/a&gt; and
protocols, protocols being the dynamic equivalent for type-classes in
a dynamic type-system.&lt;/p&gt;

&lt;h2&gt;4. Yes Virginia, Scala has Type-Classes&lt;/h2&gt;

&lt;p&gt;So what&amp;#39;s a type class? It&amp;#39;s like an interface in Java, except that
you can make any existing types conform to it without modifying the
implementation of that type.&lt;/p&gt;

&lt;p&gt;As an example, what if we wanted a generic function that can add
things up &amp;hellip; you know, like a &lt;code&gt;foldLeft()&lt;/code&gt; or a &lt;code&gt;sum()&lt;/code&gt;, but rather
than specifying how to fold, you want the environment to know how to
do that for each particular type.&lt;/p&gt;

&lt;p&gt;There are several problems with doing this in Java or C#:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;there is no interface defined for &amp;ldquo;&lt;code&gt;+&lt;/code&gt;&amp;rdquo; on types that support addition
(like Integers, BigInteger, BigDecimal, floating-point numbers,
strings, etc&amp;hellip;)&lt;/li&gt;
&lt;li&gt;we need to start from some &lt;em&gt;zero&lt;/em&gt; (the list of elements you want to
fold could be empty)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Well, you can define a type-class, like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;-T&lt;/span&gt;, &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;elem&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;R&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But wait, isn&amp;#39;t this just a simple Java-like interface? Well yes, yes
it is. That&amp;#39;s the awesome thing about Scala - in Scala every instance
is an object and every type is a class.  &lt;/p&gt;

&lt;p&gt;So what makes this interface a type-class?
&lt;a href="http://ropas.snu.ac.kr/~bruno/papers/TypeClasses.pdf"&gt;Objects in combination with implicit parameters&lt;/a&gt;
of course. Let&amp;#39;s look at how we&amp;#39;ll implement our &lt;code&gt;sum()&lt;/code&gt; function that
uses this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;])(&lt;/span&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="n"&gt;adder&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foldLeft&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;adder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zero&lt;/span&gt;&lt;span class="o"&gt;)((&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;adder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So if the Scala compiler can find an implicit &lt;code&gt;CanFold&lt;/code&gt; in scope
that&amp;#39;s defined for type A, then it uses it to return a type B. This is
awesomeness on multiple levels:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the implicit defined in scope for type A are establishing the return
type B&lt;br&gt;&lt;/li&gt;
&lt;li&gt;you can define a CanFold for any type you want, integers, strings,
lists, whatever&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Implicits are also scoped so you have to import them. If you want
default implicits for certain types (globally available) you have to
define them in the companion object of the trait &lt;code&gt;CanFold&lt;/code&gt;, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// default implementation for integers&lt;/span&gt;

  &lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;CanFoldInts&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;, &lt;span class="kt"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;acc&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Long&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;acc&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And usage is as expected:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// notice how the result of summing Integers is a Long&lt;/span&gt;
&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; Long = 6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m not going to lie to you as this stuff gets hard to learn and while
learning how to do this, you&amp;#39;ll end-up pulling your hair out wishing
for dynamic typing where all of this is not a concern. However you
should distinguish between &lt;em&gt;hard&lt;/em&gt; and &lt;em&gt;complex&lt;/em&gt; (the former is
relative and subjective, the later is absolute and objective).&lt;/p&gt;

&lt;p&gt;One issue with our implementation is when you want to provide a
default implementation for base types. That&amp;#39;s why we&amp;#39;ve made the type
parameter T &lt;em&gt;contravariant&lt;/em&gt; in the &lt;code&gt;CanFold[-T,R]&lt;/code&gt; definition. What
contravariance means is precisely this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;inherits&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt;
&lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="n"&gt;inherits&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;, &lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;,&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;,&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This allows us to define a CanFold for any Traversable and it will
work for any Seq / Vector / List and so on.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;CanFoldSeqs&lt;/span&gt; 
&lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So this can sum up any kind of &lt;code&gt;Traversable&lt;/code&gt;. The problem is that it
loses the type parameter in the process:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; Traversable[Any] = List(1, 2, 3, 4, 5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the reason for why I mentioned this is hard is because after
pulling my hair out, I had to
&lt;a href="http://stackoverflow.com/questions/13176697/problems-with-contravariance-in-scala"&gt;ask on StackOverflow&lt;/a&gt;
on how to get a &lt;code&gt;Traversable[Int]&lt;/code&gt; back. So instead of a concrete
implicit object, you can provide an implicit &lt;code&gt;def&lt;/code&gt; that can do the
right thing, helping the compiler to see the type embedded in that
container:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;CanFoldSeqs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; Traversable[Int] = List(1, 2, 3, 4, 5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Implicits are even more flexible than meets the eye. Apparently the
compiler can also work with functions that return the instance you
want, instead of concrete instances. As a side-note, what I did above
is difficult to do, even in Haskell, because sub-typing is involved,
although doing it in Clojure is easy because you simply do not care
about the returned types.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NOTE: the above code is not bullet-proof, as conflicts can happen&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Say in addition to a CanFold[Traversable,_] you also define something
for Sets (which are also traversable) &amp;hellip;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;CanFoldSets&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate a conflict error and I&amp;#39;m still looking for a
solution that makes the compiler use the most specific type it can
find, while still keeping that nice contra-variance we&amp;#39;ve got going
(hey, I&amp;#39;m just getting started). The error message looks like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;both method CanFoldSeqs in object ...
and method CanFoldSets in object ...
match expected &lt;span class="nb"&gt;type &lt;/span&gt;CanFold&lt;span class="o"&gt;[&lt;/span&gt;Set&lt;span class="o"&gt;[&lt;/span&gt;Int&lt;span class="o"&gt;]&lt;/span&gt;, B&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s not bad at all as far as error messages go. You could just
avoid being too general and in case you want to override the default
behavior in the current scope, you can shadow the conflicting
definitions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;{&lt;/span&gt; 
  &lt;span class="c1"&gt;// shadowing the more general definition &lt;/span&gt;
  &lt;span class="c1"&gt;// (notice the block, representing its own scope, &lt;/span&gt;
  &lt;span class="c1"&gt;//  so shadowing is local)&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;CanFoldSeqs&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;

  &lt;span class="c1"&gt;// this now works&lt;/span&gt;
  &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;::&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;//=&amp;gt; Set[Int] = Set(1, 2, 3, 4)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Another solution that &lt;code&gt;CanBuildFrom&lt;/code&gt; uses is to define implicits on
multiple levels, such that some implicits take priority over others,
likes so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;trait&lt;/span&gt; &lt;span class="nc"&gt;LowLevelImplicits&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;CanFoldSeqs&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;LowLevelImplicits&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// higher precedence over the above&lt;/span&gt;
  &lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nc"&gt;CanFoldSets&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CanFold&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;],&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;zero&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And yeah, it will do the right thing. A little ugly though, as it
means you have to have specific knowledge about how these implicits
are prioritized. In essence, this is heavy stuff already and a little
complex too. Good design can make for kick-ass libraries though.&lt;/p&gt;

&lt;h2&gt;5. Scala&amp;#39;s Collections Library is Awesome&lt;/h2&gt;

&lt;p&gt;So what does the above buy you anyway? The following are some examples
from Scala&amp;#39;s own collections library.&lt;/p&gt;

&lt;p&gt;You can sum things up in sequences, as long as you have an
implementation of type-class &lt;code&gt;Numeric[T]&lt;/code&gt; in scope:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; Int = 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can sort things, as long as you have an implementation of
type-class &lt;code&gt;Ordering[T]&lt;/code&gt; in scope:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;c&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;e&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;b&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;sorted&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; List[java.lang.String] = List(a, b, c, d, e)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A collection will always do the right thing, returning the same kind
of collection when doing a &lt;code&gt;map()&lt;/code&gt; or a &lt;code&gt;flatMap()&lt;/code&gt; or a &lt;code&gt;filter()&lt;/code&gt;
over it. For instance to revert the keys and values of a Map:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; scala.collection.immutable.Map[Int,Int] = Map(2 -&amp;gt; 1, 4 -&amp;gt; 3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, if the function you give to &lt;code&gt;map()&lt;/code&gt; above does not return a
pair, then the result is converted to an iterable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; scala.collection.immutable.Iterable[Int] = List(4, 8)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even more awesome than this, take for example the &lt;code&gt;BitSet&lt;/code&gt; which is a
compressed &lt;code&gt;Set&lt;/code&gt; of integers (so it&amp;#39;s optimized for storing integers):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;collection.immutable.BitSet&lt;/span&gt;

&lt;span class="nc"&gt;BitSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; BitSet = BitSet(3, 4, 5, 6)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mapping over it still returns a BitSet, as expected. However, look at
what happens when the mapping function returns Strings:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;BitSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;number &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; Set[java.lang.String] = Set(number 1, number 2, number 3, number 4)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, it did the right thing, because you can&amp;#39;t store Strings in a
BitSet, as BitSets are for integers. So it returned a plain Set of
strings. How is this possible, you may ask?&lt;/p&gt;

&lt;p&gt;The answer is in the
&lt;a href="http://www.scala-lang.org/api/current/scala/collection/generic/CanBuildFrom.html"&gt;CanBuildFrom&lt;/a&gt;
pattern. The signature of &lt;code&gt;map()&lt;/code&gt; used above is a bit of a mouthful:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;B&lt;/span&gt;, &lt;span class="kt"&gt;That&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="n"&gt;bf&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;CanBuildFrom&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;BitSet&lt;/span&gt;, &lt;span class="kt"&gt;B&lt;/span&gt;, &lt;span class="kt"&gt;That&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;That&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, similar to my example with &lt;code&gt;CanFold&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the compiler takes type B from the mapping function &lt;code&gt;f: (Int) =&amp;gt; B&lt;/code&gt; that&amp;#39;s provided as an argument&lt;/li&gt;
&lt;li&gt;searches for an implicit in scope of type &lt;code&gt;CanBuildFrom[BitSet, B, _]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;the return type is established as the third type parameter of the implicit that is used&lt;/li&gt;
&lt;li&gt;the actual building of the result is externalized; the BitSet does
not need to know how to build Sets of Strings&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So basically, if you define your own types like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;People&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;Traversable&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="cm"&gt;/* yada yada... */&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then if you want the mapping (or flatMapping) of a BitSet to return a
&lt;code&gt;People&lt;/code&gt; collection in case the function returns &lt;code&gt;Person&lt;/code&gt;, then you
have to implement an implicit object of this type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;CanBuildFrom&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;BitSet&lt;/span&gt;, &lt;span class="kt"&gt;Person&lt;/span&gt;, &lt;span class="kt"&gt;People&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then this will work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;BitSet&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Person&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; People = People(Person(1), Person(2), Person(3), Person(4))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So what&amp;#39;s great is that the provided implicits for &lt;code&gt;CanBuildFrom&lt;/code&gt; can
be overridden by your own implementations and you can provide
CanBuildFrom implementations for your own types, etc&amp;hellip;&lt;/p&gt;

&lt;p&gt;(as a side note, Clojure cannot do conversions based on the given
mapping function, even if the Seq protocol is awesome nonetheless and
doing something akin to CanBuildFrom in Haskell is difficult from what
I&amp;#39;ve been told)&lt;/p&gt;

&lt;p&gt;If you want a lazy
&lt;a href="http://www.scala-lang.org/api/current/scala/collection/Iterator.html"&gt;Iterator&lt;/a&gt;
(like
&lt;a href="https://github.com/alexandru/shifter/blob/master/db/src/main/scala/shifter/db/Sql.scala#L83"&gt;if you want to wrap JDBC result-sets&lt;/a&gt;),
you only need to wrap the JDBC result-set in an Iterator by
implementing &lt;code&gt;next()&lt;/code&gt; and &lt;code&gt;hasNext&lt;/code&gt;. You then get
&lt;code&gt;filter()&lt;/code&gt;/&lt;code&gt;map()&lt;/code&gt;/&lt;code&gt;flatMap()&lt;/code&gt; for free, but with a twist - Iterators
are lazy and can only be traversed once. Applying filter/map/flatMap
will not traverse the Iterator, being lazy operations. To convert this
into a lazy sequence that also memoizes (stores) the results for
multiple traversals, you only need to do &lt;code&gt;iterator.toStream&lt;/code&gt;, or to
get all the results at once &lt;code&gt;iterator.toList&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.scala-lang.org/api/current/scala/collection/immutable/Stream.html"&gt;Streams&lt;/a&gt;
in Scala are lazy sequences. You can easily implement infinite lists
of things, like Fibonacci numbers or the digits of PI or
something. But Streams are not the only lazy collections, Scala also has
&lt;a href="http://www.scala-lang.org/docu/files/collections-api/collections_42.html"&gt;Views&lt;/a&gt;
and you can transform any collection into a corresponding view, including Maps. &lt;/p&gt;

&lt;p&gt;But that&amp;#39;s not all. Scala also has implementations of collections that
do things in parallel. Here&amp;#39;s how to calculate if a number is prime,
sequentially:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math._&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isPrime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;toInt&lt;/span&gt;
  &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you have multiple cores around doing nothing, here&amp;#39;s how to
calculate it by putting those extra cores at work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;isPrime&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;)).&lt;/span&gt;&lt;span class="n"&gt;toInt&lt;/span&gt;
  &lt;span class="o"&gt;!&lt;/span&gt; &lt;span class="n"&gt;range&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;par&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exists&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice the difference?&lt;/p&gt;

&lt;h2&gt;6. Is this complex?&lt;/h2&gt;

&lt;p&gt;I mentioned above that this stuff is not complex, it&amp;#39;s just
hard. Scala does have complexities when it comes to really advanced
use-cases, as can be seen in this article:
&lt;a href="http://yz.mit.edu/wp/true-scala-complexity/"&gt;True Scala Complexity&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It&amp;#39;s worth mentioning however that, as Martin Odersky noted in the
Hacker News thread of that article, the author tries to accomplish
something that&amp;#39;s not possible in most languages out there, while a
solution is still possible in Scala (albeit with small limitations).&lt;/p&gt;

&lt;h2&gt;7. Are OOP Features Getting in the Way?&lt;/h2&gt;

&lt;p&gt;I happen to disagree and I actually love the blend of OOP with
functional features. Martin Odersky claims that OOP is orthogonal to
functional programming. But if you pay attention, you&amp;#39;ll notice it&amp;#39;s
not only orthogonal, but complementary in an elegant way.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m indicating below instances where I think OOP helps, but as a clear
example of what the combination can do, consider Scala&amp;#39;s
&lt;a href="http://www.scala-lang.org/api/current/scala/collection/immutable/Set.html"&gt;Set&lt;/a&gt;. A
&lt;code&gt;Set[T]&lt;/code&gt; can be viewed as a function that takes a parameter of type T
and returns either True if the value is in the Set, or False
otherwise. This means you can do this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;primaryColors&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Set&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;green&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;colors&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;red&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;purple&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;yellow&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;vanilla&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;black&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;blue&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;colors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;primaryColors&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is possible because our set is in fact a subtype of
&lt;code&gt;Function1[String, Boolean]&lt;/code&gt;, so you can pass it to any higher-order
function that expects that signature.&lt;/p&gt;

&lt;p&gt;But the similarity goes deeper than simple resemblance and syntactic
sugar. If you remember from school, a mathematical Set can be perfectly
described by what is called a
&lt;a href="http://en.wikipedia.org/wiki/Indicator_function"&gt;characteristic function&lt;/a&gt;,
so Sets are interchangeable with functions in mathematics.&lt;/p&gt;

&lt;p&gt;This means operations on Sets like &lt;em&gt;unions&lt;/em&gt;, &lt;em&gt;intersections&lt;/em&gt;,
&lt;em&gt;complements&lt;/em&gt;, &lt;em&gt;Cartesian products&lt;/em&gt; and so on can be replaced with
operations on functions and that&amp;#39;s exactly what
&lt;a href="http://en.wikipedia.org/wiki/Boolean_algebra"&gt;boolean algebra&lt;/a&gt; is
about. In mathematical terms, these mathematical structures (sets and
functions that take an argument and return 0/1) are equivalent
(indistinguishable) because there exists an isomorphism between them,
savvy? :-)&lt;/p&gt;

&lt;p&gt;And I don&amp;#39;t know how Haskell handles this for &lt;code&gt;Data.Set&lt;/code&gt;, or if it
handles it at all, but OOP subtyping seems like the easiest way to
model something like this in a static language &amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for one, the hierarchy is simple to understand, simple to model, as subtyping is something that OOP simply does -
you just inherit from &lt;code&gt;Function1[-T, +R]&lt;/code&gt; - and you&amp;#39;re done&lt;/li&gt;
&lt;li&gt;downcasting to a function is something OOP simply does - you just
pass your object to something that expects a function and you can forget the original type of that value&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is just a small and insignificant example of course, like most
examples I&amp;#39;m giving here, but to me properly done OOP (where every
type is modeled with classes and every value is some kind of object)
just feels right &amp;hellip; I like this principle of &amp;ldquo;&lt;em&gt;turtles all the way
down&lt;/em&gt;&amp;rdquo;, even if you could probably point to things that aren&amp;#39;t
&amp;ldquo;turtles&amp;rdquo;, but this also happens in languages that are the epitome of
kick-ass turtles-recursion, like Scheme or Smalltalk.&lt;/p&gt;

&lt;h2&gt;8. Scala versus Haskell&lt;/h2&gt;

&lt;p&gt;Scala&amp;#39;s static type-system is sometimes less expressive than that of
Haskell. In particular Haskell supports
&lt;a href="https://en.wikibooks.org/wiki/Haskell/Polymorphism#Higher_rank_types"&gt;rank-2 polymorphism&lt;/a&gt;,
while Scala only rank-1. One point that Scala wins over Haskell is
definitely this one:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;flatMap&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Option&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;//=&amp;gt; List[Int] = List(1, 2, 3, 4, 5)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Doing the above in Haskell (using the &lt;code&gt;bind&lt;/code&gt; operator) triggers a
compile-time error, because the return type of the mapping function is
expected to be of type &lt;code&gt;List&lt;/code&gt; and the &lt;code&gt;Maybe&lt;/code&gt; type (the equivalent of
&lt;code&gt;Option&lt;/code&gt;) is not a &lt;code&gt;List&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; in Scala is not a collection, but it is &lt;em&gt;viewable&lt;/em&gt; as a
collection of either 0 or 1 elements. As a consequence, because of
good design decisions, the monadic types defined in Scala&amp;#39;s collection
library are more composable. &lt;/p&gt;

&lt;p&gt;EDIT: this example is simple and shallow. As pointed out in the
comments, it&amp;#39;s easy to make the conversion by yourself, however I&amp;#39;m
talking about the design choices of Scala&amp;#39;s library and the
awesomeness of implicits. As a result, the standard monadic types
provided by Scala (all collections, Futures, Promises, everything that
has a filter/map/flatMap, etc&amp;hellip;) are inherently more composable and
friendlier.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s also worth pointing out that Scala&amp;#39;s collections library is so
awesome precisely because OOP plays a part and there are cases where
doing similar things in Haskell require experimental GHC extensions.&lt;/p&gt;

&lt;p&gt;For instance, all of the collections in Scala share code in one way or
another. If you want to build your own
&lt;a href="http://www.scala-lang.org/api/current/scala/collection/Traversable.html"&gt;Traversable&lt;/a&gt;
you only have to implement that trait with the abstract &lt;code&gt;foreach()&lt;/code&gt;,
but you get all other methods, including
&lt;code&gt;filter()&lt;/code&gt;/&lt;code&gt;map()&lt;/code&gt;/&lt;code&gt;flatMap()&lt;/code&gt; for free. As a side-effect your
collection will be a monadic type by default.&lt;/p&gt;

&lt;p&gt;Haskell is lazy by default. This is good for many problems. In Scala
lazyness is a choice. In Haskell this lazyness is awesome, but in my
experience while playing with it, it gets very hard to reason about
the resulting performance. Sometimes it&amp;#39;s fast without you doing
anything, other times - well, profiling and fixing performance issues
in Haskell is not for mortals. Scala is more predictable, being strict
and lazy when needed. It also has at its disposal the awesome JVM
ecosystem for profiling and monitoring.&lt;/p&gt;

&lt;h2&gt;9. Scala versus F# / Ocaml&lt;/h2&gt;

&lt;p&gt;F# is good if you want to use C# 2020. But F# has rough edges
inherited from Ocaml, while it has not inherited all the benefits. F#
has nominative typing, instead of structural typing for OOP (as
Ocaml). And you really start wishing for an ad-hoc polymorphism
mechanism in which the types are open.&lt;/p&gt;

&lt;p&gt;In regards to how one implements &lt;code&gt;CanFold&lt;/code&gt; F# takes the crown as the
ugly ducklin&amp;#39; as it follows the (really screwed) C# conventions of
defining &amp;ldquo;&lt;code&gt;+&lt;/code&gt;&amp;rdquo; as static functions on classes (a reminiscence of C++
btw), so even if you know that a T is an Integer, you can&amp;#39;t sum 2
Integers based on the interface definition alone, because the compiler
cannot make the connection to &lt;code&gt;T + T&lt;/code&gt;, as in OOP interfaces/subtyping
only applies to instances, not classes and &amp;ldquo;static members&amp;rdquo;. This is
why they had to extend the language. Take a look at the signature for
&lt;code&gt;List.sum&lt;/code&gt; in F#:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nn"&gt;List&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="kt"&gt;list&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;requires&lt;/span&gt; 
  &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;(+)&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="nc"&gt;T&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="nc"&gt;Zero&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First of all, this is bad from all perspectives, as it uses the
(really fucked up) notion of &amp;ldquo;&lt;em&gt;static members&lt;/em&gt;&amp;rdquo; that should have never
happened in OOP. It&amp;#39;s also not a type-class as it is &lt;em&gt;not open&lt;/em&gt; - you
cannot modify a built-in type to have the required static members,
being the same problem you get with classic OOP inheritance of
interfaces. You also cannot override the implementation, as you&amp;#39;d wish
in certain contexts.&lt;/p&gt;

&lt;p&gt;In Scala there is no such thing as &amp;ldquo;&lt;em&gt;static members&lt;/em&gt;&amp;rdquo;, &amp;ldquo;&lt;code&gt;+&lt;/code&gt;&amp;rdquo;
operations being plain polymorphic instance methods.&lt;/p&gt;

&lt;p&gt;The one thing I really like about
&lt;a href="http://msdn.microsoft.com/en-us/library/dd233212.aspx"&gt;F# are quotations&lt;/a&gt;,
which give you
&lt;a href="http://msdn.microsoft.com/en-us/library/bb308959.aspx"&gt;.NET LINQ&lt;/a&gt;,
with the difference that quotations in F# are more potent than what C#
can do. In simple words, quotations in F# give you the possibility of
repurposing/recompiling pieces of code at runtime (e.g. macros).&lt;/p&gt;

&lt;p&gt;But &lt;a href="http://scalamacros.org/"&gt;macros support&lt;/a&gt; is an upcoming feature
of Scala 2.10, which is already at RC1 and you can play around with
the up-coming &lt;a href="http://slick.typesafe.com/"&gt;Scala version of LINQ&lt;/a&gt;
right now.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ocaml&lt;/strong&gt; goes a long way with its structural typing for OOP. Ocaml
has the most advanced type-inferencer out of the popular functional
languages, being more advanced than the one in Haskell. It&amp;#39;s a potent
language, but sadly it has no equivalent for type-classes.&lt;/p&gt;

&lt;p&gt;The right way to implement &lt;code&gt;CanFold&lt;/code&gt; in Ocaml/SML would be to
explicitly pass a dictionary of pointers around, as described here:
&lt;a href="http://okmij.org/ftp/ML/ML.html#typeclass"&gt;Typeclass overloading and bounded polymorphism in ML&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Scala, unlike Ocaml and F#, does not have 2 type-systems in the same
language, as Scala follows the &amp;ldquo;&lt;em&gt;uniform access
principle&lt;/em&gt;&amp;rdquo;. Type-classes and algebraic data-types are still modeled
by means of OOP classes and objects.&lt;/p&gt;

&lt;p&gt;Why does it matter? If you ever worked with C++ you can understand
this - if OOP is pervasive in your language and not just something
completely optional, then every type in the system should be
(or considered) polymorphic and extending from some Object,
otherwise you&amp;#39;ll end up with lots and lots of pain. It&amp;#39;s also a matter
of having to make choices.&lt;/p&gt;

&lt;p&gt;In Scala the code is indeed more verbose, but it reduces complexity a
lot because a big part of learning Ocaml is learning when OOP is
appropriate, or not, as you have to pick from the get-go and combining
approaches is very cumbersome.&lt;/p&gt;

&lt;p&gt;Take for instance the definition of an immutable and persistent
List. A List can be defined efficiently as an algebraic data-type,
being either an Empty List, or a Pair of 2 elements, the head and the
tail, right?&lt;/p&gt;

&lt;p&gt;In Ocaml:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="k"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;my_list&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Extremely elegant and simple. And in Scala:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;+T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="nc"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;+t&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What a mouthful.&lt;/p&gt;

&lt;p&gt;One difference should immediately be noticeable, our &lt;code&gt;List&lt;/code&gt; has
covariant behavior, meaning that a &lt;code&gt;List[String]&lt;/code&gt; is also a
&lt;code&gt;List[Any]&lt;/code&gt;, or a &lt;code&gt;List[j.u.HashMap]&lt;/code&gt; is also a
&lt;code&gt;List[j.u.AbstractMap]&lt;/code&gt;. Arrays in Java have the same behavior and
this leads to lots of gotchas, but if our List is immutable, then this
is not a problem, but a bonus. For instance this gives you polymorphic
behavior without needing type parameters or higher-kinded types or
other mechanisms, just plain OOP subtyping relationships:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, that&amp;#39;s not efficient. A much better approach is to make
&lt;code&gt;length()&lt;/code&gt; polymorphic (in the OOP sense), after all &lt;code&gt;length()&lt;/code&gt; is a
defining property of Lists, so there&amp;#39;s no reason for why it shouldn&amp;#39;t
be there:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;sealed&lt;/span&gt; &lt;span class="k"&gt;abstract&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;+T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// abstract definition&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;+T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Nil&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Nothing&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, isn&amp;#39;t that nice? What would it take to turn this into a lazy
list?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;+T&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;lazy&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;length&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;().&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can see how &lt;code&gt;length&lt;/code&gt; hasn&amp;#39;t changed for either &lt;code&gt;List[T]&lt;/code&gt; or for
&lt;code&gt;Nil&lt;/code&gt;, just for &lt;code&gt;Pair&lt;/code&gt;, which makes it a good candidate for OOP. So
why not model this with OOP in Ocaml? Because for algebraic
data-types, the compiler helps you, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; 
   &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Pair&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tail&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; 
   &lt;span class="c1"&gt;//-&amp;gt; oops, no termination&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;//-&amp;gt; output from the compiler ...&lt;/span&gt;
&lt;span class="n"&gt;warning&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;match&lt;/span&gt; &lt;span class="kt"&gt;is&lt;/span&gt; &lt;span class="kt"&gt;not&lt;/span&gt; &lt;span class="kt"&gt;exhaustive!&lt;/span&gt;
&lt;span class="n"&gt;missing&lt;/span&gt; &lt;span class="n"&gt;combination&lt;/span&gt;            &lt;span class="nc"&gt;Nil&lt;/span&gt;

       &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;List&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Int&lt;/span&gt;&lt;span class="o"&gt;])&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                                       &lt;span class="o"&gt;^&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Did I mention Scala also has structural typing if you want it? Yes it
can (albeit, without the awesome type-inferencing that Ocaml is
capable of and it&amp;#39;s mostly based on runtime reflection):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Closeable&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt;&lt;span class="kt"&gt;Unit&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;A&lt;/span&gt;, &lt;span class="kt"&gt;B&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;:&lt;/span&gt; &lt;span class="kt"&gt;Closeable&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;closable&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
  &lt;span class="k"&gt;try&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;closable&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;finally&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;closable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This comparisson isn&amp;#39;t really fair btw, because I&amp;#39;ve been fixating on
issues that Scala does really well. Ocaml is great, however I
personally find it limiting and awkward at the edges of the 2 type
systems it contains. Or maybe I&amp;#39;m just a spoiled brat.&lt;/p&gt;

&lt;h2&gt;10. Static-type versus Dynamic-type Systems&lt;/h2&gt;

&lt;p&gt;Static versus dynamic is what polarizes developers most in separate
camps. It&amp;#39;s like a never-ending flamewar, with healthy dosages of
religiosity.&lt;/p&gt;

&lt;p&gt;At its core, a static type system helps you by providing proof at
compile-time that the types you&amp;#39;re using behave as you expect them to
behave (note I&amp;#39;m speaking of types, not instances). This is good,
because you need all the help you can get and static typing can
eliminate a lot of errors.&lt;/p&gt;

&lt;p&gt;This is a doubly-edged sword though. By definition a static type
system will reject pieces of code that are perfectly correct. Also,
it&amp;#39;s not a silver bullet, as Rich Hickey said in his excellent
&lt;a href="http://www.infoq.com/presentations/Simple-Made-Easy"&gt;Simple Made Easy&lt;/a&gt;
talk: &amp;ldquo;&lt;em&gt;What&amp;#39;s the common thing that all bugs in the wild share? They
passed the type-checker, they passed all the tests!&lt;/em&gt;&amp;rdquo;&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve seen opinions that &amp;ldquo;&lt;em&gt;structural typing&lt;/em&gt;&amp;rdquo; or &amp;ldquo;&lt;em&gt;type-inference&lt;/em&gt;&amp;rdquo;
are as good as &amp;ldquo;&lt;em&gt;duck typing&lt;/em&gt;&amp;rdquo;. That couldn&amp;#39;t be further from the
truth - the real power of duck typing comes from the ability to create
/ modify types and functions on the fly at runtime. In other words you
can make shit up and as long as it&amp;#39;s correct, then it works. In
contrast, a static type system actively rejects pieces of code if it
can&amp;#39;t prove that the types you&amp;#39;re using support the computation you&amp;#39;re
trying to do, so no matter how smart the type system is, you&amp;#39;ll always
end up in lots of instances where you have to spoon-feed the compiler
to allow you to do what &lt;em&gt;you mean&lt;/em&gt; (n.b. not all compilers are equal).&lt;/p&gt;

&lt;p&gt;This is not to say that static typing is bad. Well, it is bad in
languages where the type system is designed to help the IDE and not
the developer (e.g. Java, Delphi, Visual Basic). Otherwise, especially
in combination with referential transparency, it really eliminates a
whole class of errors.&lt;/p&gt;

&lt;p&gt;Here we define &lt;em&gt;an error&lt;/em&gt; as being an incorrect state of the
computation or corrupted output that takes the developers by
surprise. An exceptional state that&amp;#39;s being controlled is not an
error. This is why Haskell makes such a big fuss out of dealing with
side-effects by means of monadic types - because it makes you think
about exceptional state and either deal with it, or make it somebody
else&amp;#39;s problem.&lt;/p&gt;

&lt;p&gt;Thinking of Scala versus Clojure and Haskell, in regards to its
static-type system Scala sits somewhere in the middle. This is both
good and bad. On one hand Scala does not have the same (static)
expressive capabilities of Haskell, being a poor substitute for it
when working with higher-kinded types. On the other hand you can
&lt;a href="http://bionicspirit.com/blog/2012/07/02/love-scala.html"&gt;drill holes&lt;/a&gt;
in that static-type system to make it do what you want, which I think
is a good trade-off.&lt;/p&gt;

&lt;p&gt;I personally lean towards dynamic type systems, however the tradeoffs
I end up making in Scala are worth it for the extra type safety it
brings. On the other hand Clojure, because of its support for
multi-methods and protocols and macros, is a dynamic language that&amp;#39;s
more expressive than most other languages, including dynamic ones,
especially the mainstream, like Python, Ruby, Perl, Javascript or PHP.&lt;/p&gt;

&lt;h2&gt;11. Performance&lt;/h2&gt;

&lt;p&gt;I don&amp;#39;t have any experience or proof on this, just personal feelings :-)&lt;/p&gt;

&lt;p&gt;Scala runs on top of the JVM. When using closures or immutable
data-structures, it is wasteful. However there are a few things to
consider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scala can be as low-level and as efficient as Java for the hot
codepaths and low-level Scala code is still higher-level than Java
(for instance the pimp-my-library pattern will have 0 overhead
starting with Scala 2.10, while implicit parameters are
compile-time)&lt;br&gt;&lt;/li&gt;
&lt;li&gt;the built-in immutable data-structures are optimized to be versioned
/ to reuse memory of prior states - just as when adding a new
element to a List the old reference gets used as the tail, this
also happens with Vectors and Maps - they are still less efficient
than Java&amp;#39;s collections, but it&amp;#39;s a good tradeoff as these
data-structures can be used without read-locks, so bye, bye
lock-contention of threads&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Scala creates lots of short lived objects. This can stress the
garbage collector, but on the other hand the JVM has the most
advanced garbage collectors available, so you shouldn&amp;#39;t worry about
it unless profiling tools tell you to &amp;hellip; for instance on the JVM
heap allocation is as cheap as stack allocation, it can also do some
escape analysis to get rid of some locks and to allocate some
short-lived objects on the stack and deallocation of short-lived
objects is cheap, because the GC is generational so it deallocates
whole chucks of memory at once instead of individual references
&amp;hellip; so why worry about it?&lt;/li&gt;
&lt;li&gt;the only instance to be concerned about is if you&amp;#39;re building on top
of Android, as Android does not have a JVM - but even there, Scala
is workable (or so I&amp;#39;ve heard)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;12. Tools of the Trade&lt;/h2&gt;

&lt;p&gt;I have a love/hate relationship with SBT, the defacto builds manager
for Scala, the replacement for Maven, the slayer of XML files.&lt;/p&gt;

&lt;p&gt;The syntax is really weird and leads to cargo-culting. It broke
compatibility and so many examples available online are out of
date. When you&amp;#39;re reading the
&lt;a href="http://www.scala-sbt.org/release/docs/Getting-Started/Welcome.html"&gt;Getting Started&lt;/a&gt;
tome, it describes something about immutable data-structures, settings
options that are either lazy or strict, how to transform values with a
&lt;code&gt;~=&lt;/code&gt; operator, something about another operator written as &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; and
so on.&lt;/p&gt;

&lt;p&gt;Comparing this to how you work with Ruby Gems / Rake and Bundler is
simply not fun. Only a mother could love this syntax.&lt;/p&gt;

&lt;p&gt;Then I&amp;#39;ve already had problems with its Ivy integration, not being
able to solve some dependencies. Thankfully I could find a fix.&lt;/p&gt;

&lt;p&gt;On the other hand it&amp;#39;s really pragmatic and I prefer it over Maven,
even if the Scala Maven plugin is in really good shape right now. Here
are some highlights of SBT:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it can do cross-builds between multiple Scala versions; as is well
known, major Scala versions are breaking binary compatibility, so if
you want your library to support multiple Scala versions then SBT is
a must, as it makes cross-building a breeze (it&amp;#39;s almost too easy)&lt;br&gt;&lt;/li&gt;
&lt;li&gt;it&amp;#39;s well integrated with ScalaTest, being able of continous
compilation and testing, with output in colors - a really good tool
for TDD&lt;br&gt;&lt;/li&gt;
&lt;li&gt;it makes it easy to deal with multiple sub-projects in the same root
project, sub-projects that can be worked-on, tested or published
individually or as a whole&lt;br&gt;&lt;/li&gt;
&lt;li&gt;all Scala projects have instructions for SBT first, Maven second and
missing instructions for everything else - this is particularly
painful if you&amp;#39;re dealing with plugins (like doing precompilation of
templates with Scalate or something)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I use Emacs. &lt;/p&gt;

&lt;p&gt;IDEs are not on the same level as Java. But I tried out
&lt;a href="http://blog.jetbrains.com/scala/"&gt;IntelliJ IDEA&amp;#39;s Scala plugin&lt;/a&gt; and
it&amp;#39;s quite decent, with refactoring, intellisense and everything
nice. An Eclipse plugin is also available, developed now by TypeSafe,
however last time I tried, it was unstable.&lt;/p&gt;

&lt;p&gt;So IDEs for Scala are in a worst shape than for Java, but on the other
hand these IDEs are functional and completely awesome when compared to
what you get by picking other functional languages, except maybe F#.&lt;/p&gt;

&lt;p&gt;With Scala you can use all the profiling and monitoring tools and
classpath reloading tricks that you can use with Java. Nothing&amp;#39;s
stopping you, as every tool meant for the JVM also works with Scala.&lt;/p&gt;

&lt;h2&gt;13. Concurrency and Parallelism&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s enough to say that Scala doesn&amp;#39;t restrict you in any way:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="http://akka.io/"&gt;Light-weight actors&lt;/a&gt; that can process tons of messages (Erlang-style)
and that work either on the same machine, in a single process, or
distributed over a network&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.akka.io/docs/akka/2.0.1/scala/futures.html"&gt;Futures and Promises&lt;/a&gt;,
which in contrast to other languages (* cough * javascript / jquery * cough *) 
are properly implemented as monadic types&lt;/li&gt;
&lt;li&gt;&lt;a href="http://nbronson.github.com/scala-stm/"&gt;Software transactional memory&lt;/a&gt;, as in Clojure&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.scala-lang.org/overviews/parallel-collections/overview.html"&gt;Parallel collections&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://doc.akka.io/docs/akka/snapshot/scala/dataflow.html"&gt;Async/await as in C#&lt;/a&gt;, though it requires a compiler plugin&lt;br&gt;&lt;/li&gt;
&lt;li&gt;The awesome Java NIO, along with Netty, Mina and the whole ecosystem
for async I/O (you don&amp;#39;t know what pleasure feels like until you
wrap &lt;a href="https://github.com/AsyncHttpClient/async-http-client"&gt;Async-Http-Client&lt;/a&gt;
in Akka Promises which you can combine in for-comprehensions)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically Scala has it all. This may seem like a curse, but what other
languages define as built-in / hard to change / hard to evolve
features, Scala defines as libraries. So there are definitely upsides ;-)&lt;/p&gt;

&lt;h2&gt;14. Learning Resources&lt;/h2&gt;

&lt;p&gt;I&amp;#39;ve found the following to be good resources for learning Scala (note
that Amazon links have my affiliate tag, but if you want the eBook
version don&amp;#39;t buy from Amazon, prefer buying directly from the
publisher, as you&amp;#39;ll get both a DRM-free Kindle version and a PDF):&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.coursera.org/course/progfun"&gt;Functional Programming Principles in Scala&lt;/a&gt;&lt;/strong&gt;,
already mentioned, is an excellent course provided by Coursera / EPFL,
taught by Martin Odersky. The course is almost over, but the material
will be left online, which means you can follow the lectures and do
the assignments and I&amp;#39;m pretty sure many students that attended will
remain on that forum for answering questions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://twitter.github.com/scala_school/"&gt;Scala School&lt;/a&gt;&lt;/strong&gt; - a freely
available online tutorial by Twitter, which is very friendly to
newbies. I&amp;#39;ve read it and it&amp;#39;s pretty good.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://docs.scala-lang.org/"&gt;Scala Documentation Project&lt;/a&gt;&lt;/strong&gt; -
definitely checkout this website, as they aggregate everything good
here. If you want to learn more about Scala&amp;#39;s library, especially the
collections, this is the place to learn from.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href="http://aperiodic.net/phil/scala/s-99/"&gt;Ninety-Nine Scala Problems&lt;/a&gt;&lt;/strong&gt;
- a collection of 99 problems to be solved with Scala. If you get
stuck, you can view a solution which is often idiomatic. See also this
&lt;a href="https://github.com/etorreborre/s99"&gt;GitHub project&lt;/a&gt; that gives you a
complete test-suite, to spare you of the effort.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://www.amazon.com/gp/product/B004Z1FTXS/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B004Z1FTXS&amp;linkCode=as2&amp;tag=bionicspirit-20"&gt;&lt;img class="left" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="83" height="110" src="../../assets/img/programming-scala-47470dca.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://www.amazon.com/gp/product/B004Z1FTXS/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=B004Z1FTXS&amp;linkCode=as2&amp;tag=bionicspirit-20"&gt;&lt;b&gt;Programming in Scala&lt;/b&gt;&lt;/a&gt; 
by Martin Odersky is a good book on programming, not just Scala - many
of the exercises in
&lt;a href="http://mitpress.mit.edu/sicp/"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;
are also present in this book, giving you the Scala-approach for
solving those problems, which is good.&lt;/p&gt;

&lt;div class="clear"&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="http://www.amazon.com/gp/product/0321774094/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321774094&amp;linkCode=as2&amp;tag=bionicspirit-20"&gt;&lt;img class="left" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="84" height="110" src="../../assets/img/scala-impatient-b7b7690b.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://www.amazon.com/gp/product/0321774094/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=0321774094&amp;linkCode=as2&amp;tag=bionicspirit-20"&gt;&lt;b&gt;Scala for the Impatient&lt;/b&gt;&lt;/a&gt;
by Cay S. Horstmann, is a good pragmatic book on Scala (not so much on
functional programming), but it&amp;#39;s for developers experienced in other
languages, so it&amp;#39;s fast-paced while not scaring you away with endless
discussions on types (like I just did). The PDF for the first part (out of 3) is 
available from the 
&lt;a href="http://typesafe.com/resources/free-books"&gt;Typesafe website&lt;/a&gt;.&lt;/p&gt;

&lt;div class="clear"&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href="http://www.amazon.com/gp/product/1935182706/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1935182706&amp;linkCode=as2&amp;tag=bionicspirit-20"&gt;&lt;img class="left" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="88" height="110" src="../../assets/img/scala-depth-0a96ba8a.jpg" /&gt;&lt;/a&gt;
&lt;a href="http://www.amazon.com/gp/product/1935182706/ref=as_li_ss_il?ie=UTF8&amp;camp=1789&amp;creative=390957&amp;creativeASIN=1935182706&amp;linkCode=as2&amp;tag=bionicspirit-20"&gt;&lt;b&gt;Scala in Depth&lt;/b&gt;&lt;/a&gt;
by Joshua Suereth D. - this is an advanced book on Scala, with many
insights into how functional idioms work in it. I&amp;#39;ve yet to finish
reading, as it&amp;#39;s not really an easy lecture. But it&amp;#39;s a good book. Get
the eBook straight from &lt;a href="http://www.manning.com/suereth/"&gt;Manning&lt;/a&gt;.&lt;/p&gt;

&lt;div class="clear"&gt;&lt;/div&gt;

&lt;h2&gt;The End, Finally&lt;/h2&gt;

&lt;p&gt;A sequel on what makes Clojure great will follow when I have the time
or patience for it (or once I finish reading the
&lt;a href="http://joyofclojure.com/"&gt;Joy of Clojure&lt;/a&gt;, great book btw).&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Things I Love About Scala</title>
    <link rel="alternate" href="/blog/2012/07/02/love-scala.html"/>
    <id>http://bionicspirit.com/blog/2012/07/02/love-scala.html</id>
    <published>2012-07-02T00:00:00Z</published>
    <updated>2012-07-02T00:00:00Z</updated>
    <author>
      <name>Alexandru NEdelcu</name>
    </author>
    <summary type="html">Scala makes development in a static language productive and
concurrency easy, while allowing you to tap into the power of the JVM,
giving you access to the same concurrency primitives available for
Java, should you need to. I'm now a fan.

&lt;!-- more --&gt;
</summary>
    <content type="html">&lt;p&gt;Scala makes development in a static language productive and
concurrency easy, while allowing you to tap into the power of the JVM,
giving you access to the same concurrency primitives available for
Java, should you need to. I&amp;#39;m now a fan.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2&gt;Syntactic Sugar&lt;/h2&gt;

&lt;p&gt;Say that we&amp;#39;ve got a web service that calls out to other web services,
or does something else expensive (like calculating the digits of PI
:)) and you want to cache the returned results in a map of some sort.&lt;/p&gt;

&lt;p&gt;Our client-side usage of this class will be like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;Cache&lt;/span&gt;

&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some-key-here&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// do something expensive ...&lt;/span&gt;
  &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// returns result&lt;/span&gt;
  &lt;span class="s"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;First, let&amp;#39;s implement a naive version:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NaiveCache&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;this&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="nc"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Any&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
    &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;
        &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullKey&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks pretty simple. We&amp;#39;ve got a Map that stores the results and
an &lt;code&gt;apply&lt;/code&gt; method that takes as input a Key and a function &lt;code&gt;process()&lt;/code&gt;
that returns the value of some computation.&lt;/p&gt;

&lt;p&gt;But it&amp;#39;s not OK that this function returns Any reference, because we
are in a static language and I hate casting, which in this case is
totally unnecessary. The right return type of &lt;code&gt;apply()&lt;/code&gt; could be
inferred from its parameters. So we&amp;#39;ll fix that by adding a generic
variable:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NaiveCache&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;this&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T:&lt;/span&gt; &lt;span class="kt"&gt;Manifest&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;fullKey&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;::&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;manifest&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;

    &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullKey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asInstanceOf&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;
        &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullKey&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We&amp;#39;ve added the generic type T to our &lt;code&gt;apply()&lt;/code&gt; which is inferred at
the call-site from &lt;code&gt;process()&lt;/code&gt;. We still want our map to hold
anything, however in order to do that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;when we fetch the value from our map, we need to cast it to T in
order to prevent compiler errors&lt;/li&gt;
&lt;li&gt;if we do that, but then we call our &lt;code&gt;apply()&lt;/code&gt; method with the same
key but with a different &lt;code&gt;process()&lt;/code&gt;, then we can end up
with &lt;code&gt;ClassCastExceptions&lt;/code&gt;, so to prevent it we need to make the
return type of &lt;code&gt;process()&lt;/code&gt; part of our key&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In Java this is hard to do, because in Java the generic types get
erased at compile-time and so aren&amp;#39;t available at runtime. Scala has
the same behavior, however in Scala we can specify that we want the
&lt;a href="http://www.scala-lang.org/api/current/index.html#scala.reflect.Manifest"&gt;Manifest&lt;/a&gt;
for our type T, which will give us access to the erasure of T at
runtime. Thus we can use the name of type T in composing our key. &lt;/p&gt;

&lt;p&gt;So these will now work with no cast exceptions, because the 2 calls to
cache will work on 2 different keys:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;// key will be ... some-string::String&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some-string&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;// key will be ... some-string::Int&lt;/span&gt;
&lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Int&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cache&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some-string&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;92&lt;/span&gt; &lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Concurrency&lt;/h2&gt;

&lt;p&gt;I also mentioned concurrency. Can instances of this class be used in a
multi-threaded context safely?&lt;/p&gt;

&lt;p&gt;Yes definitely, with maybe a small adjustment to our map
declaration. It&amp;#39;s better if we marked our map as being &lt;code&gt;@volatile&lt;/code&gt;,
because when writing a value to a volatile variable, the write creates
a memory fence that ensures the value will get published to other
threads immediately (instead of being cached in a processor registry
or something):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;NaiveCache&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@volatile&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;this&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

  &lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Something is a little off. Between fetching the key from the map and
updating the map with a new value, we can have a race problem, so in
case of multiple threads pounding on this cache you can end up with
waisted resources from threads doing duplicate work, although this may
be acceptable for a cache.&lt;/p&gt;

&lt;p&gt;The advantages of this implementation are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;simple to understand&lt;/li&gt;
&lt;li&gt;no locking anywhere, for anything; the logic is completely non-blocking&lt;/li&gt;
&lt;li&gt;our cache never gets into an inconsistent state&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Try doing that with a &lt;code&gt;java.util.HashMap&lt;/code&gt;. The difference here is that
this Map is completely immutable. Its internal state can never be
corrupted by multiple threads reading and writing to it because on
every write a new Map is created and the reference to the old one gets
replaced. Replacing that reference is also an atomic operation.&lt;/p&gt;

&lt;p&gt;So this means:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;we&amp;#39;ve got no lock overhead (only a volatile variable that&amp;#39;s much
cheaper than a synchronization block)&lt;/li&gt;
&lt;li&gt;we&amp;#39;ve got no lock contention to speak of &lt;/li&gt;
&lt;li&gt;we&amp;#39;ve got no deadlocks possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But say you want to fix the race condition that results in duplicate
effort. Many developers would just use the Java Monitor Pattern and
&lt;code&gt;synchronize&lt;/code&gt; the whole &lt;code&gt;apply()&lt;/code&gt; method. But this means that multiple
threads won&amp;#39;t be able to read from this cache in parallel, which in
the case of a cache I don&amp;#39;t think it&amp;#39;s an acceptable trade-off.&lt;/p&gt;

&lt;p&gt;In Java you can solve this by using a
&lt;a href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/locks/ReentrantReadWriteLock.html"&gt;ReentrantReadWriteLock&lt;/a&gt;.
This is a pair of 2 locks that you can acquire, one for reads and one
for writes. So by using it you can ensure that you can have multiple
threads reading from your datastructure, but when you want to make
writes then you acquire the &lt;code&gt;writeLock()&lt;/code&gt;, which blocks every other
threads that synchronize on the same lock from both reading or
writing, until the writeLock gets released. And this is perfectly
acceptable for a cache.&lt;/p&gt;

&lt;p&gt;However when using an immutable Map, you don&amp;#39;t need a
&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;. Our original code can just use a simple
mutex only on writes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SafeCache&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@volatile&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;this&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;this&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;AnyRef&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T:&lt;/span&gt; &lt;span class="kt"&gt;Manifest&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;T&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;fullKey&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;::&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;manifest&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;

    &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullKey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asInstanceOf&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;synchronized&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;    
        &lt;span class="c1"&gt;// we can have a race condition here, so if the key is already&lt;/span&gt;
        &lt;span class="c1"&gt;// present when the lock is acquired, then do nothing else&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullKey&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;process&lt;/span&gt;
        &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullKey&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Interesting to note that reading is still completely
non-blocking. This would be in contrast with using a
&lt;code&gt;ReentrantReadWriteLock&lt;/code&gt;, which would block all reads from happening
when a thread acquires the &lt;code&gt;writeLock()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Aren&amp;#39;t immutable data-structures great? And you can do the same thing
in Java. Checkout the
&lt;a href="https://code.google.com/p/guava-libraries/wiki/ImmutableCollectionsExplained"&gt;immutable collections&lt;/a&gt;
from &lt;a href="https://code.google.com/p/guava-libraries/"&gt;Google&amp;#39;s Guava&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Non-blocking Results : Futures&lt;/h2&gt;

&lt;p&gt;When people talk about parallelism and concurrency on top of Scala,
they talk about Actors and &lt;a href="http://akka.io/"&gt;Akka&lt;/a&gt;. Akka is great for
actors-based concurrency, but that&amp;#39;s not what I want to talk about. &lt;/p&gt;

&lt;p&gt;In our case I want to make the call to &lt;code&gt;apply()&lt;/code&gt; non-blocking, after
all we might deal with potentially expensive computations here.&lt;/p&gt;

&lt;p&gt;Akka provides
&lt;a href="http://doc.akka.io/docs/akka/2.0.1/scala/futures.html"&gt;Futures and Promises&lt;/a&gt;
which is a very light and very composable way of specifying concurrent
operations. These are soon to be integrated within the Scala standard
library (in version 2.10).&lt;/p&gt;

&lt;p&gt;First, we&amp;#39;ll use these imports from Akka:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;akka.dispatch.&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;&lt;span class="nc"&gt;ExecutionContext&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;akka.util.duration._&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then our class now becomes:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;CachedFuture&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;ec&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;ExecutionContext&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="nd"&gt;@volatile&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;this&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;var&lt;/span&gt; &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;, &lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Any&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;
  &lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;this&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;AnyRef&lt;/span&gt;

  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T:&lt;/span&gt; &lt;span class="kt"&gt;Manifest&lt;/span&gt;&lt;span class="o"&gt;](&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;fullKey&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;::&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;manifest&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;

    &lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullKey&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;match&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;Some&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; 
        &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asInstanceOf&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="kt"&gt;T&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt;

      &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="nc"&gt;None&lt;/span&gt; &lt;span class="k"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;synchronized&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contains&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullKey&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;apply&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;map&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fullKey&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;future&lt;/span&gt;
      &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The differences are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;instead of processing the value and storing the result, we are
creating and storing a Future reference&lt;br&gt;&lt;/li&gt;
&lt;li&gt;the constructor of our class now takes an implicit parameter that
references an &lt;code&gt;ExecutionContext&lt;/code&gt;, under which these Futures will get
executed (think of Futures as Thread instances, with the
ExecutionContext being responsible for starting those threads)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;#39;s a main method for testing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;object&lt;/span&gt; &lt;span class="nc"&gt;Main&lt;/span&gt; &lt;span class="k"&gt;extends&lt;/span&gt; &lt;span class="nc"&gt;App&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;implicit&lt;/span&gt; &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;ec&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;ExecutionContext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fromExecutorService&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;
    &lt;span class="nc"&gt;Executors&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;newCachedThreadPool&lt;/span&gt;&lt;span class="o"&gt;())&lt;/span&gt;

  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;cachedFuture&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;CachedFuture&lt;/span&gt;

  &lt;span class="c1"&gt;// this is now non-blocking&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;future&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cachedFuture&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;some-key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
     &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
     &lt;span class="s"&gt;&amp;quot;Hello world!&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;// we now block for a result&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;future&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;greeting&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="c1"&gt;// the threads created by the execution context above are foreground&lt;/span&gt;
  &lt;span class="c1"&gt;// threads, so they&amp;#39;ll block the main thread from exiting (you can fix this,&lt;/span&gt;
  &lt;span class="c1"&gt;// but I chose not to for simplicity)&lt;/span&gt;

  &lt;span class="n"&gt;ec&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This example isn&amp;#39;t much, however the greatest thing about Futures is
that these objects behave like collections, responding to filter, map
and flatMap. So these objects are composable.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s something you can do:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;List&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fill&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;cachedFuture&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;toString&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
      &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nextInt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;futureSum&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="nc"&gt;Future&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sequence&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;_&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

  &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;futureSum&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are creating 10,000 (cached) futures, that return random integers
from 0 to 1000.&lt;/p&gt;

&lt;p&gt;We then create another future that&amp;#39;s the combination of those 10,000
futures we&amp;#39;ve created, with its result being a List of Integers. Well,
after we apply map on it, the result will be the sum of those 10,000
integers.&lt;/p&gt;

&lt;p&gt;And then we block until the result is available.&lt;/p&gt;

&lt;p&gt;Did I mention that futures are collections that respond to &lt;code&gt;filter&lt;/code&gt;,
&lt;code&gt;map&lt;/code&gt; and &lt;code&gt;flatMap&lt;/code&gt;? This means you can also do something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;word1&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cachedFuture&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;word-1&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;word2&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cachedFuture&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;word-2&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="nc"&gt;Thread&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;World!&amp;quot;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;

  &lt;span class="k"&gt;val&lt;/span&gt; &lt;span class="n"&gt;concatenate&lt;/span&gt; &lt;span class="k"&gt;=&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;w1&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;word1&lt;/span&gt;
    &lt;span class="n"&gt;w2&lt;/span&gt; &lt;span class="k"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="n"&gt;word2&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;yield&lt;/span&gt; &lt;span class="n"&gt;w1&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;w2&lt;/span&gt;

  &lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nc"&gt;Await&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;concatenate&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;seconds&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is just a small and dumb example, but the possibilities for
composing concurrent tasks are awesome.  And this API is also
available for Java:
&lt;a href="http://doc.akka.io/docs/akka/2.0.2/java/futures.html"&gt;Futures (Java)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Everything I described is possible within Java and Java 8 should make
things more interesting. But I love how easy and intuitive Scala makes
this.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>How To Build a Naive Bayes Classifier</title>
    <link rel="alternate" href="/blog/2012/02/09/howto-build-naive-bayes-classifier.html"/>
    <id>http://bionicspirit.com/blog/2012/02/09/howto-build-naive-bayes-classifier.html</id>
    <published>2012-02-09T00:00:00Z</published>
    <updated>2012-02-09T00:00:00Z</updated>
    <author>
      <name>Alexandru NEdelcu</name>
    </author>
    <summary type="html">Some use-cases for building a classifier:

- Spam detection, for example you could build your own
  [Akismet](http://akismet.com/) API
- Automatic assignment of categories to a set of items
- Automatic detection of the primary language (e.g. Google Translate)
</summary>
    <content type="html">&lt;p&gt;Some use-cases for building a classifier:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spam detection, for example you could build your own
&lt;a href="http://akismet.com/"&gt;Akismet&lt;/a&gt; API&lt;/li&gt;
&lt;li&gt;Automatic assignment of categories to a set of items&lt;/li&gt;
&lt;li&gt;Automatic detection of the primary language (e.g. Google Translate)&lt;/li&gt;
&lt;li&gt;Sentiment analysis, which in simple terms refers to discovering if
an opinion is about love or hate about a certain topic&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In general you can do a lot better with more specialized techniques,
however the Naive Bayes classifier is general-purpose, simple to
implement and good-enough for most applications. And while other
algorithms give better accuracy, in general I discovered that having
better data in combination with an algorithm that you can tweak does
give better results for less effort.&lt;/p&gt;

&lt;p&gt;In this article I&amp;#39;m describing the math behind it. Don&amp;#39;t fear the
math, as this is simple enough that a high-schooler understands. And
even though there are a lot of libraries out there that already do
this, you&amp;#39;re far better off for understanding the concept behind it,
otherwise you won&amp;#39;t be able to tweak the implementation in response to
your needs.&lt;/p&gt;

&lt;h2&gt;0. The Source Code&lt;/h2&gt;

&lt;p&gt;I published the source-code associated at
&lt;a href="https://github.com/alexandru/stuff-classifier"&gt;github.com/alexandru/stuff-classifier&lt;/a&gt;. The
implementation itself is at
&lt;a href="https://github.com/alexandru/stuff-classifier/blob/master/lib/stuff-classifier/bayes.rb"&gt;lib/bayes.rb&lt;/a&gt;,
with the corresponding
&lt;a href="https://github.com/alexandru/stuff-classifier/blob/master/test/test_002_naive_bayes.rb"&gt;test/test&lt;em&gt;002&lt;/em&gt;naive_bayes.rb&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;1. Introduction to Probabilities&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s start by refreshing forgotten knowledge. Again, this is very
basic stuff, but if you can&amp;#39;t follow the theory here, you can always
go to the
&lt;a href="http://www.khanacademy.org/#probability"&gt;probabilities section on khanacademy.org&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;1.1. Events and Event Types&lt;/h3&gt;

&lt;p&gt;An &amp;ldquo;event&amp;rdquo; is a set of outcomes (a subset of all possible outcomes)
with a probability attached. So when flipping a coin, we can have one
of these 2 events happening: tail or head. Each of them has a
probability of 50%. Using a Venn diagram, this would look like this:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="414" height="218" src="../../assets/img/coin-flip-bbdc392d.png" /&gt;
And another example which clearly shows the &lt;em&gt;dependence&lt;/em&gt; between
&amp;ldquo;rain&amp;rdquo; and &amp;ldquo;cloud formation&amp;rdquo;, as raining can only happen if there are
clouds:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="432" height="273" src="../../assets/img/inclusive-29d505fc.png" /&gt;
The relationship between events is very important, as you&amp;#39;ll see next:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2 events are &lt;strong&gt;disjoint (exclusive)&lt;/strong&gt; if they can&amp;#39;t happen at the same
time (a single coin flip cannot yield a tail and a head at the same
time). For Bayes classification, we are not concerned with disjoint
events. &lt;/li&gt;
&lt;li&gt;2 events are &lt;strong&gt;independent&lt;/strong&gt; when they can happen at the same time,
but the occurrence of one event does not make the occurrence of
another more or less probable. For example the second coin-flip you
make is not affected by the outcome of the first coin-flip.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;2 events are &lt;strong&gt;dependent&lt;/strong&gt; if the outcome of one affects the other. In
the example above, clearly it cannot rain without a cloud
formation. Also, in a horse race, some horses have better
performance on rainy days.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we are concerned here is the difference between dependent and
independent events, because calculating the intersection (both
happening at the same time) depends on it. So for independent events,
calculating the intersection is easy:&lt;/p&gt;

&lt;p&gt;&lt;img supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="214" height="36" src="../../assets/img/independent-events-intersection-30a5066b.png" /&gt;&lt;/p&gt;

&lt;p&gt;Some examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;if you have 2 hard-drives, each of them having a 0.3 (30%)
probability of failure within the next year, that means there&amp;#39;s a
0.09 (9%) probability of them failing both within the next year&lt;/li&gt;
&lt;li&gt;if you flip a coin 4 times, there&amp;#39;s a 0.0625 probability of getting
a tail 4 times in a row (0.5 ^ 4)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Things are not so simple for dependent events, which is where the
Bayes Theorem comes into play.&lt;/p&gt;

&lt;h3&gt;1.2. Conditional Probabilities and The Bayes Theorem&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s take one example. So we have the following stats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;30 emails out of a total of 74 are spam messages&lt;/li&gt;
&lt;li&gt;51 emails out of those 74 contain the word &amp;ldquo;penis&amp;rdquo;&lt;/li&gt;
&lt;li&gt;20 emails containing the word &amp;ldquo;penis&amp;rdquo; have been marked as spam&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So the question is: what is the probability that the latest received
email is a spam message, given that it contains the word &amp;ldquo;penis&amp;rdquo;?&lt;/p&gt;

&lt;p&gt;So these 2 events are clearly dependent, which is why you must use the
simple form of the Bayes Theorem:&lt;/p&gt;

&lt;p&gt;&lt;img supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="490" height="272" src="../../assets/img/conditional-prob-9a27ee0e.png" /&gt;&lt;/p&gt;

&lt;p&gt;With the solution being:&lt;/p&gt;

&lt;p&gt;&lt;img supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="415" height="199" src="../../assets/img/spam-simple-bayes-d57fa7ac.png" /&gt;&lt;/p&gt;

&lt;p&gt;This was a simple one, you could definitely see the result without
complicating yourself with the Bayes formula.&lt;/p&gt;

&lt;h3&gt;1.3. The Naive Bayes Approach&lt;/h3&gt;

&lt;p&gt;Let us complicate the problem above by adding to it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;25 emails out of the total contain the word &amp;ldquo;viagra&amp;rdquo;&lt;/li&gt;
&lt;li&gt;24 emails out of those have been marked as spam&lt;/li&gt;
&lt;li&gt;so what&amp;#39;s the probability that an email is spam, given that it
contains both &amp;ldquo;viagra&amp;rdquo; and &amp;ldquo;penis&amp;rdquo;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Shit just got more complicated, because now the formula is this one:&lt;/p&gt;

&lt;p&gt;&lt;img supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="467" height="68" src="../../assets/img/spam-multiple-bayes-5ca2d76e.png" /&gt;&lt;/p&gt;

&lt;p&gt;And you definitely don&amp;#39;t want to bother with it if we keep adding
words. But what if we simplified our assumptions and just say that the
occurrence of &lt;em&gt;penis&lt;/em&gt; is totally independent from the occurrence of
&lt;em&gt;viagra&lt;/em&gt;? Then the formula just got much simpler:&lt;/p&gt;

&lt;p&gt;&lt;img supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="407" height="250" src="../../assets/img/spam-multiple-bayes-naive-461655a0.png" /&gt;&lt;/p&gt;

&lt;p&gt;To classify an email as spam, you&amp;#39;ll have to calculate the conditional
probability by taking hints from the words contained. And the Naive
Bayes approach is exactly what I described above: we make the
assumption that the occurrence of one word is totally unrelated to the
occurrence of another, to simplify the processing and complexity
involved.&lt;/p&gt;

&lt;p&gt;This does highlight the flaw of this method of classification, because
clearly those 2 events we&amp;#39;ve picked (viagra and penis) are correlated
and our assumption is wrong. But this just means our results will be
less accurate.&lt;/p&gt;

&lt;h2&gt;2. Implementation&lt;/h2&gt;

&lt;p&gt;I mention it again, you can take a look at the source-code published
at
&lt;a href="https://github.com/alexandru/stuff-classifier/"&gt;github.com/alexandru/stuff-classifier&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;2.1. General Algorithm&lt;/h3&gt;

&lt;p&gt;You simply get the probability for a text to belong to each of the
categories you test against. The category with the highest probability
for the given text wins:&lt;/p&gt;

&lt;p&gt;&lt;img supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="588" height="70" src="../../assets/img/bayes-classifier-formula-9612a4f9.png" /&gt;&lt;/p&gt;

&lt;p&gt;Do note that above I also eliminated the &lt;em&gt;denominator&lt;/em&gt; from our original
formula, because it is a constant that we do not need (called
&lt;em&gt;evidence&lt;/em&gt;).&lt;/p&gt;

&lt;h3&gt;2.2. Avoiding Floating Point Underflow (UPDATE Feb 27, 2012)&lt;/h3&gt;

&lt;p&gt;Because of the underlying limits of floating points, if you&amp;#39;re working
with big documents (not the case in this example), you do have to make
one important optimization to the above formula:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;instead of the probabilities of each word, you store the (natural)
logarithms of those probabilities &lt;/li&gt;
&lt;li&gt;instead of multiplying the numbers, you add them instead&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So instead of the above formula, if you need this optimization, then
use this one:&lt;/p&gt;

&lt;p&gt;&lt;img supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="703" height="67" src="../../assets/img/bayes-logarithms-ea324735.png" /&gt;&lt;/p&gt;

&lt;h3&gt;2.3. Training&lt;/h3&gt;

&lt;p&gt;Your implementation must have a training method. Here&amp;#39;s how mine looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;train&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;each_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;increment_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;w&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;increment_cat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;category&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And its usage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt; &lt;span class="ss"&gt;:spam&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Grow your penis to 20 inches in just 1 week&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;classifier&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;train&lt;/span&gt; &lt;span class="ss"&gt;:ham&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="s2"&gt;&amp;quot;I&amp;#39;m hungry, no I don&amp;#39;t want your penis&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the full implementation, take a look at
&lt;a href="https://github.com/alexandru/stuff-classifier/blob/master/lib/stuff-classifier/base.rb"&gt;base.rb&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;2.4. Getting Rid of Stop Words / Stemming&lt;/h3&gt;

&lt;p&gt;First of all, you must get rid of the junk. Every language has words
that are so commonly used that make them meaningless for any kind of
classification you may want to do. For instance in English you have
words such as &amp;ldquo;the&amp;rdquo;, &amp;ldquo;to&amp;rdquo;, &amp;ldquo;you&amp;rdquo;, &amp;ldquo;he&amp;rdquo;, &amp;ldquo;only&amp;rdquo;, &amp;ldquo;if&amp;rdquo;, &amp;ldquo;it&amp;rdquo; that you
can safely strip out from the text.&lt;/p&gt;

&lt;p&gt;I&amp;#39;ve compiled a list of such words in this file:
&lt;a href="https://github.com/alexandru/stuff-classifier/blob/master/lib/stuff-classifier/stop_words.rb"&gt;stop_words.rb&lt;/a&gt;. You
can compile such a list by yourself if you&amp;#39;re not using English for
example. Head over to &lt;a href="http://www.gutenberg.org/"&gt;Project Gutenberg&lt;/a&gt;,
download some books in the language you want, count the words in them,
sort by popularity in descending order and keep the top words as words
that you can safely ignore.&lt;/p&gt;

&lt;p&gt;Also, our classifier is really dumb in the sense that it does not care
about the meaning or context of a word. So there&amp;#39;s a problem: consider
the word &amp;ldquo;running&amp;rdquo;. What you want is to treat this just as &amp;ldquo;run&amp;rdquo;,
which is the morphological root of the word. You also want to treat
&amp;ldquo;parenting&amp;rdquo; and &amp;ldquo;parents&amp;rdquo; as &amp;ldquo;parent&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;This process is called &lt;em&gt;stemming&lt;/em&gt; and there are lots of libraries for
it. I think currently the most up-to-date and comprehensive library
for stemming is Snowball. It&amp;#39;s a C library with lots of bindings
available, including for Ruby and Python and it even has support for
my native language (Romanian).&lt;/p&gt;

&lt;p&gt;Take a look at what I&amp;#39;m doing in
&lt;a href="https://github.com/alexandru/stuff-classifier/blob/master/lib/stuff-classifier/tokenizer.rb"&gt;tokenizer.rb&lt;/a&gt;,
where I&amp;#39;m getting rid of stop words and stemming the remainings.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;each_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello world! How are you?&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; [&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;]&lt;/span&gt;

&lt;span class="n"&gt;each_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Lots of dogs, lots of cats! &lt;/span&gt;
&lt;span class="s1"&gt;  This is the information highway&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; [&amp;quot;lot&amp;quot;, &amp;quot;dog&amp;quot;, &amp;quot;lot&amp;quot;, &amp;quot;cat&amp;quot;, &amp;quot;inform&amp;quot;, &amp;quot;highwai&amp;quot;]&lt;/span&gt;

&lt;span class="n"&gt;each_word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I don&amp;#39;t really get what you want to&lt;/span&gt;
&lt;span class="s2"&gt;  accomplish. There is a class TestEval2, you can do test_eval2 =&lt;/span&gt;
&lt;span class="s2"&gt;  TestEval2.new afterwards. And: class A ... end always yields nil, so&lt;/span&gt;
&lt;span class="s2"&gt;  your output is ok I guess ;-)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# =&amp;gt; [&amp;quot;really&amp;quot;, &amp;quot;want&amp;quot;, &amp;quot;accomplish&amp;quot;, &amp;quot;class&amp;quot;,&lt;/span&gt;
&lt;span class="c1"&gt;#     &amp;quot;testeval&amp;quot;, &amp;quot;test&amp;quot;, &amp;quot;eval&amp;quot;, &amp;quot;testeval&amp;quot;, &amp;quot;new&amp;quot;, &lt;/span&gt;
&lt;span class="c1"&gt;#     &amp;quot;class&amp;quot;, &amp;quot;end&amp;quot;, &amp;quot;yields&amp;quot;, &amp;quot;nil&amp;quot;, &amp;quot;output&amp;quot;, &lt;/span&gt;
&lt;span class="c1"&gt;#     &amp;quot;ok&amp;quot;, &amp;quot;guess&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; depending on the size of your training data, this may not be
a good idea. Stemming is useful in the beginning when you don&amp;#39;t have a
lot of data. Otherwise consider &amp;ldquo;&lt;em&gt;house&lt;/em&gt;&amp;rdquo; and &amp;ldquo;&lt;em&gt;housing&lt;/em&gt;&amp;rdquo; &amp;hellip; the
former is used less frequently in a spammy context then the later.&lt;/p&gt;

&lt;h3&gt;2.5. Implementation Guidelines&lt;/h3&gt;

&lt;p&gt;When classifying emails for spam, it is a good idea to be sure that a
certain message is a spam message, otherwise users may get pissed by
too many false positives.&lt;/p&gt;

&lt;p&gt;Therefore it is a good idea to have &lt;em&gt;thresholds&lt;/em&gt;. This is how my
implementation looks like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;classify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kp"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="c1"&gt;# Find the category with the highest probability&lt;/span&gt;

  &lt;span class="n"&gt;max_prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kp"&gt;nil&lt;/span&gt;

  &lt;span class="n"&gt;scores&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat_scores&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_prob&lt;/span&gt;
      &lt;span class="n"&gt;max_prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt;
      &lt;span class="n"&gt;best&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="c1"&gt;# Return the default category in case the threshold condition was&lt;/span&gt;
  &lt;span class="c1"&gt;# not met. For example, if the threshold for :spam is 1.2&lt;/span&gt;
  &lt;span class="c1"&gt;#&lt;/span&gt;
  &lt;span class="c1"&gt;#    :spam =&amp;gt; 0.73, :ham =&amp;gt; 0.40  (OK)&lt;/span&gt;
  &lt;span class="c1"&gt;#    :spam =&amp;gt; 0.80, :ham =&amp;gt; 0.70  (Fail, :ham is too close)&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;
  &lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="vi"&gt;@thresholds&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;best&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="n"&gt;scores&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="n"&gt;cat&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;
    &lt;span class="k"&gt;next&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;prob&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;threshold&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;max_prob&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;best&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Final Words&lt;/h2&gt;

&lt;p&gt;My example involved spam classification, however this is not how
modern spam classifiers work btw. Because the independence assumptions
are often inaccurate, this type of classifier can be gamed by spammers
to trigger a lot of false positives, which will make the user turn the
feature off eventually.&lt;/p&gt;

&lt;p&gt;But it is general purpose, being good enough not only for spam
detection, but also for lots of other use-cases and it&amp;#39;s enough to get
you started.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Data Mining: Finding Similar Items and Users</title>
    <link rel="alternate" href="/blog/2012/01/16/cosine-similarity-euclidean-distance.html"/>
    <id>http://bionicspirit.com/blog/2012/01/16/cosine-similarity-euclidean-distance.html</id>
    <published>2012-01-16T00:00:00Z</published>
    <updated>2012-01-16T00:00:00Z</updated>
    <author>
      <name>Alexandru NEdelcu</name>
    </author>
    <summary type="html">&lt;img class="right" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="150" height="102" src="../../assets/img/similarity-graphic-small-a2841d22.png" /&gt;
Because we want to give kick-ass product recommendations.

I'm showing you how to find related items based on a really simple
formula. If you pay attention, this technique is used all over the web
</summary>
    <content type="html">&lt;p&gt;&lt;img class="right" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="150" height="102" src="../../assets/img/similarity-graphic-small-a2841d22.png" /&gt;
Because we want to give kick-ass product recommendations.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m showing you how to find related items based on a really simple
formula. If you pay attention, this technique is used all over the web
(like on Amazon) to personalize the user experience and increase
conversion rates.&lt;/p&gt;

&lt;p&gt;To get one question out of the way: there are already many available
libraries that do this, but as you&amp;#39;ll see there are multiple ways of
skinning the cat and you won&amp;#39;t be able to pick the right one without
understanding the process, at least intuitively.&lt;/p&gt;

&lt;h2&gt;Defining the Problem&lt;/h2&gt;

&lt;p&gt;&lt;img class="right" title="Amazon gives kick-ass suggestions to their customers" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="300" height="273" src="../../assets/img/amazon-c8dca9d4.png" /&gt;
To find similar items to a certain item, you&amp;#39;ve got to first define
what it means for 2 items to be similar and this depends on the
problem you&amp;#39;re trying to solve:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;on a blog, you may want to suggest similar articles that share the
same tags, or that have been viewed by the same people viewing the
item you want to compare with&lt;/li&gt;
&lt;li&gt;Amazon has this section called &amp;ldquo;&lt;em&gt;customers that bought this item also
bought&lt;/em&gt;&amp;rdquo;, which is self-explanatory&lt;/li&gt;
&lt;li&gt;a service like IMDB, based on your ratings, could find users similar
to you, users that liked or hated approximately the same movies you did,
thus giving you suggestions on movies you&amp;#39;d like to watch in the future&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In each case you need a way to classify these items you&amp;#39;re comparing,
whether it is tags, or items purchased, or movies reviewed. We&amp;#39;ll be
using tags, as it is simpler, but the formula holds for more
complicated instances.&lt;/p&gt;

&lt;h2&gt;Redefining the Problem in Terms of Geometry&lt;/h2&gt;

&lt;p&gt;We&amp;#39;ll be using my blog as sample. Let&amp;#39;s take some tags:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;API&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Algorithms&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Amazon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Android&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Books&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Browser&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That&amp;#39;s 6 tags. Well, what if we considered these tags as dimensions in
a 6-dimensional
&lt;a href="http://en.wikipedia.org/wiki/Euclidean_space"&gt;Euclidean space&lt;/a&gt;? Then
each item you want to sort or compare becomes a point in this space,
in which a coordinate (representing a tag) is either one (tagged) or
zero (not tagged).&lt;/p&gt;

&lt;p&gt;So let&amp;#39;s say we&amp;#39;ve got one article tagged with &lt;em&gt;API&lt;/em&gt; and
&lt;em&gt;Browser&lt;/em&gt;. Then its associated point will be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now these coordinates could represent something else. For instance
they could represent users. If say you&amp;#39;ve got a total of 6 users in
your system, 2 of them rating an item with 3 and 5 stars respectively,
you could have for the article in question this associated point
(do note the order is very important):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So now you can go ahead and calculate distances between these
points. For instance you could calculate the angle between the
associated vectors, or the actual euclidean distance between the 2
points. For a 2-dimensional Euclidean space, here&amp;#39;s how it would look
like:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="392" height="327" src="../../assets/img/similarity-graphic-4b37ff21.png" /&gt;&lt;/p&gt;

&lt;h2&gt;Euclidean Distance&lt;/h2&gt;

&lt;p&gt;The mathematical formula for the Euclidean distance is really
simple. Considering 2 points, A and B, with their associated
coordinates, the distance is defined as:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="473" height="74" src="../../assets/img/euclidean-distance-a8038e70.png" /&gt;
The lower the distance between 2 points, then the higher the
similarity. Here&amp;#39;s some Ruby code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# Returns the Euclidean distance between 2 points&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Params:&lt;/span&gt;
&lt;span class="c1"&gt;#  - a, b: list of coordinates (float or integer)&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;euclidean_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;sq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Returns the associated point of our tags_set, relative to our&lt;/span&gt;
&lt;span class="c1"&gt;# tags_space.&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Params:&lt;/span&gt;
&lt;span class="c1"&gt;#  - tags_set: list of tags&lt;/span&gt;
&lt;span class="c1"&gt;#  - tags_space: _ordered_ list of tags&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tags_to_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tags_set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags_space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;tags_space&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;tags_set&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;member?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;?&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Returns other_items sorted by similarity to this_item &lt;/span&gt;
&lt;span class="c1"&gt;# (most relevant are first in the returned list)&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Params:&lt;/span&gt;
&lt;span class="c1"&gt;#  - items: list of hashes that have [:tags]&lt;/span&gt;
&lt;span class="c1"&gt;#  - by_these_tags: list of tags to compare with&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sort_by_similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;by_these_tags&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;tags_space&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;by_these_tags&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tags&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;  
  &lt;span class="n"&gt;tags_space&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;flatten!&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort!&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uniq!&lt;/span&gt;

  &lt;span class="n"&gt;this_point&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tags_to_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;by_these_tags&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags_space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;other_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; 
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags_to_point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="ss"&gt;:tags&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tags_space&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;similarities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;other_points&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;that_point&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;euclidean_distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this_point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;that_point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="n"&gt;sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;similarities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here is the test you could do, and btw you can copy the above and
the bellow script and run it directly:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# SAMPLE DATA&lt;/span&gt;

&lt;span class="n"&gt;all_articles&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="ss"&gt;:article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Data Mining: Finding Similar Items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
   &lt;span class="ss"&gt;:tags&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Algorithms&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Programming&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mining&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s2"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Ruby&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="ss"&gt;:article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Blogging Platform for Hackers&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  
   &lt;span class="ss"&gt;:tags&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Publishing&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Server&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Cloud&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Heroku&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s2"&gt;&amp;quot;Jekyll&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;GAE&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="ss"&gt;:article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;UX Tip: Don&amp;#39;t Hurt Me On Sign-Up&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
   &lt;span class="ss"&gt;:tags&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Design&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;UX&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;},&lt;/span&gt; 
  &lt;span class="p"&gt;{&lt;/span&gt;
   &lt;span class="ss"&gt;:article&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Crawling the Android Marketplace&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
   &lt;span class="ss"&gt;:tags&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Python&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Android&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Mining&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
     &lt;span class="s2"&gt;&amp;quot;Web&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;API&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# SORTING these articles by similarity with an article &lt;/span&gt;
&lt;span class="c1"&gt;# tagged with Publishing + Web + API&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# The list is returned in this order:&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# 1. article: Crawling the Android Marketplace&lt;/span&gt;
&lt;span class="c1"&gt;#    similarity: 2.0&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# 2. article: &amp;quot;UX Tip: Don&amp;#39;t Hurt Me On Sign-Up&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#    similarity: 2.0&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# 3. article: Blogging Platform for Hackers&lt;/span&gt;
&lt;span class="c1"&gt;#    similarity: 2.645751&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# 4. article: &amp;quot;Data Mining: Finding Similar Items&amp;quot;&lt;/span&gt;
&lt;span class="c1"&gt;#    similarity: 2.828427&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;

&lt;span class="n"&gt;sorted&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sort_by_similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;all_articles&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Publishing&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Web&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;API&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yaml&amp;#39;&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="no"&gt;YAML&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;The Problem (or Strength) of Euclidean Distance&lt;/h3&gt;

&lt;p&gt;Can you see one flaw with it for our chosen data-set and intention? I
think you can - the first 2 articles have the same Euclidean distance
to [&amp;ldquo;Publishing&amp;rdquo;, &amp;ldquo;Web&amp;rdquo;, &amp;ldquo;API&amp;rdquo;], even though the first article shares
2 tags with our chosen item, instead of just 1 tag as the rest.&lt;/p&gt;

&lt;p&gt;To visualize why, look at the points used in calculating the distance
for the first article:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So 4 coordinates are different. Now look at the points used for the
second article:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Again, 4 coordinates are different. So here&amp;#39;s the deal with Euclidean
distance: it measures &lt;em&gt;dissimilarity&lt;/em&gt;. The coordinates that are the
same are less important than the coordinates that are different. For
my purpose here, this is not good - because articles with more tags
(or less) tags than the average are going to be disadvantaged.&lt;/p&gt;

&lt;h2&gt;Cosine Similarity&lt;/h2&gt;

&lt;p&gt;This method is very similar to the one above, but does tend to give
slightly different results, because this one actually measures
similarity instead of dissimilarity. Here&amp;#39;s the formula:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="422" height="148" src="../../assets/img/cosine-similarity-34eaf5ab.png" /&gt;
If you look at the visual with the 2 axis and 2 points, we need the
cosine of the angle &lt;em&gt;theta&lt;/em&gt; that&amp;#39;s between the vectors associated with
our 2 points. And for our sample it does give better results.&lt;/p&gt;

&lt;p&gt;The values will range between -1 and 1. -1 means that 2 items are
total opposites, 0 means that the 2 items are independent of each
other and 1 means that the 2 items are very similar (btw, because we
are only doing zeros and ones for coordinates here, this score will
never get negative for our sample).&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s the Ruby code (leaving out the wiring to our sample data, do
that as an exercise):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;dot_product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;products&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;products&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="nb"&gt;p&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;magnitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;squares&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;map&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;squares&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="c1"&gt;# Returns the cosine of the angle between the vectors &lt;/span&gt;
&lt;span class="c1"&gt;#associated with 2 points&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="c1"&gt;# Params:&lt;/span&gt;
&lt;span class="c1"&gt;#  - a, b: list of coordinates (float or integer)&lt;/span&gt;
&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;cosine_similarity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;dot_product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;magnitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;magnitude&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also, sorting the articles in the above sample gives me the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;article&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Crawling the Android Marketplace&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;similarity&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;0.5163977794943222&lt;/span&gt;

&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;article&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;UX&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Tip:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Don&amp;#39;t&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Hurt&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Me&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;On&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Sign-Up&amp;quot;&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;similarity&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;0.33333333333333337&lt;/span&gt;

&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;article&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;Blogging Platform for Hackers&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;similarity&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;0.23570226039551587&lt;/span&gt;

&lt;span class="p-Indicator"&gt;-&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;article&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Data&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Mining:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Finding&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Similar&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Items&amp;quot;&lt;/span&gt;
  &lt;span class="l-Scalar-Plain"&gt;similarity&lt;/span&gt;&lt;span class="p-Indicator"&gt;:&lt;/span&gt; &lt;span class="l-Scalar-Plain"&gt;0.0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Right, so much better for this chosen sample and usage. Ain&amp;#39;t this
fun? BUT, you guessed it, there&amp;#39;s a problem with this too &amp;hellip;&lt;/p&gt;

&lt;h3&gt;The Problem with Our Sample; The Tf-Idf Weight&lt;/h3&gt;

&lt;p&gt;Our data sample is so simple that we could have simply counted the
number of common tags and use that as a metric. The result would be
the same without getting fancy with Cosine Similarity :-)&lt;/p&gt;

&lt;p&gt;Clearly a tag such as &amp;ldquo;Heroku&amp;rdquo; is more specific than a general purpose
tag such as &amp;ldquo;Web&amp;rdquo;. Also, just because Jekyll was mentioned in an
article, that doesn&amp;#39;t make the article about Jekyll. Also an article
tagged with &amp;ldquo;Android&amp;rdquo; may be twice as Android-related as another
article also tagged with &amp;ldquo;Android&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;So here&amp;#39;s a solution to this: the
&lt;strong&gt;&lt;a href="http://en.wikipedia.org/wiki/Tf%E2%80%93idf"&gt;Tf-Idf weight&lt;/a&gt;&lt;/strong&gt;, &lt;em&gt;a
statistical measure used to evaluate how important a word is to a
document in a collection or corpus&lt;/em&gt;. With it you can give values to
your coordinates that are much more specific than simple ones and
zeros. But I&amp;#39;ll leave that for another day.&lt;/p&gt;

&lt;p&gt;Also, related to our simple data-set here, perhaps an even simpler
metric, like the
&lt;a href="http://en.wikipedia.org/wiki/Jaccard_index"&gt;Jaccard index&lt;/a&gt; would be
better.&lt;/p&gt;

&lt;h2&gt;Pearson Correlation Coefficient&lt;/h2&gt;

&lt;p&gt;The
&lt;a href="http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient"&gt;Pearson Correlation Coefficient&lt;/a&gt;
for finding the similarity of 2 items is slightly more sophisticated
and doesn&amp;#39;t really apply to my chosen data-set. This coefficient
measures how well two samples are linearly related.&lt;/p&gt;

&lt;p&gt;For example, on IMDB we may have 2 users. One of them, lets call him
John, has given the following ratings to 5 movies:
[1, 2, 3, 4, 5]. The other one, Mary, has given the following ratings
to the same 5 movies: [4, 5, 6, 7, 8]. The 2 users are very similar,
as there is a perfect linear correlation between them, since Mary just
gives the same rankings as John plus 3. The formula itself or the
theory is not very intuitive though. But it is simple to calculate:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="395" height="222" src="../../assets/img/pearson-b9ebe4c6.png" /&gt;
Here&amp;#39;s the code:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;pearson_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;unless&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;

  &lt;span class="c1"&gt;# summing the preferences&lt;/span&gt;
  &lt;span class="n"&gt;sum1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;sum2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;# summing up the squares&lt;/span&gt;
  &lt;span class="n"&gt;sum1_sq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;sum2_sq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="c1"&gt;# summing up the product&lt;/span&gt;
  &lt;span class="n"&gt;prod_sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;inject&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

  &lt;span class="c1"&gt;# calculating the Pearson score&lt;/span&gt;
  &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;prod_sum&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sum2&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
  &lt;span class="n"&gt;den&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;sum1_sq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum1&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum2_sq&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum2&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;den&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;den&lt;/span&gt;  
&lt;span class="k"&gt;end&lt;/span&gt;


&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;pearson_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 1.0&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;pearson_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 0.5063696835418333&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;pearson_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; 0.4338609156373132&lt;/span&gt;
&lt;span class="nb"&gt;puts&lt;/span&gt; &lt;span class="n"&gt;pearson_score&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# =&amp;gt; -1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Manhattan Distance&lt;/h2&gt;

&lt;p&gt;There is no one size fits all and the formula you&amp;#39;re going to use
depends on your data and what you want out of it.&lt;/p&gt;

&lt;p&gt;For instance the
&lt;a href="http://en.wikipedia.org/wiki/Taxicab_geometry"&gt;Manhattan Distance&lt;/a&gt;
computes the distance that would be traveled to get from one data
point to the other if a grid-like path is followed. I like this
graphic from Wikipedia that perfectly illustrates the difference with
Euclidean distance:&lt;/p&gt;

&lt;p&gt;&lt;img class="center" supported_extensions="[&amp;quot;.png&amp;quot;, &amp;quot;.jpg&amp;quot;, &amp;quot;.jpeg&amp;quot;, &amp;quot;.bmp&amp;quot;, &amp;quot;.gif&amp;quot;]" alt="" width="283" height="283" src="../../assets/img/manhattan-d71d85da.png" /&gt;
Red, yellow and blue lines all have the same length and the distance
is bigger than the corresponding green diagonal, which is the normal
Euclidean distance.&lt;/p&gt;

&lt;p&gt;Personally I haven&amp;#39;t found a usage for it, as it is more related to
path-finding algorithms, but it&amp;#39;s a good thing to keep in mind that it
exists and may prove useful. Since it measures how many changes you
have to do to your origin location to get to your destination while
being limited to taking small steps in a grid-like system, it is very
similar in spirit to the
&lt;a href="http://en.wikipedia.org/wiki/Levenshtein_distance"&gt;Levenshtein distance&lt;/a&gt;,
which measures the minimum number of changes required to transform
some text into another.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Just Merged 2 Domains: Rationale, Setup</title>
    <link rel="alternate" href="/blog/2012/01/10/domains-merged.html"/>
    <id>http://bionicspirit.com/blog/2012/01/10/domains-merged.html</id>
    <published>2012-01-10T00:00:00Z</published>
    <updated>2012-01-10T00:00:00Z</updated>
    <author>
      <name>Alexandru NEdelcu</name>
    </author>
    <summary type="html">&lt;p&gt;I migrated &lt;em&gt;alexn.org&lt;/em&gt; to a new domain name: &lt;em&gt;bionicspirit.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;bionicspirit.com&lt;/em&gt; was supposed to be a blog about Android-related
development, however I cannot focus on two blogs, one being a big
enough chore already. I also prefer &lt;em&gt;bionicspirit.com&lt;/em&gt; because:&lt;/p&gt;
</summary>
    <content type="html">&lt;p&gt;I migrated &lt;em&gt;alexn.org&lt;/em&gt; to a new domain name: &lt;em&gt;bionicspirit.com&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;bionicspirit.com&lt;/em&gt; was supposed to be a blog about Android-related
development, however I cannot focus on two blogs, one being a big
enough chore already. I also prefer &lt;em&gt;bionicspirit.com&lt;/em&gt; because:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;it can be pronounced even over the phone, in English or in my native
language,&lt;/li&gt;
&lt;li&gt;it is easier to remember, even if it is longer,&lt;/li&gt;
&lt;li&gt;it is a dot-com.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;301 Permanent Redirect&lt;/h2&gt;

&lt;p&gt;I had to do a 301 Permanent Redirect for all requests, from
&lt;em&gt;alexn.org&lt;/em&gt; to &lt;em&gt;bionicspirit.com&lt;/em&gt;, without changing the path. This
keeps all links valid, keeps users happy and also keeps the Google
Juice flowing. Unfortunately my Google ranking did take a plunge into
obscurity, but hopefully it will recover.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; oops, apparently Google Webmasters has the option to send
a request for &lt;em&gt;Change of Address&lt;/em&gt;. Also, you don&amp;#39;t have to completely
take your old domain off the net with the 301 Redirect - at first you
can add a &lt;em&gt;rel=&amp;ldquo;canonical&amp;rdquo;&lt;/em&gt; to your web pages, in your document&amp;#39;s
head, like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;link&lt;/span&gt; &lt;span class="na"&gt;rel=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;canonical&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.newdomain.com/path/to/document&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;More details about &lt;em&gt;rel=&amp;ldquo;canonical&amp;rdquo;&lt;/em&gt; you can find by viewing this
video by Matt Cutts: &lt;a href="http://support.google.com/webmasters/bin/answer.py?hl=en&amp;answer=139394"&gt;About
rel=&amp;ldquo;canonical&amp;rdquo;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Unfortunately for me, the damage is done already. Well, I don&amp;#39;t care
that much, it&amp;#39;s just I was pretty fond to see my article on
&lt;a href="http://bionicspirit.com/blog/2011/03/24/cross-domain-requests.html"&gt;Cross-Domain, Cross-Browser Ajax Requests&lt;/a&gt;
being the first result on Google and I hope that I&amp;#39;ll get that ranking
back somehow.&lt;/p&gt;

&lt;h2&gt;Configuring a Free Server for Handling HTTP 301 Redirects&lt;/h2&gt;

&lt;p&gt;In case you don&amp;#39;t have a smart DNS service, here&amp;#39;s how to do it
cheaply, using Heroku (again):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# new directory&lt;/span&gt;
mkdir mydomain
&lt;span class="c"&gt;# change to it&lt;/span&gt;
&lt;span class="nb"&gt;cd &lt;/span&gt;mydomain

&lt;span class="c"&gt;# initialize a git repository&lt;/span&gt;
git init .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then create a file called &amp;ldquo;&lt;em&gt;Gemfile&lt;/em&gt;&amp;rdquo;, for specifying dependencies:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://rubygems.org&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rack&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;group&lt;/span&gt; &lt;span class="ss"&gt;:development&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt;
  &lt;span class="c1"&gt;# command line tools&lt;/span&gt;
  &lt;span class="n"&gt;gem&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;heroku&amp;#39;&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Install these prerequisites (on the command-line again):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# in case you don&amp;#39;t already have Bundler installed:&lt;/span&gt;
gem install bundler

&lt;span class="c"&gt;# and then ...&lt;/span&gt;
bundle install 
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Create a Rack configuration file that handles your logic, called
&amp;ldquo;&lt;em&gt;config.ru&lt;/em&gt;&amp;rdquo;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;# our Rack middleware&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RedirectBetweenDomains&lt;/span&gt;
  &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;request&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="ss"&gt;Rack&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="ss"&gt;:Request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# replacement logic here:&lt;/span&gt;
    &lt;span class="n"&gt;new_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/(https?:\/\/)[^\/]+/&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;\1bionicspirit.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;301&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Location&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;=&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;new_url&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="o"&gt;[]]&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;

&lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="no"&gt;RedirectBetweenDomains&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now deploy on Heroku (from the command line):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# committing&lt;/span&gt;
git add .
git commit -m &lt;span class="s1"&gt;&amp;#39;initial commit - rack config&amp;#39;&lt;/span&gt;

&lt;span class="c"&gt;# creating heroku app&lt;/span&gt;
heroku create

&lt;span class="c"&gt;# renaming to something nicer&lt;/span&gt;
heroku rename yourappid

&lt;span class="c"&gt;# deploying on heroku&lt;/span&gt;
git push heroku master
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When it finishes, you can test the setup on
&lt;em&gt;http://yourappid.heroku.com&lt;/em&gt; (where &lt;em&gt;rabbit&lt;/em&gt; is your application&amp;#39;s
name). Also checkout their article on
&lt;a href="http://devcenter.heroku.com/articles/custom-domains"&gt;adding custom domains&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In case you&amp;#39;re wondering, this is the Heroku instance I&amp;#39;ve got
configured: &lt;a href="http://alexn.heroku.com"&gt;alexn.heroku.com&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
