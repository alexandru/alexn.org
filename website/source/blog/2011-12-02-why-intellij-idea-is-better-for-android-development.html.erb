---
title: "Why IntelliJ IDEA is Better for Android Development"
archive: true
tags:
  - Android
  - IDE
---

<p>
  The default IDE, as enforced by Google's Android SDK, is
  Eclipse. Overall Eclipse is a good IDE, however my experience with
  it and the Android plugin has been less than stellar and I simply
  cannot stand it. Which is why I switched to <a
  target="_blank" href="http://www.jetbrains.com/idea/free_java_ide.html">IntelliJ
  IDEA, the Community Edition</a>.
</p>

<%= image_tag "intellij.png" %>

<p>
  Normally I work within Emacs, for everything I do. However with Java
  things get more complicated and especially when you're talking about
  Android development. That's because the API is quite complex and in
  this instance I feel the need for intellisense to help me out (I'm a
  rookie). It's nice to see the available methods over an object, it's
  also nice to have the IDE automatically write the boilerplate of the
  interface methods you have to implement. I also feel the need for
  easy testing on my phone or in the emulator - pressing a play button
  to make everything start is surely nice.
</p>

<h3>Eclipse Is More Sluggish than IntelliJ IDEA</h3>

<p>
  I don't know how other people use Eclipse or their experience on the
  matter, however on my Ubuntu-powered laptop Eclipse is basically
  unusable. Auto-completion of anything can take a couple of seconds
  to work, the IDE regularly freezes for seconds for no discernible
  reason.
</p>

<p>
  I made sure GCJ is not installed on my system, only the official Sun
  JDK (not even OpenJDK). I edited eclipse.ini, increasing the size of
  -Xms and -Xmx as recommended. However nothing seemed to
  work. Eclipse is still unusable for me - and asking other devs about
  it, they have had the same experience too, telling me that I'll
  eventually get used to it. Seriously?
</p>

<p>
  Maybe I've been spoiled by my experience with using a light-weight
  editor like Emacs.
</p>

<h3>IntelliJ IDEA is More Command-line Friendly</h3>

<p>
  I like the command-line, I like it a lot. However the Android
  project created by Eclipse is not prepared for command-line
  building, signing or deployment to the emulator or a device.
</p>

<p>
  You can fix this by modifying the project to include the required
  Ant build file, simply by doing something like this, which creates
  the required Ant build files (like <i>build.xml</i>):
</p>

<% code("bash") do %>
android update project -p .
<% end %>

<p>
  There's also one caveat with this - if you have your own JARs added
  to the project, they have to be in a (flat) directory called
  <i>./libs</i>. However, Eclipse does not make that mandatory. In
  fact Eclipse does not even create a libs directory for you, since
  Eclipse relies on its own rules for building the project.
</p>

<p>
  With IntelliJ IDEA the above are non-issues. IDEA creates the
  required build files for you. Not only that, but it relies on those
  build files for building the project. So if you have custom build
  rules, IntelliJ IDEA will use them without you having to go through
  pain to set everything up correctly.
</p>

<p>
  I realize that Eclipse can be configured here to use your build.xml
  file, but what's the point of an IDE if it stays in your way?
</p>

<h3>IntelliJ IDEA is Smarter</h3>

<p>
  This is hard to explain because Eclipse is a reasonably good IDE in
  every sense when it comes to <i>smartness</i>, like intellisense and
  refactoring.
</p>

<p>
  However the difference is in the details and IntelliJ IDEA is a lot
  smarter.
</p>

<p>
  For instance, in both IDE typing "new Date" and hitting ALT-Space
  will auto-import a Date class. However IntelliJ IDEA imports
  "java.util.Date", while Eclipse imports "java.sql.Date". A stupid
  detail like this interrupts my flow - if you can't make a reasonable
  guess, then it's better if this feature wasn't available at
  all. Reasonable defaults man, it's all about reasonable defaults ;-)
</p>

<h3>One caveat: No Interface Builder In IntelliJ IDEA</h3>

<p>
  This is one big problem with IntelliJ IDEA. However my experience
  with Eclipse's built-in WYSIWYG interface editor has been pretty
  bad. It is not designed for refactoring interfaces - when you're
  doing changes to an already built interface, you'll drop to XML a
  lot. 
</p>

<p>
  I wish Android had a kickass interface builder, however after
  working all of these years with raw HTML and CSS, I don't feel it's
  that much of an issue. Editing XML manually is OK for simple
  interfaces and IDEA gives you code completion specific to the
  res/android format, doing more than a smart XML editor
  can. Complicated interfaces will have custom widgets that get added
  dynamically, so the interface builder will be useless anyway.
</p>

